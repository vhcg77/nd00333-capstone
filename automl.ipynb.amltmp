{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Automated ML\n",
        "\n",
        "TODO: Import Dependencies. In the cell below, import all the dependencies that you will need to complete the project."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import logging\n",
        "import os\n",
        "import csv\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn import datasets\n",
        "import pkg_resources\n",
        "\n",
        "import azureml.core\n",
        "from azureml.core.experiment import Experiment\n",
        "from azureml.core.workspace import Workspace\n",
        "from azureml.train.automl import AutoMLConfig\n",
        "from azureml.core.dataset import Dataset\n",
        "\n",
        "from azureml.pipeline.steps import AutoMLStep\n",
        "\n",
        "# Check core SDK version number\n",
        "print(\"SDK version:\", azureml.core.VERSION)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "SDK version: 1.34.0\n"
        }
      ],
      "execution_count": 1,
      "metadata": {
        "gather": {
          "logged": 1633971250429
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Dataset\n",
        "\n",
        "### Overview\n",
        "TODO: In this markdown cell, give an overview of the dataset you are using. Also mention the task you will be performing.\n",
        "\n",
        "This dataset contains numerical input variables that come from and PCA algorithm. Due to confidential concerns, the original variables are not available. Features V1, V2, ..., V8 are the outputs of the principal components from the PCA algorithm. The time and amount are the variables that are not transformed by PCA. The target variable is the feature 'Class' and it takes values 1 in case of fraud and 0 otherwise.\n",
        "\n",
        "\n",
        "This dataset contains transations made by credit cards in September 2012 by European cardholders. This dataset contains 492 frauds out of 284807 transations, and it is highly unbalanced, the positive class (fraud) account for 0.172% of all the transations.\n",
        "\n",
        "\n",
        "TODO: Get data. In the cell below, write code to access the data you will be using in this project. Remember that the dataset needs to be external."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "ws = Workspace.from_config()\n",
        "\n",
        "# choose a name for experiment\n",
        "experiment_name = 'telco-customer-churn'\n",
        "experiment=Experiment(ws, experiment_name)\n",
        "\n",
        "# Try to load the dataset from the Workspace. Otherwise, create it from the file\n",
        "# NOTE: update the key to match the dataset name\n",
        "found = False\n",
        "key = \"Customer Churn\"\n",
        "description_text = \"Customer Churn DataSet for Udacity Capstone Project\"\n",
        "\n",
        "if key in ws.datasets.keys(): \n",
        "        found = True\n",
        "        dataset = ws.datasets[key] \n",
        "\n",
        "if not found:\n",
        "        # Create AML Dataset and register it into Workspace\n",
        "        example_data = 'https://raw.githubusercontent.com/srees1988/predict-churn-py/main/customer_churn_data.csv'\n",
        "        dataset = Dataset.Tabular.from_delimited_files(example_data)        \n",
        "        #Register Dataset in Workspace\n",
        "        dataset = dataset.register(workspace=ws,\n",
        "                                   name=key,\n",
        "                                   description=description_text)\n",
        "\n",
        "\n",
        "df = dataset.to_pandas_dataframe()\n",
        "df.describe()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 2,
          "data": {
            "text/plain": "       SeniorCitizen       tenure  MonthlyCharges  TotalCharges\ncount    7043.000000  7043.000000     7043.000000   7032.000000\nmean        0.162147    32.371149       64.761692   2283.300441\nstd         0.368612    24.559481       30.090047   2266.771362\nmin         0.000000     0.000000       18.250000     18.800000\n25%         0.000000     9.000000       35.500000    401.450000\n50%         0.000000    29.000000       70.350000   1397.475000\n75%         0.000000    55.000000       89.850000   3794.737500\nmax         1.000000    72.000000      118.750000   8684.800000",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>SeniorCitizen</th>\n      <th>tenure</th>\n      <th>MonthlyCharges</th>\n      <th>TotalCharges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>7043.000000</td>\n      <td>7043.000000</td>\n      <td>7043.000000</td>\n      <td>7032.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.162147</td>\n      <td>32.371149</td>\n      <td>64.761692</td>\n      <td>2283.300441</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.368612</td>\n      <td>24.559481</td>\n      <td>30.090047</td>\n      <td>2266.771362</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>18.250000</td>\n      <td>18.800000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.000000</td>\n      <td>9.000000</td>\n      <td>35.500000</td>\n      <td>401.450000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>0.000000</td>\n      <td>29.000000</td>\n      <td>70.350000</td>\n      <td>1397.475000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>0.000000</td>\n      <td>55.000000</td>\n      <td>89.850000</td>\n      <td>3794.737500</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.000000</td>\n      <td>72.000000</td>\n      <td>118.750000</td>\n      <td>8684.800000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 2,
      "metadata": {
        "gather": {
          "logged": 1633971274757
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Check the first five rows:"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 3,
          "data": {
            "text/plain": "   customerID  gender  SeniorCitizen  Partner  Dependents  tenure  \\\n0  7590-VHVEG  Female              0     True       False       1   \n1  5575-GNVDE    Male              0    False       False      34   \n2  3668-QPYBK    Male              0    False       False       2   \n3  7795-CFOCW    Male              0    False       False      45   \n4  9237-HQITU  Female              0    False       False       2   \n\n   PhoneService     MultipleLines InternetService OnlineSecurity  ...  \\\n0         False  No phone service             DSL             No  ...   \n1          True                No             DSL            Yes  ...   \n2          True                No             DSL            Yes  ...   \n3         False  No phone service             DSL            Yes  ...   \n4          True                No     Fiber optic             No  ...   \n\n  DeviceProtection TechSupport StreamingTV StreamingMovies        Contract  \\\n0               No          No          No              No  Month-to-month   \n1              Yes          No          No              No        One year   \n2               No          No          No              No  Month-to-month   \n3              Yes         Yes          No              No        One year   \n4               No          No          No              No  Month-to-month   \n\n  PaperlessBilling              PaymentMethod MonthlyCharges  TotalCharges  \\\n0             True           Electronic check          29.85         29.85   \n1            False               Mailed check          56.95       1889.50   \n2             True               Mailed check          53.85        108.15   \n3            False  Bank transfer (automatic)          42.30       1840.75   \n4             True           Electronic check          70.70        151.65   \n\n   Churn  \n0  False  \n1  False  \n2   True  \n3  False  \n4   True  \n\n[5 rows x 21 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>customerID</th>\n      <th>gender</th>\n      <th>SeniorCitizen</th>\n      <th>Partner</th>\n      <th>Dependents</th>\n      <th>tenure</th>\n      <th>PhoneService</th>\n      <th>MultipleLines</th>\n      <th>InternetService</th>\n      <th>OnlineSecurity</th>\n      <th>...</th>\n      <th>DeviceProtection</th>\n      <th>TechSupport</th>\n      <th>StreamingTV</th>\n      <th>StreamingMovies</th>\n      <th>Contract</th>\n      <th>PaperlessBilling</th>\n      <th>PaymentMethod</th>\n      <th>MonthlyCharges</th>\n      <th>TotalCharges</th>\n      <th>Churn</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7590-VHVEG</td>\n      <td>Female</td>\n      <td>0</td>\n      <td>True</td>\n      <td>False</td>\n      <td>1</td>\n      <td>False</td>\n      <td>No phone service</td>\n      <td>DSL</td>\n      <td>No</td>\n      <td>...</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Month-to-month</td>\n      <td>True</td>\n      <td>Electronic check</td>\n      <td>29.85</td>\n      <td>29.85</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5575-GNVDE</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>34</td>\n      <td>True</td>\n      <td>No</td>\n      <td>DSL</td>\n      <td>Yes</td>\n      <td>...</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>One year</td>\n      <td>False</td>\n      <td>Mailed check</td>\n      <td>56.95</td>\n      <td>1889.50</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3668-QPYBK</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>2</td>\n      <td>True</td>\n      <td>No</td>\n      <td>DSL</td>\n      <td>Yes</td>\n      <td>...</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Month-to-month</td>\n      <td>True</td>\n      <td>Mailed check</td>\n      <td>53.85</td>\n      <td>108.15</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7795-CFOCW</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>45</td>\n      <td>False</td>\n      <td>No phone service</td>\n      <td>DSL</td>\n      <td>Yes</td>\n      <td>...</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>One year</td>\n      <td>False</td>\n      <td>Bank transfer (automatic)</td>\n      <td>42.30</td>\n      <td>1840.75</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9237-HQITU</td>\n      <td>Female</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>2</td>\n      <td>True</td>\n      <td>No</td>\n      <td>Fiber optic</td>\n      <td>No</td>\n      <td>...</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Month-to-month</td>\n      <td>True</td>\n      <td>Electronic check</td>\n      <td>70.70</td>\n      <td>151.65</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 21 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 3,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1633971453816
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The column customerID should be removed because they have unique values in the whole column:"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['customerID'].nunique() == df.shape[0]"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 4,
          "data": {
            "text/plain": "True"
          },
          "metadata": {}
        }
      ],
      "execution_count": 4,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1633971457797
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop('customerID', axis=1, inplace=True)\r\n",
        "df.head()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 5,
          "data": {
            "text/plain": "   gender  SeniorCitizen  Partner  Dependents  tenure  PhoneService  \\\n0  Female              0     True       False       1         False   \n1    Male              0    False       False      34          True   \n2    Male              0    False       False       2          True   \n3    Male              0    False       False      45         False   \n4  Female              0    False       False       2          True   \n\n      MultipleLines InternetService OnlineSecurity OnlineBackup  \\\n0  No phone service             DSL             No          Yes   \n1                No             DSL            Yes           No   \n2                No             DSL            Yes          Yes   \n3  No phone service             DSL            Yes           No   \n4                No     Fiber optic             No           No   \n\n  DeviceProtection TechSupport StreamingTV StreamingMovies        Contract  \\\n0               No          No          No              No  Month-to-month   \n1              Yes          No          No              No        One year   \n2               No          No          No              No  Month-to-month   \n3              Yes         Yes          No              No        One year   \n4               No          No          No              No  Month-to-month   \n\n   PaperlessBilling              PaymentMethod  MonthlyCharges  TotalCharges  \\\n0              True           Electronic check           29.85         29.85   \n1             False               Mailed check           56.95       1889.50   \n2              True               Mailed check           53.85        108.15   \n3             False  Bank transfer (automatic)           42.30       1840.75   \n4              True           Electronic check           70.70        151.65   \n\n   Churn  \n0  False  \n1  False  \n2   True  \n3  False  \n4   True  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gender</th>\n      <th>SeniorCitizen</th>\n      <th>Partner</th>\n      <th>Dependents</th>\n      <th>tenure</th>\n      <th>PhoneService</th>\n      <th>MultipleLines</th>\n      <th>InternetService</th>\n      <th>OnlineSecurity</th>\n      <th>OnlineBackup</th>\n      <th>DeviceProtection</th>\n      <th>TechSupport</th>\n      <th>StreamingTV</th>\n      <th>StreamingMovies</th>\n      <th>Contract</th>\n      <th>PaperlessBilling</th>\n      <th>PaymentMethod</th>\n      <th>MonthlyCharges</th>\n      <th>TotalCharges</th>\n      <th>Churn</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Female</td>\n      <td>0</td>\n      <td>True</td>\n      <td>False</td>\n      <td>1</td>\n      <td>False</td>\n      <td>No phone service</td>\n      <td>DSL</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Month-to-month</td>\n      <td>True</td>\n      <td>Electronic check</td>\n      <td>29.85</td>\n      <td>29.85</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Male</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>34</td>\n      <td>True</td>\n      <td>No</td>\n      <td>DSL</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>One year</td>\n      <td>False</td>\n      <td>Mailed check</td>\n      <td>56.95</td>\n      <td>1889.50</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Male</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>2</td>\n      <td>True</td>\n      <td>No</td>\n      <td>DSL</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Month-to-month</td>\n      <td>True</td>\n      <td>Mailed check</td>\n      <td>53.85</td>\n      <td>108.15</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Male</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>45</td>\n      <td>False</td>\n      <td>No phone service</td>\n      <td>DSL</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>One year</td>\n      <td>False</td>\n      <td>Bank transfer (automatic)</td>\n      <td>42.30</td>\n      <td>1840.75</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Female</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>2</td>\n      <td>True</td>\n      <td>No</td>\n      <td>Fiber optic</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Month-to-month</td>\n      <td>True</td>\n      <td>Electronic check</td>\n      <td>70.70</td>\n      <td>151.65</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 5,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1633971459067
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Check the data types present along the columns:"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.dtypes"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 6,
          "data": {
            "text/plain": "gender               object\nSeniorCitizen         int64\nPartner                bool\nDependents             bool\ntenure                int64\nPhoneService           bool\nMultipleLines        object\nInternetService      object\nOnlineSecurity       object\nOnlineBackup         object\nDeviceProtection     object\nTechSupport          object\nStreamingTV          object\nStreamingMovies      object\nContract             object\nPaperlessBilling       bool\nPaymentMethod        object\nMonthlyCharges      float64\nTotalCharges        float64\nChurn                  bool\ndtype: object"
          },
          "metadata": {}
        }
      ],
      "execution_count": 6,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1633971464007
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's check the missing values:"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# check missing values\r\n",
        "df.isnull().sum()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 7,
          "data": {
            "text/plain": "gender               0\nSeniorCitizen        0\nPartner              0\nDependents           0\ntenure               0\nPhoneService         0\nMultipleLines        0\nInternetService      0\nOnlineSecurity       0\nOnlineBackup         0\nDeviceProtection     0\nTechSupport          0\nStreamingTV          0\nStreamingMovies      0\nContract             0\nPaperlessBilling     0\nPaymentMethod        0\nMonthlyCharges       0\nTotalCharges        11\nChurn                0\ndtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 7,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1633971467838
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's check the unique values of the float columns:"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "float_columns = df.select_dtypes(include=['float64']).columns\r\n",
        "print(float_columns)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Index(['MonthlyCharges', 'TotalCharges'], dtype='object')\n"
        }
      ],
      "execution_count": 8,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1633971471558
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for column in float_columns:\r\n",
        "    print(df[column].value_counts())\r\n",
        "    print('\\n')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "20.05     61\n19.85     45\n19.95     44\n19.90     44\n20.00     43\n          ..\n114.75     1\n103.60     1\n113.40     1\n57.65      1\n113.30     1\nName: MonthlyCharges, Length: 1585, dtype: int64\n\n\n20.20      11\n19.75       9\n19.65       8\n20.05       8\n19.90       8\n           ..\n1066.15     1\n249.95      1\n8333.95     1\n7171.70     1\n1024.00     1\nName: TotalCharges, Length: 6530, dtype: int64\n\n\n"
        }
      ],
      "execution_count": 9,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1633971472512
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's check the unique values of the float columns:"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "bool_columns = df.select_dtypes(include=['bool']).columns\r\n",
        "print(bool_columns)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Index(['Partner', 'Dependents', 'PhoneService', 'PaperlessBilling', 'Churn'], dtype='object')\n"
        }
      ],
      "execution_count": 10,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1633971475374
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for column in bool_columns:\r\n",
        "    print(df[column].value_counts())\r\n",
        "    print('\\n')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "False    3641\nTrue     3402\nName: Partner, dtype: int64\n\n\nFalse    4933\nTrue     2110\nName: Dependents, dtype: int64\n\n\nTrue     6361\nFalse     682\nName: PhoneService, dtype: int64\n\n\nTrue     4171\nFalse    2872\nName: PaperlessBilling, dtype: int64\n\n\nFalse    5174\nTrue     1869\nName: Churn, dtype: int64\n\n\n"
        }
      ],
      "execution_count": 11,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1633971476619
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "5174/1864"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 12,
          "data": {
            "text/plain": "2.7757510729613735"
          },
          "metadata": {}
        }
      ],
      "execution_count": 12,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1633971478225
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The variable Churn is highly skewed toward False by a factor of 2.77"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's check the unique values of the object columns:"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "object_columns = df.select_dtypes(include=['object']).columns\r\n",
        "print(object_columns)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Index(['gender', 'MultipleLines', 'InternetService', 'OnlineSecurity',\n       'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV',\n       'StreamingMovies', 'Contract', 'PaymentMethod'],\n      dtype='object')\n"
        }
      ],
      "execution_count": 13,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1633971482495
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for column in object_columns:\r\n",
        "    print(df[column].value_counts())\r\n",
        "    print('\\n')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Male      3555\nFemale    3488\nName: gender, dtype: int64\n\n\nNo                  3390\nYes                 2971\nNo phone service     682\nName: MultipleLines, dtype: int64\n\n\nFiber optic    3096\nDSL            2421\nNo             1526\nName: InternetService, dtype: int64\n\n\nNo                     3498\nYes                    2019\nNo internet service    1526\nName: OnlineSecurity, dtype: int64\n\n\nNo                     3088\nYes                    2429\nNo internet service    1526\nName: OnlineBackup, dtype: int64\n\n\nNo                     3095\nYes                    2422\nNo internet service    1526\nName: DeviceProtection, dtype: int64\n\n\nNo                     3473\nYes                    2044\nNo internet service    1526\nName: TechSupport, dtype: int64\n\n\nNo                     2810\nYes                    2707\nNo internet service    1526\nName: StreamingTV, dtype: int64\n\n\nNo                     2785\nYes                    2732\nNo internet service    1526\nName: StreamingMovies, dtype: int64\n\n\nMonth-to-month    3875\nTwo year          1695\nOne year          1473\nName: Contract, dtype: int64\n\n\nElectronic check             2365\nMailed check                 1612\nBank transfer (automatic)    1544\nCredit card (automatic)      1522\nName: PaymentMethod, dtype: int64\n\n\n"
        }
      ],
      "execution_count": 14,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1633971483455
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Train Test Splitting"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\r\n",
        "from azureml.data.dataset_factory import TabularDatasetFactory\r\n",
        "\r\n",
        "churn = df['Churn']\r\n",
        "\r\n",
        "# Split data into train and test data taking into account the variable Churn is highly skewed:\r\n",
        "train_dataset, test_dataset = train_test_split(df, test_size=0.2, stratify=churn, random_state=42)\r\n",
        "\r\n",
        "directory = 'train'\r\n",
        "if not os.path.exists(directory):\r\n",
        "    os.makedirs(directory)\r\n",
        "    \r\n",
        "directory = 'test'\r\n",
        "if not os.path.exists(directory):\r\n",
        "    os.makedirs(directory)\r\n",
        "\r\n",
        "# Export data as csv\r\n",
        "train_dataset.to_csv(\"train/train_data.csv\", index=False)\r\n",
        "test_dataset.to_csv(\"test/test_data.csv\", index=False)\r\n",
        "\r\n",
        "# Upload data to the datastore\r\n",
        "datastore = ws.get_default_datastore()\r\n",
        "datastore.upload(src_dir='./train', target_path = experiment_name)\r\n",
        "datastore.upload(src_dir='./test', target_path = experiment_name)\r\n",
        "\r\n",
        "\r\n",
        "dataset = Dataset.Tabular.from_delimited_files(path = [(datastore, (\"train/train_data.csv\"))])\r\n",
        "dataset = Dataset.Tabular.from_delimited_files(path = [(datastore, (\"test/test_data.csv\"))])\r\n",
        "\r\n",
        "\r\n",
        "# train_dataset_azure = TabularDatasetFactory.from_delimited_files(path=datastore.path(\"train/train_data.csv\"))\r\n",
        "# test_dataset_azure = TabularDatasetFactory.from_delimited_files(path=datastore.path(\"test/test_data.csv\"))"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1633968835628
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Cluster Provisioning\r\n"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core.compute import ComputeTarget, AmlCompute\r\n",
        "from azureml.core.compute_target import ComputeTargetException\r\n",
        "\r\n",
        "# TODO: Create compute cluster\r\n",
        "# Use vm_size = \"Standard_D2_V2\" in your provisioning configuration.\r\n",
        "# max_nodes should be no greater than 4.\r\n",
        "\r\n",
        "### YOUR CODE HERE ###\r\n",
        "\r\n",
        "cluster_name = \"cluster-vhcg\"\r\n",
        "# verify that the cluster does not exist already\r\n",
        "try:\r\n",
        "    cpu_cluster = ComputeTarget(workspace=ws, name = cluster_name)\r\n",
        "    print('Found existing cluster, use it.')\r\n",
        "except ComputeTargetException:\r\n",
        "    compute_config = AmlCompute.provisioning_configuration(vm_size='Standard_D2_V2', max_nodes = 1, idle_seconds_before_scaledown=120)\r\n",
        "    cpu_cluster = ComputeTarget.create(ws, cluster_name, compute_config)\r\n",
        "\r\n",
        "cpu_cluster.wait_for_completion(show_output=True)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "InProgress....\nSucceededProvisioning operation finished, operation \"Succeeded\"\nSucceeded\nAmlCompute wait for completion finished\n\nMinimum number of nodes requested have been provisioned\n"
        }
      ],
      "execution_count": 16,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1633971644615
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## AutoML Configuration\n",
        "\n",
        "TODO: Explain why you chose the automl settings and cofiguration you used below."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# TODO: Put your automl config here\n",
        "automl_config = AutoMLConfig(\n",
        "                                compute_target=cluster_name,\n",
        "                                task='classification',\n",
        "                                training_data=dataset,\n",
        "                                label_column_name='Churn',\n",
        "                                n_cross_validations=10,\n",
        "                                validation_size=0.2,\n",
        "                                primary_metric='AUC_weighted',\n",
        "                                experiment_timeout_minutes=30,\n",
        "                                max_concurrent_iterations=5,\n",
        "                                max_cores_per_iteration=-1, \n",
        "\n",
        "                                )"
      ],
      "outputs": [],
      "execution_count": 17,
      "metadata": {
        "gather": {
          "logged": 1633971700066
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# TODO: Submit your experiment\n",
        "from azureml.widgets import RunDetails\n",
        "run = experiment.submit(config=automl_config, show_output=True)\n",
        "RunDetails(run).show()\n",
        "run.wait_for_completion()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Submitting remote run.\nNo run_configuration provided, running on cluster-vhcg77 with default configuration\nRunning on remote compute: cluster-vhcg77\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<IPython.core.display.HTML object>",
            "text/html": "<table style=\"width:100%\"><tr><th>Experiment</th><th>Id</th><th>Type</th><th>Status</th><th>Details Page</th><th>Docs Page</th></tr><tr><td>telco-customer-churn</td><td>AutoML_14e70e02-a31c-4dc2-88df-f660af838a84</td><td>automl</td><td>NotStarted</td><td><a href=\"https://ml.azure.com/runs/AutoML_14e70e02-a31c-4dc2-88df-f660af838a84?wsid=/subscriptions/48a74bb7-9950-4cc1-9caa-5d50f995cc55/resourcegroups/aml-quickstarts-160731/workspaces/quick-starts-ws-160731&amp;tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\" target=\"_blank\" rel=\"noopener\">Link to Azure Machine Learning studio</a></td><td><a href=\"https://docs.microsoft.com/en-us/python/api/overview/azure/ml/intro?view=azure-ml-py\" target=\"_blank\" rel=\"noopener\">Link to Documentation</a></td></tr></table>"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "\nCurrent status: FeaturesGeneration. Generating features for the dataset.\nCurrent status: DatasetFeaturization. Beginning to fit featurizers and featurize the dataset.\nCurrent status: DatasetCrossValidationSplit. Generating individually featurized CV splits.\nCurrent status: ModelSelection. Beginning model selection.\n\n****************************************************************************************************\nDATA GUARDRAILS: \n\nTYPE:         Class balancing detection\nSTATUS:       PASSED\nDESCRIPTION:  Your inputs were analyzed, and all classes are balanced in your training data.\n              Learn more about imbalanced data: https://aka.ms/AutomatedMLImbalancedData\n\n****************************************************************************************************\n\nTYPE:         Missing feature values imputation\nSTATUS:       DONE\nDESCRIPTION:  If the missing values are expected, let the run complete. Otherwise cancel the current run and use a script to customize the handling of missing feature values that may be more appropriate based on the data type and business requirement.\n              Learn more about missing value imputation: https://aka.ms/AutomatedMLFeaturization\nDETAILS:      \n+---------------------------------+---------------------------------+---------------------------------+\n|Column name                      |Missing value count              |Imputation type                  |\n+=================================+=================================+=================================+\n|TotalCharges                     |11                               |mean                             |\n+---------------------------------+---------------------------------+---------------------------------+\n\n****************************************************************************************************\n\nTYPE:         High cardinality feature detection\nSTATUS:       DONE\nDESCRIPTION:  The training data had the following high cardinality features which were excluded for training. Please review your data source and possibly filter out these columns. If you want to include these features for training, you can override column purpose with appropriate column type.\n              Learn more about high cardinality feature handling: https://aka.ms/AutomatedMLFeaturization\nDETAILS:      High cardinality features refer to columns that contain a large percentage of unique values.\n+---------------------------------+---------------------------------+\n|Column name                      |Column Content Type              |\n+=================================+=================================+\n|customerID                       |hashes                           |\n+---------------------------------+---------------------------------+\n\n****************************************************************************************************\n\n****************************************************************************************************\nITERATION: The iteration being evaluated.\nPIPELINE: A summary description of the pipeline being evaluated.\nDURATION: Time taken for the current iteration.\nMETRIC: The result of computing score on the fitted pipeline.\nBEST: The best observed score thus far.\n****************************************************************************************************\n\n ITERATION   PIPELINE                                       DURATION      METRIC      BEST\n         0   MaxAbsScaler LightGBM                          0:00:42       0.8366    0.8366\n         1   MaxAbsScaler XGBoostClassifier                 0:00:42       0.8490    0.8490\n         2   MaxAbsScaler ExtremeRandomTrees                0:00:44       0.8344    0.8490\n         3   MaxAbsScaler RandomForest                      0:00:53       0.8434    0.8490\n         4   StandardScalerWrapper LightGBM                 0:00:40       0.8485    0.8490\n         5   SparseNormalizer XGBoostClassifier             0:00:39       0.8440    0.8490\n         6   SparseNormalizer RandomForest                  0:00:56       0.8493    0.8493\n         7   StandardScalerWrapper XGBoostClassifier        0:00:42       0.8325    0.8493\n         8   SparseNormalizer XGBoostClassifier             0:00:41       0.8359    0.8493\n         9   MaxAbsScaler RandomForest                      0:00:43       0.8342    0.8493\n        10   SparseNormalizer LightGBM                      0:00:39       0.8475    0.8493\n        11   MaxAbsScaler ExtremeRandomTrees                0:01:02       0.8399    0.8493\n        12   StandardScalerWrapper XGBoostClassifier        0:00:41       0.8468    0.8493\n        13   StandardScalerWrapper ExtremeRandomTrees       0:00:43       0.8322    0.8493\n        14   StandardScalerWrapper RandomForest             0:01:07       0.8211    0.8493\n        15   MaxAbsScaler LightGBM                          0:00:42       0.8469    0.8493\n        16   MaxAbsScaler LogisticRegression                0:00:42       0.8460    0.8493\n        17   StandardScalerWrapper ExtremeRandomTrees       0:01:05       0.8406    0.8493\n        18   StandardScalerWrapper XGBoostClassifier        0:00:41       0.8423    0.8493\n        19   MaxAbsScaler ExtremeRandomTrees                0:00:45       0.8340    0.8493\n        20   MaxAbsScaler LogisticRegression                0:01:12       0.8462    0.8493\n        21   StandardScalerWrapper XGBoostClassifier        0:00:40       0.8418    0.8493\n        22   StandardScalerWrapper XGBoostClassifier        0:00:45       0.8448    0.8493\n        23   MaxAbsScaler RandomForest                      0:00:43       0.8381    0.8493\n        24   SparseNormalizer XGBoostClassifier             0:00:41       0.8461    0.8493\n        25   TruncatedSVDWrapper RandomForest               0:00:41       0.5588    0.8493\n        26   StandardScalerWrapper LightGBM                 0:00:44       0.8508    0.8508\n        27   MaxAbsScaler LightGBM                          0:00:42       0.8484    0.8508\n        28   StandardScalerWrapper LightGBM                 0:00:42       0.8485    0.8508\n        29   StandardScalerWrapper LightGBM                 0:00:44       0.8508    0.8508\n        30                                                  0:03:51          nan    0.8508\nERROR: {\n    \"additional_properties\": {},\n    \"error\": {\n        \"additional_properties\": {\n            \"debugInfo\": null\n        },\n        \"code\": \"UserError\",\n        \"severity\": null,\n        \"message\": \"Experiment timeout reached, please consider increasing your experiment timeout.\",\n        \"message_format\": \"Experiment timeout reached, please consider increasing your experiment timeout.\",\n        \"message_parameters\": {},\n        \"reference_code\": null,\n        \"details_uri\": null,\n        \"target\": null,\n        \"details\": [],\n        \"inner_error\": {\n            \"additional_properties\": {},\n            \"code\": \"ResourceExhausted\",\n            \"inner_error\": {\n                \"additional_properties\": {},\n                \"code\": \"Timeout\",\n                \"inner_error\": {\n                    \"additional_properties\": {},\n                    \"code\": \"ExperimentTimeoutForIterations\",\n                    \"inner_error\": null\n                }\n            }\n        },\n        \"additional_info\": null\n    },\n    \"correlation\": null,\n    \"environment\": null,\n    \"location\": null,\n    \"time\": {},\n    \"component_name\": null\n}\n        31                                                  0:02:51          nan    0.8508\nERROR: {\n    \"additional_properties\": {},\n    \"error\": {\n        \"additional_properties\": {\n            \"debugInfo\": null\n        },\n        \"code\": \"UserError\",\n        \"severity\": null,\n        \"message\": \"Experiment timeout reached, please consider increasing your experiment timeout.\",\n        \"message_format\": \"Experiment timeout reached, please consider increasing your experiment timeout.\",\n        \"message_parameters\": {},\n        \"reference_code\": null,\n        \"details_uri\": null,\n        \"target\": null,\n        \"details\": [],\n        \"inner_error\": {\n            \"additional_properties\": {},\n            \"code\": \"ResourceExhausted\",\n            \"inner_error\": {\n                \"additional_properties\": {},\n                \"code\": \"Timeout\",\n                \"inner_error\": {\n                    \"additional_properties\": {},\n                    \"code\": \"ExperimentTimeoutForIterations\",\n                    \"inner_error\": null\n                }\n            }\n        },\n        \"additional_info\": null\n    },\n    \"correlation\": null,\n    \"environment\": null,\n    \"location\": null,\n    \"time\": {},\n    \"component_name\": null\n}\n        32                                                  0:01:54          nan    0.8508\nERROR: {\n    \"additional_properties\": {},\n    \"error\": {\n        \"additional_properties\": {\n            \"debugInfo\": null\n        },\n        \"code\": \"UserError\",\n        \"severity\": null,\n        \"message\": \"Experiment timeout reached, please consider increasing your experiment timeout.\",\n        \"message_format\": \"Experiment timeout reached, please consider increasing your experiment timeout.\",\n        \"message_parameters\": {},\n        \"reference_code\": null,\n        \"details_uri\": null,\n        \"target\": null,\n        \"details\": [],\n        \"inner_error\": {\n            \"additional_properties\": {},\n            \"code\": \"ResourceExhausted\",\n            \"inner_error\": {\n                \"additional_properties\": {},\n                \"code\": \"Timeout\",\n                \"inner_error\": {\n                    \"additional_properties\": {},\n                    \"code\": \"ExperimentTimeoutForIterations\",\n                    \"inner_error\": null\n                }\n            }\n        },\n        \"additional_info\": null\n    },\n    \"correlation\": null,\n    \"environment\": null,\n    \"location\": null,\n    \"time\": {},\n    \"component_name\": null\n}\n        33                                                  0:00:58          nan    0.8508\nERROR: {\n    \"additional_properties\": {},\n    \"error\": {\n        \"additional_properties\": {\n            \"debugInfo\": null\n        },\n        \"code\": \"UserError\",\n        \"severity\": null,\n        \"message\": \"Experiment timeout reached, please consider increasing your experiment timeout.\",\n        \"message_format\": \"Experiment timeout reached, please consider increasing your experiment timeout.\",\n        \"message_parameters\": {},\n        \"reference_code\": null,\n        \"details_uri\": null,\n        \"target\": null,\n        \"details\": [],\n        \"inner_error\": {\n            \"additional_properties\": {},\n            \"code\": \"ResourceExhausted\",\n            \"inner_error\": {\n                \"additional_properties\": {},\n                \"code\": \"Timeout\",\n                \"inner_error\": {\n                    \"additional_properties\": {},\n                    \"code\": \"ExperimentTimeoutForIterations\",\n                    \"inner_error\": null\n                }\n            }\n        },\n        \"additional_info\": null\n    },\n    \"correlation\": null,\n    \"environment\": null,\n    \"location\": null,\n    \"time\": {},\n    \"component_name\": null\n}\n        35    StackEnsemble                                 0:01:55       0.8522    0.8522\n        34    VotingEnsemble                                0:01:33       0.8523    0.8523\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "_AutoMLWidget(widget_settings={'childWidgetDisplay': 'popup', 'send_telemetry': False, 'log_level': 'INFO', 's…",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "bcfef06fee0e4deea2fee68ab123bfd8"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "application/aml.mini.widget.v1": "{\"status\": \"Completed\", \"workbench_run_details_uri\": \"https://ml.azure.com/runs/AutoML_14e70e02-a31c-4dc2-88df-f660af838a84?wsid=/subscriptions/48a74bb7-9950-4cc1-9caa-5d50f995cc55/resourcegroups/aml-quickstarts-160731/workspaces/quick-starts-ws-160731&tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"run_properties\": {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"created_utc\": \"2021-10-11T17:02:31.532127Z\", \"properties\": {\"num_iterations\": \"1000\", \"training_type\": \"TrainFull\", \"acquisition_function\": \"EI\", \"primary_metric\": \"AUC_weighted\", \"train_split\": \"0.2\", \"acquisition_parameter\": \"0\", \"num_cross_validation\": \"10\", \"target\": \"cluster-vhcg77\", \"AMLSettingsJsonString\": \"{\\\"path\\\":null,\\\"name\\\":\\\"telco-customer-churn\\\",\\\"subscription_id\\\":\\\"48a74bb7-9950-4cc1-9caa-5d50f995cc55\\\",\\\"resource_group\\\":\\\"aml-quickstarts-160731\\\",\\\"workspace_name\\\":\\\"quick-starts-ws-160731\\\",\\\"region\\\":\\\"southcentralus\\\",\\\"compute_target\\\":\\\"cluster-vhcg77\\\",\\\"spark_service\\\":null,\\\"azure_service\\\":\\\"remote\\\",\\\"many_models\\\":false,\\\"pipeline_fetch_max_batch_size\\\":1,\\\"enable_batch_run\\\":false,\\\"enable_run_restructure\\\":false,\\\"start_auxiliary_runs_before_parent_complete\\\":false,\\\"enable_code_generation\\\":false,\\\"iterations\\\":1000,\\\"primary_metric\\\":\\\"AUC_weighted\\\",\\\"task_type\\\":\\\"classification\\\",\\\"data_script\\\":null,\\\"test_size\\\":0.0,\\\"test_include_predictions_only\\\":false,\\\"validation_size\\\":0.2,\\\"n_cross_validations\\\":10,\\\"y_min\\\":null,\\\"y_max\\\":null,\\\"num_classes\\\":null,\\\"featurization\\\":\\\"auto\\\",\\\"_ignore_package_version_incompatibilities\\\":false,\\\"is_timeseries\\\":false,\\\"max_cores_per_iteration\\\":-1,\\\"max_concurrent_iterations\\\":5,\\\"iteration_timeout_minutes\\\":null,\\\"mem_in_mb\\\":null,\\\"enforce_time_on_windows\\\":false,\\\"experiment_timeout_minutes\\\":30,\\\"experiment_exit_score\\\":null,\\\"whitelist_models\\\":null,\\\"blacklist_algos\\\":[\\\"TensorFlowLinearClassifier\\\",\\\"TensorFlowDNN\\\"],\\\"supported_models\\\":[\\\"XGBoostClassifier\\\",\\\"DecisionTree\\\",\\\"SGD\\\",\\\"LogisticRegression\\\",\\\"ExtremeRandomTrees\\\",\\\"KNN\\\",\\\"SVM\\\",\\\"LinearSVM\\\",\\\"BernoulliNaiveBayes\\\",\\\"LightGBM\\\",\\\"MultinomialNaiveBayes\\\",\\\"AveragedPerceptronClassifier\\\",\\\"TensorFlowDNN\\\",\\\"RandomForest\\\",\\\"GradientBoosting\\\",\\\"TensorFlowLinearClassifier\\\"],\\\"private_models\\\":[],\\\"auto_blacklist\\\":true,\\\"blacklist_samples_reached\\\":false,\\\"exclude_nan_labels\\\":true,\\\"verbosity\\\":20,\\\"_debug_log\\\":\\\"azureml_automl.log\\\",\\\"show_warnings\\\":false,\\\"model_explainability\\\":true,\\\"service_url\\\":null,\\\"sdk_url\\\":null,\\\"sdk_packages\\\":null,\\\"enable_onnx_compatible_models\\\":false,\\\"enable_split_onnx_featurizer_estimator_models\\\":false,\\\"vm_type\\\":\\\"STANDARD_D2_V2\\\",\\\"telemetry_verbosity\\\":20,\\\"send_telemetry\\\":true,\\\"enable_dnn\\\":false,\\\"scenario\\\":\\\"SDK-1.13.0\\\",\\\"environment_label\\\":null,\\\"save_mlflow\\\":false,\\\"force_text_dnn\\\":false,\\\"enable_feature_sweeping\\\":true,\\\"enable_early_stopping\\\":true,\\\"early_stopping_n_iters\\\":10,\\\"metrics\\\":null,\\\"enable_metric_confidence\\\":false,\\\"enable_ensembling\\\":true,\\\"enable_stack_ensembling\\\":true,\\\"ensemble_iterations\\\":15,\\\"enable_tf\\\":false,\\\"enable_subsampling\\\":null,\\\"subsample_seed\\\":null,\\\"enable_nimbusml\\\":false,\\\"enable_streaming\\\":false,\\\"force_streaming\\\":false,\\\"track_child_runs\\\":true,\\\"allowed_private_models\\\":[],\\\"label_column_name\\\":\\\"Churn\\\",\\\"weight_column_name\\\":null,\\\"cv_split_column_names\\\":null,\\\"positive_label\\\":null,\\\"enable_local_managed\\\":false,\\\"_local_managed_run_id\\\":null,\\\"cost_mode\\\":1,\\\"lag_length\\\":0,\\\"metric_operation\\\":\\\"maximize\\\",\\\"preprocess\\\":true}\", \"DataPrepJsonString\": \"{\\\\\\\"training_data\\\\\\\": {\\\\\\\"datasetId\\\\\\\": \\\\\\\"be6a012c-2b16-4557-a23c-8a11b53388cb\\\\\\\"}, \\\\\\\"datasets\\\\\\\": 0}\", \"EnableSubsampling\": null, \"runTemplate\": \"AutoML\", \"azureml.runsource\": \"automl\", \"display_task_type\": \"classification\", \"dependencies_versions\": \"{\\\"azureml-widgets\\\": \\\"1.34.0\\\", \\\"azureml-train\\\": \\\"1.34.0\\\", \\\"azureml-train-restclients-hyperdrive\\\": \\\"1.34.0\\\", \\\"azureml-train-core\\\": \\\"1.34.0\\\", \\\"azureml-train-automl\\\": \\\"1.34.0\\\", \\\"azureml-train-automl-runtime\\\": \\\"1.34.0.post1\\\", \\\"azureml-train-automl-client\\\": \\\"1.34.0\\\", \\\"azureml-tensorboard\\\": \\\"1.34.0\\\", \\\"azureml-telemetry\\\": \\\"1.34.0\\\", \\\"azureml-sdk\\\": \\\"1.34.0\\\", \\\"azureml-samples\\\": \\\"0+unknown\\\", \\\"azureml-responsibleai\\\": \\\"1.34.0\\\", \\\"azureml-pipeline\\\": \\\"1.34.0\\\", \\\"azureml-pipeline-steps\\\": \\\"1.34.0\\\", \\\"azureml-pipeline-core\\\": \\\"1.34.0\\\", \\\"azureml-opendatasets\\\": \\\"1.34.0\\\", \\\"azureml-mlflow\\\": \\\"1.34.0\\\", \\\"azureml-interpret\\\": \\\"1.34.0\\\", \\\"azureml-inference-server-http\\\": \\\"0.3.1\\\", \\\"azureml-explain-model\\\": \\\"1.34.0\\\", \\\"azureml-defaults\\\": \\\"1.34.0\\\", \\\"azureml-dataset-runtime\\\": \\\"1.34.0\\\", \\\"azureml-dataprep\\\": \\\"2.22.2\\\", \\\"azureml-dataprep-rslex\\\": \\\"1.20.2\\\", \\\"azureml-dataprep-native\\\": \\\"38.0.0\\\", \\\"azureml-datadrift\\\": \\\"1.34.0\\\", \\\"azureml-core\\\": \\\"1.34.0\\\", \\\"azureml-contrib-services\\\": \\\"1.34.0\\\", \\\"azureml-contrib-server\\\": \\\"1.34.0\\\", \\\"azureml-contrib-reinforcementlearning\\\": \\\"1.34.0\\\", \\\"azureml-contrib-pipeline-steps\\\": \\\"1.34.0\\\", \\\"azureml-contrib-notebook\\\": \\\"1.34.0\\\", \\\"azureml-contrib-fairness\\\": \\\"1.34.0\\\", \\\"azureml-contrib-dataset\\\": \\\"1.34.0\\\", \\\"azureml-contrib-automl-pipeline-steps\\\": \\\"1.34.0\\\", \\\"azureml-cli-common\\\": \\\"1.34.0\\\", \\\"azureml-automl-runtime\\\": \\\"1.34.0.post1\\\", \\\"azureml-automl-dnn-nlp\\\": \\\"1.34.0\\\", \\\"azureml-automl-core\\\": \\\"1.34.0.post1\\\", \\\"azureml-accel-models\\\": \\\"1.34.0\\\"}\", \"_aml_system_scenario_identification\": \"Remote.Parent\", \"ClientType\": \"SDK\", \"environment_cpu_name\": \"AzureML-AutoML\", \"environment_cpu_label\": \"prod\", \"environment_gpu_name\": \"AzureML-AutoML-GPU\", \"environment_gpu_label\": \"prod\", \"root_attribution\": \"automl\", \"attribution\": \"AutoML\", \"Orchestrator\": \"AutoML\", \"CancelUri\": \"https://southcentralus.api.azureml.ms/jasmine/v1.0/subscriptions/48a74bb7-9950-4cc1-9caa-5d50f995cc55/resourceGroups/aml-quickstarts-160731/providers/Microsoft.MachineLearningServices/workspaces/quick-starts-ws-160731/experimentids/db0c37f7-d0cb-4b46-be55-ae6a7fa5c163/cancel/AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"ClientSdkVersion\": \"1.34.1\", \"snapshotId\": \"00000000-0000-0000-0000-000000000000\", \"SetupRunId\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_setup\", \"SetupRunContainerId\": \"dcid.AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_setup\", \"FeaturizationRunJsonPath\": \"featurizer_container.json\", \"FeaturizationRunId\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_featurize\", \"ProblemInfoJsonString\": \"{\\\"dataset_num_categorical\\\": 0, \\\"is_sparse\\\": true, \\\"subsampling\\\": false, \\\"has_extra_col\\\": true, \\\"dataset_classes\\\": 2, \\\"dataset_features\\\": 40, \\\"dataset_samples\\\": 7043, \\\"single_frequency_class_detected\\\": false}\", \"ModelExplainRunId\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_ModelExplain\", \"azureml.git.repository_uri\": \"https://github.com/vhcg77/nd00333-capstone.git\", \"mlflow.source.git.repoURL\": \"https://github.com/vhcg77/nd00333-capstone.git\", \"azureml.git.branch\": \"master\", \"mlflow.source.git.branch\": \"master\", \"azureml.git.commit\": \"18a8010dfa58a418991343e7694c6366dc605848\", \"mlflow.source.git.commit\": \"18a8010dfa58a418991343e7694c6366dc605848\", \"azureml.git.dirty\": \"True\"}, \"tags\": {\"model_explain_run\": \"best_run\", \"_aml_system_azureml.automlComponent\": \"AutoML\", \"pipeline_id\": \"\", \"score\": \"\", \"predicted_cost\": \"\", \"fit_time\": \"\", \"training_percent\": \"\", \"iteration\": \"\", \"run_preprocessor\": \"\", \"run_algorithm\": \"\", \"dynamic_whitelisting_iterations\": \"<25>;<30>;\", \"automl_best_child_run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_34\", \"model_explain_best_run_child_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_34\"}, \"end_time_utc\": \"2021-10-11T17:50:37.708891Z\", \"status\": \"Completed\", \"log_files\": {}, \"log_groups\": [], \"run_duration\": \"0:48:06\", \"run_number\": \"1\", \"run_queued_details\": {\"status\": \"Completed\", \"details\": null}}, \"child_runs\": [{\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_0\", \"run_number\": 5, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:16:03.124528Z\", \"end_time\": \"2021-10-11T17:16:44.659238Z\", \"created_time\": \"2021-10-11T17:15:51.657757Z\", \"created_time_dt\": \"2021-10-11T17:15:51.657757Z\", \"duration\": \"0:00:53\", \"iteration\": \"0\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, LightGBM\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.83662771, \"best_metric\": 0.83662771}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_4\", \"run_number\": 6, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:20:17.25411Z\", \"end_time\": \"2021-10-11T17:20:57.250605Z\", \"created_time\": \"2021-10-11T17:15:51.686463Z\", \"created_time_dt\": \"2021-10-11T17:15:51.686463Z\", \"duration\": \"0:05:05\", \"iteration\": \"4\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, LightGBM\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=True\\n\", \"primary_metric\": 0.8484737, \"best_metric\": 0.84899802}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_2\", \"run_number\": 7, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:17:56.129477Z\", \"end_time\": \"2021-10-11T17:18:40.568247Z\", \"created_time\": \"2021-10-11T17:15:51.715682Z\", \"created_time_dt\": \"2021-10-11T17:15:51.715682Z\", \"duration\": \"0:02:48\", \"iteration\": \"2\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, ExtremeRandomTrees\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.83441717, \"best_metric\": 0.84899802}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_1\", \"run_number\": 8, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:16:58.390535Z\", \"end_time\": \"2021-10-11T17:17:40.793323Z\", \"created_time\": \"2021-10-11T17:15:51.723967Z\", \"created_time_dt\": \"2021-10-11T17:15:51.723967Z\", \"duration\": \"0:01:49\", \"iteration\": \"1\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, XGBoostClassifier\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.84899802, \"best_metric\": 0.84899802}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_3\", \"run_number\": 9, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:18:56.154246Z\", \"end_time\": \"2021-10-11T17:19:49.053534Z\", \"created_time\": \"2021-10-11T17:15:51.742787Z\", \"created_time_dt\": \"2021-10-11T17:15:51.742787Z\", \"duration\": \"0:03:57\", \"iteration\": \"3\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, RandomForest\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.84337923, \"best_metric\": 0.84899802}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_5\", \"run_number\": 10, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:21:12.040745Z\", \"end_time\": \"2021-10-11T17:21:51.517208Z\", \"created_time\": \"2021-10-11T17:16:46.136749Z\", \"created_time_dt\": \"2021-10-11T17:16:46.136749Z\", \"duration\": \"0:05:05\", \"iteration\": \"5\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"SparseNormalizer, XGBoostClassifier\", \"run_properties\": \"copy=True, norm='max'\", \"primary_metric\": 0.84404016, \"best_metric\": 0.84899802}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_6\", \"run_number\": 11, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:22:06.440743Z\", \"end_time\": \"2021-10-11T17:23:02.48318Z\", \"created_time\": \"2021-10-11T17:17:42.693119Z\", \"created_time_dt\": \"2021-10-11T17:17:42.693119Z\", \"duration\": \"0:05:19\", \"iteration\": \"6\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"SparseNormalizer, RandomForest\", \"run_properties\": \"copy=True, norm='l2'\", \"primary_metric\": 0.84928938, \"best_metric\": 0.84928938}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_7\", \"run_number\": 12, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:23:31.055871Z\", \"end_time\": \"2021-10-11T17:24:12.684845Z\", \"created_time\": \"2021-10-11T17:18:44.059848Z\", \"created_time_dt\": \"2021-10-11T17:18:44.059848Z\", \"duration\": \"0:05:28\", \"iteration\": \"7\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, XGBoostClassifier\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.83245202, \"best_metric\": 0.84928938}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_8\", \"run_number\": 13, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:24:28.492238Z\", \"end_time\": \"2021-10-11T17:25:09.861943Z\", \"created_time\": \"2021-10-11T17:19:52.052221Z\", \"created_time_dt\": \"2021-10-11T17:19:52.052221Z\", \"duration\": \"0:05:17\", \"iteration\": \"8\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"SparseNormalizer, XGBoostClassifier\", \"run_properties\": \"copy=True, norm='max'\", \"primary_metric\": 0.83588465, \"best_metric\": 0.84928938}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_9\", \"run_number\": 14, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:25:24.072126Z\", \"end_time\": \"2021-10-11T17:26:06.682872Z\", \"created_time\": \"2021-10-11T17:21:00.653735Z\", \"created_time_dt\": \"2021-10-11T17:21:00.653735Z\", \"duration\": \"0:05:06\", \"iteration\": \"9\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, RandomForest\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.83422183, \"best_metric\": 0.84928938}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_10\", \"run_number\": 15, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:26:20.917673Z\", \"end_time\": \"2021-10-11T17:27:00.284801Z\", \"created_time\": \"2021-10-11T17:21:54.796132Z\", \"created_time_dt\": \"2021-10-11T17:21:54.796132Z\", \"duration\": \"0:05:05\", \"iteration\": \"10\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"SparseNormalizer, LightGBM\", \"run_properties\": \"copy=True, norm='l1'\", \"primary_metric\": 0.84754149, \"best_metric\": 0.84928938}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_11\", \"run_number\": 16, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:27:16.215186Z\", \"end_time\": \"2021-10-11T17:28:18.266333Z\", \"created_time\": \"2021-10-11T17:23:05.533221Z\", \"created_time_dt\": \"2021-10-11T17:23:05.533221Z\", \"duration\": \"0:05:12\", \"iteration\": \"11\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, ExtremeRandomTrees\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.83988598, \"best_metric\": 0.84928938}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_12\", \"run_number\": 17, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:28:34.738645Z\", \"end_time\": \"2021-10-11T17:29:16.144453Z\", \"created_time\": \"2021-10-11T17:24:15.946217Z\", \"created_time_dt\": \"2021-10-11T17:24:15.946217Z\", \"duration\": \"0:05:00\", \"iteration\": \"12\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, XGBoostClassifier\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.84675059, \"best_metric\": 0.84928938}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_13\", \"run_number\": 18, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:29:32.289199Z\", \"end_time\": \"2021-10-11T17:30:15.042028Z\", \"created_time\": \"2021-10-11T17:25:13.21826Z\", \"created_time_dt\": \"2021-10-11T17:25:13.21826Z\", \"duration\": \"0:05:01\", \"iteration\": \"13\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, ExtremeRandomTrees\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.83222359, \"best_metric\": 0.84928938}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_14\", \"run_number\": 19, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:30:29.906624Z\", \"end_time\": \"2021-10-11T17:31:37.055926Z\", \"created_time\": \"2021-10-11T17:26:10.197044Z\", \"created_time_dt\": \"2021-10-11T17:26:10.197044Z\", \"duration\": \"0:05:26\", \"iteration\": \"14\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, RandomForest\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.82113718, \"best_metric\": 0.84928938}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_15\", \"run_number\": 20, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:31:54.858543Z\", \"end_time\": \"2021-10-11T17:32:37.159102Z\", \"created_time\": \"2021-10-11T17:27:03.851276Z\", \"created_time_dt\": \"2021-10-11T17:27:03.851276Z\", \"duration\": \"0:05:33\", \"iteration\": \"15\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, LightGBM\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.84687529, \"best_metric\": 0.84928938}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_16\", \"run_number\": 21, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:32:52.412686Z\", \"end_time\": \"2021-10-11T17:33:34.841747Z\", \"created_time\": \"2021-10-11T17:28:21.462904Z\", \"created_time_dt\": \"2021-10-11T17:28:21.462904Z\", \"duration\": \"0:05:13\", \"iteration\": \"16\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, LogisticRegression\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.84598471, \"best_metric\": 0.84928938}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_17\", \"run_number\": 22, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:33:50.910874Z\", \"end_time\": \"2021-10-11T17:34:55.777902Z\", \"created_time\": \"2021-10-11T17:29:19.10392Z\", \"created_time_dt\": \"2021-10-11T17:29:19.10392Z\", \"duration\": \"0:05:36\", \"iteration\": \"17\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, ExtremeRandomTrees\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=True\\n\", \"primary_metric\": 0.84064867, \"best_metric\": 0.84928938}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_18\", \"run_number\": 23, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:35:13.92755Z\", \"end_time\": \"2021-10-11T17:35:54.596398Z\", \"created_time\": \"2021-10-11T17:30:18.31845Z\", \"created_time_dt\": \"2021-10-11T17:30:18.31845Z\", \"duration\": \"0:05:36\", \"iteration\": \"18\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, XGBoostClassifier\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.84227298, \"best_metric\": 0.84928938}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_19\", \"run_number\": 24, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:36:11.590489Z\", \"end_time\": \"2021-10-11T17:36:56.2438Z\", \"created_time\": \"2021-10-11T17:31:39.956722Z\", \"created_time_dt\": \"2021-10-11T17:31:39.956722Z\", \"duration\": \"0:05:16\", \"iteration\": \"19\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, ExtremeRandomTrees\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.83402733, \"best_metric\": 0.84928938}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_20\", \"run_number\": 25, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:37:11.930915Z\", \"end_time\": \"2021-10-11T17:38:23.511125Z\", \"created_time\": \"2021-10-11T17:32:40.410095Z\", \"created_time_dt\": \"2021-10-11T17:32:40.410095Z\", \"duration\": \"0:05:43\", \"iteration\": \"20\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, LogisticRegression\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.84620447, \"best_metric\": 0.84928938}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_21\", \"run_number\": 26, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:38:13.613517Z\", \"end_time\": \"2021-10-11T17:38:53.70089Z\", \"created_time\": \"2021-10-11T17:33:38.177837Z\", \"created_time_dt\": \"2021-10-11T17:33:38.177837Z\", \"duration\": \"0:05:15\", \"iteration\": \"21\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, XGBoostClassifier\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.84179778, \"best_metric\": 0.84928938}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_22\", \"run_number\": 27, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:39:08.545493Z\", \"end_time\": \"2021-10-11T17:39:53.889483Z\", \"created_time\": \"2021-10-11T17:34:59.685794Z\", \"created_time_dt\": \"2021-10-11T17:34:59.685794Z\", \"duration\": \"0:04:54\", \"iteration\": \"22\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, XGBoostClassifier\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.84479013, \"best_metric\": 0.84928938}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_23\", \"run_number\": 28, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:40:07.977622Z\", \"end_time\": \"2021-10-11T17:40:50.605302Z\", \"created_time\": \"2021-10-11T17:35:57.668213Z\", \"created_time_dt\": \"2021-10-11T17:35:57.668213Z\", \"duration\": \"0:04:52\", \"iteration\": \"23\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, RandomForest\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.83813524, \"best_metric\": 0.84928938}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_24\", \"run_number\": 29, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:41:05.661166Z\", \"end_time\": \"2021-10-11T17:41:46.729481Z\", \"created_time\": \"2021-10-11T17:36:59.189957Z\", \"created_time_dt\": \"2021-10-11T17:36:59.189957Z\", \"duration\": \"0:04:47\", \"iteration\": \"24\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"SparseNormalizer, XGBoostClassifier\", \"run_properties\": \"copy=True, norm='max'\", \"primary_metric\": 0.84606019, \"best_metric\": 0.84928938}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_25\", \"run_number\": 30, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:42:01.209045Z\", \"end_time\": \"2021-10-11T17:42:42.632683Z\", \"created_time\": \"2021-10-11T17:38:27.719537Z\", \"created_time_dt\": \"2021-10-11T17:38:27.719537Z\", \"duration\": \"0:04:14\", \"iteration\": \"25\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"TruncatedSVDWrapper, RandomForest\", \"run_properties\": \"n_components=0.3068421052631579, random_state=None\", \"primary_metric\": 0.55878446, \"best_metric\": 0.84928938}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_26\", \"run_number\": 31, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:42:58.087758Z\", \"end_time\": \"2021-10-11T17:43:42.306242Z\", \"created_time\": \"2021-10-11T17:38:55.653771Z\", \"created_time_dt\": \"2021-10-11T17:38:55.653771Z\", \"duration\": \"0:04:46\", \"iteration\": \"26\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, LightGBM\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.85081567, \"best_metric\": 0.85081567}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_27\", \"run_number\": 32, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:43:56.582722Z\", \"end_time\": \"2021-10-11T17:44:38.403759Z\", \"created_time\": \"2021-10-11T17:39:55.94212Z\", \"created_time_dt\": \"2021-10-11T17:39:55.94212Z\", \"duration\": \"0:04:42\", \"iteration\": \"27\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, LightGBM\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.8483511, \"best_metric\": 0.85081567}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_28\", \"run_number\": 33, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:44:53.246741Z\", \"end_time\": \"2021-10-11T17:45:35.704019Z\", \"created_time\": \"2021-10-11T17:40:52.550124Z\", \"created_time_dt\": \"2021-10-11T17:40:52.550124Z\", \"duration\": \"0:04:43\", \"iteration\": \"28\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, LightGBM\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=True\\n\", \"primary_metric\": 0.84845569, \"best_metric\": 0.85081567}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_29\", \"run_number\": 34, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:45:50.744494Z\", \"end_time\": \"2021-10-11T17:46:34.984564Z\", \"created_time\": \"2021-10-11T17:41:48.825853Z\", \"created_time_dt\": \"2021-10-11T17:41:48.825853Z\", \"duration\": \"0:04:46\", \"iteration\": \"29\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, LightGBM\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.8508297, \"best_metric\": 0.8508297}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_30\", \"run_number\": 35, \"metric\": null, \"status\": \"Canceled\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:42:45.678408Z\", \"end_time\": \"2021-10-11T17:46:36.369831Z\", \"created_time\": \"2021-10-11T17:42:45.678408Z\", \"created_time_dt\": \"2021-10-11T17:42:45.678408Z\", \"duration\": \"0:03:50\", \"iteration\": \"30\", \"goal\": null, \"run_name\": \"Canceled\", \"run_properties\": null}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_31\", \"run_number\": 36, \"metric\": null, \"status\": \"Canceled\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:43:45.002551Z\", \"end_time\": \"2021-10-11T17:46:36.392196Z\", \"created_time\": \"2021-10-11T17:43:45.002551Z\", \"created_time_dt\": \"2021-10-11T17:43:45.002551Z\", \"duration\": \"0:02:51\", \"iteration\": \"31\", \"goal\": null, \"run_name\": \"Canceled\", \"run_properties\": null}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_32\", \"run_number\": 37, \"metric\": null, \"status\": \"Canceled\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:44:41.902923Z\", \"end_time\": \"2021-10-11T17:46:36.325998Z\", \"created_time\": \"2021-10-11T17:44:41.902923Z\", \"created_time_dt\": \"2021-10-11T17:44:41.902923Z\", \"duration\": \"0:01:54\", \"iteration\": \"32\", \"goal\": null, \"run_name\": \"Canceled\", \"run_properties\": null}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_33\", \"run_number\": 38, \"metric\": null, \"status\": \"Canceled\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:45:37.878807Z\", \"end_time\": \"2021-10-11T17:46:36.318006Z\", \"created_time\": \"2021-10-11T17:45:37.878807Z\", \"created_time_dt\": \"2021-10-11T17:45:37.878807Z\", \"duration\": \"0:00:58\", \"iteration\": \"33\", \"goal\": null, \"run_name\": \"Canceled\", \"run_properties\": null}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_34\", \"run_number\": 39, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:49:02.779442Z\", \"end_time\": \"2021-10-11T17:50:35.790604Z\", \"created_time\": \"2021-10-11T17:46:37.643854Z\", \"created_time_dt\": \"2021-10-11T17:46:37.643854Z\", \"duration\": \"0:03:58\", \"iteration\": \"34\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"VotingEnsemble\", \"run_properties\": \"\\n    estimators=[('29', Pipeline(\\n        memory=None,\\n        steps=[('standardscalerwrapper', StandardScalerWrapper(\\n            copy=True,\\n            with_mean=False,\\n            with_std=False\\n        \", \"primary_metric\": 0.85231432, \"best_metric\": 0.85231432}, {\"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_35\", \"run_number\": 40, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-10-11T17:46:51.407842Z\", \"end_time\": \"2021-10-11T17:48:46.807987Z\", \"created_time\": \"2021-10-11T17:46:37.667569Z\", \"created_time_dt\": \"2021-10-11T17:46:37.667569Z\", \"duration\": \"0:02:09\", \"iteration\": \"35\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StackEnsemble\", \"run_properties\": \"\\n    base_learners=[('29', Pipeline(\\n        memory=None,\\n        steps=[('standardscalerwrapper', StandardScalerWrapper(\\n            copy=True,\\n            with_mean=False,\\n            with_std=False\\n        \", \"primary_metric\": 0.85216058, \"best_metric\": 0.85231432}], \"children_metrics\": {\"categories\": [0], \"series\": {\"average_precision_score_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"markers\", \"name\": \"average_precision_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8567473890718986, 0.8656138856264407, 0.853157600325137, 0.8592675994573435, 0.8642481919131624, 0.8609218637066804, 0.8654432935761855, 0.8529978724825353, 0.8547587755317277, 0.8513179311203176, 0.86516333552545, 0.8566585870894524, 0.8640783699938928, 0.8498051110786662, 0.8407922764766005, 0.8639293411377214, 0.8611105899648439, 0.8568717161482254, 0.8592469912354964, 0.8516367774270355, 0.8615283718592981, 0.8589347588033732, 0.863027533969318, 0.8542554809531142, 0.8619541475952724, 0.6372936081381156, 0.8671591068100586, 0.8651290861797329, 0.8651995314397046, 0.8673546770620627, 0.8685535930412165, 0.8684247215129638]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"lines\", \"name\": \"average_precision_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8567473890718986, 0.8656138856264407, 0.8656138856264407, 0.8656138856264407, 0.8656138856264407, 0.8656138856264407, 0.8656138856264407, 0.8656138856264407, 0.8656138856264407, 0.8656138856264407, 0.8656138856264407, 0.8656138856264407, 0.8656138856264407, 0.8656138856264407, 0.8656138856264407, 0.8656138856264407, 0.8656138856264407, 0.8656138856264407, 0.8656138856264407, 0.8656138856264407, 0.8656138856264407, 0.8656138856264407, 0.8656138856264407, 0.8656138856264407, 0.8656138856264407, 0.8656138856264407, 0.8671591068100586, 0.8671591068100586, 0.8671591068100586, 0.8673546770620627, 0.8685535930412165, 0.8685535930412165]}], \"recall_score_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"markers\", \"name\": \"recall_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.794180269694819, 0.8056068133427964, 0.7891412349183817, 0.7925479063165366, 0.7977998580553585, 0.8004968062455642, 0.7628105039034776, 0.7938963804116395, 0.7965223562810505, 0.7281760113555713, 0.803264726756565, 0.7388928317955997, 0.8023420865862313, 0.7828246983676367, 0.7846699787083037, 0.796877217885025, 0.747054648687012, 0.7441447835344215, 0.7968062455642301, 0.7838183108587651, 0.8059616749467707, 0.7989354151880766, 0.8002129169623846, 0.7377572746628815, 0.8003548616039744, 0.7310858765081618, 0.8041163946061036, 0.7996451383960255, 0.799290276792051, 0.8040454222853087, 0.8066713981547196, 0.7830376153300213]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"lines\", \"name\": \"recall_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.794180269694819, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8066713981547196, 0.8066713981547196]}], \"precision_score_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"markers\", \"name\": \"precision_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.784121537538488, 0.7962675275129356, 0.7752715012697312, 0.7797819721002279, 0.7860618392705156, 0.7896140824941685, 0.8083407462020805, 0.7826958474857774, 0.7859499657673197, 0.8005157380841192, 0.7924072560187726, 0.7986855421791645, 0.7925687316891951, 0.7701664636294332, 0.7725730066567907, 0.7854623565922523, 0.8052357151383861, 0.8027089274440675, 0.7862981315484039, 0.771115998485029, 0.798104425029848, 0.7888499801773798, 0.7901862330860892, 0.7987727569126022, 0.7896602711149011, 0.5345793869986164, 0.7940220275783965, 0.7889587240355173, 0.7893354212010251, 0.7945971806101527, 0.7970478889184003, 0.7442898151414131]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"lines\", \"name\": \"precision_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.784121537538488, 0.7962675275129356, 0.7962675275129356, 0.7962675275129356, 0.7962675275129356, 0.7962675275129356, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805, 0.8083407462020805]}], \"AUC_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"markers\", \"name\": \"AUC_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.836627707188527, 0.8489980173217487, 0.8344171723134395, 0.8433792309583016, 0.8484736950946571, 0.8440401603220794, 0.8492893806460661, 0.832452020941035, 0.8358846505981743, 0.8342218326373183, 0.8475414932276939, 0.8398859750758744, 0.8467505879354658, 0.8322235937425763, 0.8211371805628509, 0.8468752897762432, 0.8459847082347549, 0.8406486656273315, 0.8422729841934988, 0.8340273325909345, 0.8462044696384078, 0.8417977772496507, 0.8447901324157427, 0.8381352442567334, 0.8460601937055658, 0.5587844614486543, 0.8508156747652904, 0.84835110416895, 0.8484556898847548, 0.8508296977910594, 0.8523143193054924, 0.8521605757360191]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"lines\", \"name\": \"AUC_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.836627707188527, 0.8489980173217487, 0.8489980173217487, 0.8489980173217487, 0.8489980173217487, 0.8489980173217487, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8508156747652904, 0.8508156747652904, 0.8508156747652904, 0.8508296977910594, 0.8523143193054924, 0.8523143193054924]}], \"log_loss\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"markers\", \"name\": \"log_loss\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.43302280209455046, 0.41381273679565833, 0.43240097181175086, 0.4253303318612135, 0.42377954839285314, 0.47513504612160223, 0.4784306263340195, 0.4809483328814418, 0.4783005871978814, 0.5294297237277805, 0.4226161458459431, 0.5031633961599592, 0.42137452213490734, 0.44530458473885676, 0.5251585859797416, 0.43737987557168384, 0.4920870630020756, 0.5116879858724406, 0.4784807648552377, 0.44466502489817084, 0.418880886716261, 0.4775737359160111, 0.4190453554605057, 0.5092142505753231, 0.4763622499220645, 0.5793921486979687, 0.41429457287932286, 0.41605763608959656, 0.41410309609824364, 0.4125839666101925, 0.42648424909028393, 0.4574903297903332]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"lines\", \"name\": \"log_loss_min\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.43302280209455046, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.41381273679565833, 0.4125839666101925, 0.4125839666101925, 0.4125839666101925]}], \"f1_score_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"markers\", \"name\": \"f1_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.7861390230971359, 0.7973583666322995, 0.7727188211960233, 0.7761029525646418, 0.7822536940501615, 0.7895478984174498, 0.7740363142287661, 0.7839719111769679, 0.7872409715371088, 0.7429728275867082, 0.7905768000181702, 0.7524205630647528, 0.7934224220539593, 0.754083044414385, 0.7747102561039392, 0.7778961496524051, 0.7601075075963879, 0.7573694371392722, 0.7873239420735139, 0.7560170415445102, 0.7999084414368997, 0.7899142905215182, 0.7914990051433693, 0.7514876443396366, 0.789403166237346, 0.6175518075673874, 0.7944346293928364, 0.7894303796673265, 0.7907651498394233, 0.7955919182533852, 0.7972189693042894, 0.7409397116468364]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"lines\", \"name\": \"f1_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.7861390230971359, 0.7973583666322995, 0.7973583666322995, 0.7973583666322995, 0.7973583666322995, 0.7973583666322995, 0.7973583666322995, 0.7973583666322995, 0.7973583666322995, 0.7973583666322995, 0.7973583666322995, 0.7973583666322995, 0.7973583666322995, 0.7973583666322995, 0.7973583666322995, 0.7973583666322995, 0.7973583666322995, 0.7973583666322995, 0.7973583666322995, 0.7973583666322995, 0.7999084414368997, 0.7999084414368997, 0.7999084414368997, 0.7999084414368997, 0.7999084414368997, 0.7999084414368997, 0.7999084414368997, 0.7999084414368997, 0.7999084414368997, 0.7999084414368997, 0.7999084414368997, 0.7999084414368997]}], \"norm_macro_recall\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"markers\", \"name\": \"norm_macro_recall\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.41189206889050745, 0.4357325725312965, 0.35113395853652146, 0.358483334361992, 0.3738852464079074, 0.40693305906687083, 0.5421210372762184, 0.398658666547821, 0.4087497389533773, 0.5126153267469271, 0.401808954871556, 0.5128674465350587, 0.42413794236635755, 0.283918918161273, 0.37781729543770365, 0.3546540920666306, 0.5309084790822135, 0.5241434675985579, 0.40843376816777405, 0.289005524488274, 0.4529318953330234, 0.41658035652898545, 0.420820137722078, 0.5128555428376155, 0.40660033602288037, 0.0, 0.42291515435566607, 0.4099325520538789, 0.42016255783067447, 0.43108086189782374, 0.4302242605997115, 0.27805284967347516]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"lines\", \"name\": \"norm_macro_recall_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.41189206889050745, 0.4357325725312965, 0.4357325725312965, 0.4357325725312965, 0.4357325725312965, 0.4357325725312965, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184, 0.5421210372762184]}], \"average_precision_score_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"markers\", \"name\": \"average_precision_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8840767919851847, 0.8918940711758905, 0.8810511221985383, 0.8866383956239534, 0.8894593842104186, 0.8883124607667587, 0.8504755011080718, 0.8807266269402584, 0.8831574620670943, 0.8240747877307852, 0.8899177326265569, 0.8337550290257021, 0.8904867171263084, 0.8769059839656193, 0.8695151947327133, 0.887079898018295, 0.8426451947114433, 0.8359078425038315, 0.88687525960569, 0.877924315556102, 0.8894948095056743, 0.8867435184878548, 0.8894750533347529, 0.8303310781748809, 0.8892309457825764, 0.7016543577001778, 0.8929438335524648, 0.8914395757388597, 0.8915492384429469, 0.8930580235047435, 0.893687334721978, 0.8864428820826002]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"lines\", \"name\": \"average_precision_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8840767919851847, 0.8918940711758905, 0.8918940711758905, 0.8918940711758905, 0.8918940711758905, 0.8918940711758905, 0.8918940711758905, 0.8918940711758905, 0.8918940711758905, 0.8918940711758905, 0.8918940711758905, 0.8918940711758905, 0.8918940711758905, 0.8918940711758905, 0.8918940711758905, 0.8918940711758905, 0.8918940711758905, 0.8918940711758905, 0.8918940711758905, 0.8918940711758905, 0.8918940711758905, 0.8918940711758905, 0.8918940711758905, 0.8918940711758905, 0.8918940711758905, 0.8918940711758905, 0.8929438335524648, 0.8929438335524648, 0.8929438335524648, 0.8930580235047435, 0.893687334721978, 0.893687334721978]}], \"f1_score_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"markers\", \"name\": \"f1_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.7188430201608905, 0.7328670716575402, 0.6933595672016131, 0.6978119747625003, 0.706512066264368, 0.7203002016486089, 0.7320111814008696, 0.7141475905677773, 0.7189775464484881, 0.7033527417136207, 0.7198505175527187, 0.7106693959570061, 0.7272347294199332, 0.6592296472330837, 0.702343742695217, 0.6980159818464374, 0.7193050853808937, 0.7161573361964948, 0.7189459574749388, 0.6624370784104693, 0.7384317347703337, 0.7227863065186878, 0.7250235333420451, 0.7099372940211313, 0.7200794073638841, 0.4223099727244681, 0.7277648586823844, 0.7209571857941904, 0.7243100664870821, 0.7304812459930895, 0.7315996066336993, 0.632647761117846]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"lines\", \"name\": \"f1_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.7188430201608905, 0.7328670716575402, 0.7328670716575402, 0.7328670716575402, 0.7328670716575402, 0.7328670716575402, 0.7328670716575402, 0.7328670716575402, 0.7328670716575402, 0.7328670716575402, 0.7328670716575402, 0.7328670716575402, 0.7328670716575402, 0.7328670716575402, 0.7328670716575402, 0.7328670716575402, 0.7328670716575402, 0.7328670716575402, 0.7328670716575402, 0.7328670716575402, 0.7384317347703337, 0.7384317347703337, 0.7384317347703337, 0.7384317347703337, 0.7384317347703337, 0.7384317347703337, 0.7384317347703337, 0.7384317347703337, 0.7384317347703337, 0.7384317347703337, 0.7384317347703337, 0.7384317347703337]}], \"weighted_accuracy\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"markers\", \"name\": \"weighted_accuracy\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8512301643544943, 0.862324713222986, 0.8624611020714671, 0.8657824895347946, 0.8694923572190252, 0.8632903546140778, 0.7574521979928592, 0.8550493165800879, 0.8561410215254233, 0.7099470612950157, 0.8694367487358796, 0.7275335388906304, 0.86073389664357, 0.8739926456253349, 0.8466433431795751, 0.8742145278582752, 0.73512110916401, 0.7325588441457265, 0.8567325819078914, 0.8739633644573216, 0.8573820180743932, 0.8576405333970427, 0.8583105714652248, 0.7256874241951711, 0.8631441790827445, 0.8805585136196173, 0.8640533695781848, 0.8609361386972255, 0.8570208844085115, 0.8613123575221142, 0.8659197706002167, 0.8758037853130201]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"lines\", \"name\": \"weighted_accuracy_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8512301643544943, 0.862324713222986, 0.8624611020714671, 0.8657824895347946, 0.8694923572190252, 0.8694923572190252, 0.8694923572190252, 0.8694923572190252, 0.8694923572190252, 0.8694923572190252, 0.8694923572190252, 0.8694923572190252, 0.8694923572190252, 0.8739926456253349, 0.8739926456253349, 0.8742145278582752, 0.8742145278582752, 0.8742145278582752, 0.8742145278582752, 0.8742145278582752, 0.8742145278582752, 0.8742145278582752, 0.8742145278582752, 0.8742145278582752, 0.8742145278582752, 0.8805585136196173, 0.8805585136196173, 0.8805585136196173, 0.8805585136196173, 0.8805585136196173, 0.8805585136196173, 0.8805585136196173]}], \"recall_score_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"markers\", \"name\": \"recall_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.794180269694819, 0.8056068133427964, 0.7891412349183817, 0.7925479063165366, 0.7977998580553585, 0.8004968062455642, 0.7628105039034776, 0.7938963804116395, 0.7965223562810505, 0.7281760113555713, 0.803264726756565, 0.7388928317955997, 0.8023420865862313, 0.7828246983676367, 0.7846699787083037, 0.796877217885025, 0.747054648687012, 0.7441447835344215, 0.7968062455642301, 0.7838183108587651, 0.8059616749467707, 0.7989354151880766, 0.8002129169623846, 0.7377572746628815, 0.8003548616039744, 0.7310858765081618, 0.8041163946061036, 0.7996451383960255, 0.799290276792051, 0.8040454222853087, 0.8066713981547196, 0.7830376153300213]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"lines\", \"name\": \"recall_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.794180269694819, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8066713981547196, 0.8066713981547196]}], \"balanced_accuracy\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"markers\", \"name\": \"balanced_accuracy\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.7059460344452537, 0.7178662862656482, 0.6755669792682608, 0.679241667180996, 0.6869426232039536, 0.7034665295334356, 0.7710605186381092, 0.6993293332739106, 0.7043748694766887, 0.7563076633734636, 0.700904477435778, 0.7564337232675293, 0.7120689711831787, 0.6419594590806366, 0.6889086477188519, 0.6773270460333153, 0.7654542395411068, 0.762071733799279, 0.704216884083887, 0.644502762244137, 0.7264659476665117, 0.7082901782644927, 0.7104100688610389, 0.7564277714188077, 0.7033001680114401, 0.5, 0.7114575771778331, 0.7049662760269394, 0.7100812789153372, 0.7155404309489118, 0.7151121302998558, 0.6390264248367374]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"lines\", \"name\": \"balanced_accuracy_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.7059460344452537, 0.7178662862656482, 0.7178662862656482, 0.7178662862656482, 0.7178662862656482, 0.7178662862656482, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092]}], \"accuracy\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"markers\", \"name\": \"accuracy\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.794180269694819, 0.8056068133427964, 0.7891412349183817, 0.7925479063165366, 0.7977998580553585, 0.8004968062455642, 0.7628105039034776, 0.7938963804116395, 0.7965223562810505, 0.7281760113555713, 0.803264726756565, 0.7388928317955997, 0.8023420865862313, 0.7828246983676367, 0.7846699787083037, 0.796877217885025, 0.747054648687012, 0.7441447835344215, 0.7968062455642301, 0.7838183108587651, 0.8059616749467707, 0.7989354151880766, 0.8002129169623846, 0.7377572746628815, 0.8003548616039744, 0.7310858765081618, 0.8041163946061036, 0.7996451383960255, 0.799290276792051, 0.8040454222853087, 0.8066713981547196, 0.7830376153300213]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"lines\", \"name\": \"accuracy_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.794180269694819, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8066713981547196, 0.8066713981547196]}], \"AUC_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"markers\", \"name\": \"AUC_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.836627707188527, 0.848998017321749, 0.8344171723134395, 0.8433792309583016, 0.8484736950946573, 0.8440401603220794, 0.8492893806460661, 0.832452020941035, 0.8358846505981743, 0.8342218326373183, 0.8475414932276939, 0.8398859750758746, 0.8467505879354658, 0.8322235937425763, 0.8211371805628509, 0.8468752897762432, 0.8459847082347549, 0.8406486656273315, 0.8422729841934988, 0.8340273325909344, 0.846204469638408, 0.8417977772496507, 0.8447901324157427, 0.8381352442567334, 0.8460601937055656, 0.5587844614486543, 0.8508156747652904, 0.84835110416895, 0.8484556898847548, 0.8508296977910594, 0.8523143193054924, 0.8521605757360191]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"lines\", \"name\": \"AUC_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.836627707188527, 0.848998017321749, 0.848998017321749, 0.848998017321749, 0.848998017321749, 0.848998017321749, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8492893806460661, 0.8508156747652904, 0.8508156747652904, 0.8508156747652904, 0.8508296977910594, 0.8523143193054924, 0.8523143193054924]}], \"AUC_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"markers\", \"name\": \"AUC_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8829662400436009, 0.8908923724147865, 0.8798975560638519, 0.8853036421544356, 0.8880088007692614, 0.8874527082060423, 0.847441949023841, 0.8810727549399807, 0.8825938998056195, 0.8183150395334463, 0.8890167689107991, 0.8282263820587614, 0.889491815012585, 0.8748668324534412, 0.8723090333307979, 0.8852530195977295, 0.8373693698776143, 0.8317428112191674, 0.8864341118461316, 0.8754644304760888, 0.8885441909734692, 0.8859757888178047, 0.887914154217967, 0.8256100269936597, 0.8888781235502682, 0.7541037767449545, 0.8914471553397227, 0.8896064587330459, 0.8901991707974842, 0.8918792856023907, 0.8924039972175224, 0.8836427689581475]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"lines\", \"name\": \"AUC_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8829662400436009, 0.8908923724147865, 0.8908923724147865, 0.8908923724147865, 0.8908923724147865, 0.8908923724147865, 0.8908923724147865, 0.8908923724147865, 0.8908923724147865, 0.8908923724147865, 0.8908923724147865, 0.8908923724147865, 0.8908923724147865, 0.8908923724147865, 0.8908923724147865, 0.8908923724147865, 0.8908923724147865, 0.8908923724147865, 0.8908923724147865, 0.8908923724147865, 0.8908923724147865, 0.8908923724147865, 0.8908923724147865, 0.8908923724147865, 0.8908923724147865, 0.8908923724147865, 0.8914471553397227, 0.8914471553397227, 0.8914471553397227, 0.8918792856023907, 0.8924039972175224, 0.8924039972175224]}], \"f1_score_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"markers\", \"name\": \"f1_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.794180269694819, 0.8056068133427962, 0.7891412349183818, 0.7925479063165366, 0.7977998580553585, 0.8004968062455642, 0.7628105039034775, 0.7938963804116395, 0.7965223562810505, 0.7281760113555713, 0.803264726756565, 0.7388928317955997, 0.8023420865862313, 0.7828246983676367, 0.7846699787083037, 0.796877217885025, 0.747054648687012, 0.7441447835344215, 0.7968062455642299, 0.7838183108587651, 0.8059616749467707, 0.7989354151880766, 0.8002129169623846, 0.7377572746628814, 0.8003548616039744, 0.7310858765081618, 0.8041163946061036, 0.7996451383960255, 0.799290276792051, 0.8040454222853086, 0.8066713981547196, 0.7830376153300213]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"lines\", \"name\": \"f1_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.794180269694819, 0.8056068133427962, 0.8056068133427962, 0.8056068133427962, 0.8056068133427962, 0.8056068133427962, 0.8056068133427962, 0.8056068133427962, 0.8056068133427962, 0.8056068133427962, 0.8056068133427962, 0.8056068133427962, 0.8056068133427962, 0.8056068133427962, 0.8056068133427962, 0.8056068133427962, 0.8056068133427962, 0.8056068133427962, 0.8056068133427962, 0.8056068133427962, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8066713981547196, 0.8066713981547196]}], \"precision_score_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"markers\", \"name\": \"precision_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.7409020240278469, 0.7588323988423992, 0.7408961915232457, 0.7479289564083912, 0.7563109590348583, 0.754061737179738, 0.723583749678061, 0.7422051472172784, 0.7457669731047737, 0.704505643781403, 0.7613822983335407, 0.7071800413307052, 0.7547656619280155, 0.748048734203707, 0.7276230242050865, 0.7606097944362689, 0.7147676294866294, 0.7118970247730685, 0.7466018657164092, 0.748821080960071, 0.7568285911267659, 0.7494053560720182, 0.7509300450709151, 0.7067635271591545, 0.7541441037261926, 0.3655429382540809, 0.7583074387843872, 0.7518743637315135, 0.7493450169470084, 0.7568126978121967, 0.7623533071045087, 0.6952680817053694]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"lines\", \"name\": \"precision_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.7409020240278469, 0.7588323988423992, 0.7588323988423992, 0.7588323988423992, 0.7588323988423992, 0.7588323988423992, 0.7588323988423992, 0.7588323988423992, 0.7588323988423992, 0.7588323988423992, 0.7613822983335407, 0.7613822983335407, 0.7613822983335407, 0.7613822983335407, 0.7613822983335407, 0.7613822983335407, 0.7613822983335407, 0.7613822983335407, 0.7613822983335407, 0.7613822983335407, 0.7613822983335407, 0.7613822983335407, 0.7613822983335407, 0.7613822983335407, 0.7613822983335407, 0.7613822983335407, 0.7613822983335407, 0.7613822983335407, 0.7613822983335407, 0.7613822983335407, 0.7623533071045087, 0.7623533071045087]}], \"precision_score_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"markers\", \"name\": \"precision_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.794180269694819, 0.8056068133427964, 0.7891412349183817, 0.7925479063165366, 0.7977998580553585, 0.8004968062455642, 0.7628105039034776, 0.7938963804116395, 0.7965223562810505, 0.7281760113555713, 0.803264726756565, 0.7388928317955997, 0.8023420865862313, 0.7828246983676367, 0.7846699787083037, 0.796877217885025, 0.747054648687012, 0.7441447835344215, 0.7968062455642301, 0.7838183108587651, 0.8059616749467707, 0.7989354151880766, 0.8002129169623846, 0.7377572746628815, 0.8003548616039744, 0.7310858765081618, 0.8041163946061036, 0.7996451383960255, 0.799290276792051, 0.8040454222853087, 0.8066713981547196, 0.7830376153300213]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"lines\", \"name\": \"precision_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.794180269694819, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8056068133427964, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8059616749467707, 0.8066713981547196, 0.8066713981547196]}], \"recall_score_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"markers\", \"name\": \"recall_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.7059460344452537, 0.7178662862656482, 0.6755669792682608, 0.679241667180996, 0.6869426232039536, 0.7034665295334356, 0.7710605186381092, 0.6993293332739106, 0.7043748694766887, 0.7563076633734636, 0.700904477435778, 0.7564337232675293, 0.7120689711831787, 0.6419594590806366, 0.6889086477188519, 0.6773270460333153, 0.7654542395411068, 0.762071733799279, 0.704216884083887, 0.644502762244137, 0.7264659476665117, 0.7082901782644927, 0.7104100688610389, 0.7564277714188077, 0.7033001680114401, 0.5, 0.7114575771778331, 0.7049662760269394, 0.7100812789153372, 0.7155404309489118, 0.7151121302998558, 0.6390264248367374]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"lines\", \"name\": \"recall_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.7059460344452537, 0.7178662862656482, 0.7178662862656482, 0.7178662862656482, 0.7178662862656482, 0.7178662862656482, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092, 0.7710605186381092]}], \"average_precision_score_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"markers\", \"name\": \"average_precision_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.7930085505051669, 0.8045850901429938, 0.7868296201753783, 0.7946065194086489, 0.8017319611016276, 0.7978605965434817, 0.8035383116147317, 0.7893314275799297, 0.7900116523641235, 0.7824167953007353, 0.8043893343989181, 0.7902117279398116, 0.8025684420080429, 0.7811652520538398, 0.7723088629476871, 0.8017757824178686, 0.7971425779373608, 0.7928818269882413, 0.7959048064646571, 0.7834710466183908, 0.7979600027993259, 0.7951248496108867, 0.8009052621207106, 0.7868393603807874, 0.799504603687202, 0.5317965142493073, 0.8061252923670776, 0.803001314568939, 0.8037972185962883, 0.8069395884009622, 0.8083833606699224, 0.8081655314421677]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"lines\", \"name\": \"average_precision_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.7930085505051669, 0.8045850901429938, 0.8045850901429938, 0.8045850901429938, 0.8045850901429938, 0.8045850901429938, 0.8045850901429938, 0.8045850901429938, 0.8045850901429938, 0.8045850901429938, 0.8045850901429938, 0.8045850901429938, 0.8045850901429938, 0.8045850901429938, 0.8045850901429938, 0.8045850901429938, 0.8045850901429938, 0.8045850901429938, 0.8045850901429938, 0.8045850901429938, 0.8045850901429938, 0.8045850901429938, 0.8045850901429938, 0.8045850901429938, 0.8045850901429938, 0.8045850901429938, 0.8061252923670776, 0.8061252923670776, 0.8061252923670776, 0.8069395884009622, 0.8083833606699224, 0.8083833606699224]}], \"matthews_correlation\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"markers\", \"name\": \"matthews_correlation\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.44538677063246324, 0.47487150111692494, 0.4110379973451706, 0.4212813673462307, 0.43765884928538734, 0.4546319172260377, 0.4923355801131907, 0.4393472043654211, 0.4481417046847695, 0.45786963609509923, 0.4582253237859225, 0.4609655598819037, 0.4647531092219596, 0.37496812430675736, 0.4146689917901307, 0.4297644779804637, 0.4775172883552411, 0.471279655273596, 0.44866725935612306, 0.3790763902140631, 0.4822742178255626, 0.4556937873063684, 0.45948590955058155, 0.4604953996854224, 0.45443894464455026, 0.0, 0.4673477970322281, 0.4543217328569799, 0.45766388142889947, 0.47045852022971724, 0.47501896840412494, 0.3411552732335158]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\"], \"mode\": \"lines\", \"name\": \"matthews_correlation_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.44538677063246324, 0.47487150111692494, 0.47487150111692494, 0.47487150111692494, 0.47487150111692494, 0.47487150111692494, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907, 0.4923355801131907]}]}, \"metricName\": null, \"primaryMetricName\": \"AUC_weighted\", \"showLegend\": false}, \"run_metrics\": [{\"name\": \"experiment_status\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"categories\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], \"series\": [{\"data\": [\"DatasetEvaluation\", \"FeaturesGeneration\", \"DatasetFeaturization\", \"DatasetFeaturizationCompleted\", \"DatasetCrossValidationSplit\", \"ModelSelection\", \"BestRunExplainModel\", \"ModelExplanationDataSetSetup\", \"PickSurrogateModel\", \"EngineeredFeatureExplanations\", \"EngineeredFeatureExplanations\", \"RawFeaturesExplanations\", \"RawFeaturesExplanations\", \"BestRunExplainModel\"]}]}, {\"name\": \"experiment_status_description\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"categories\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], \"series\": [{\"data\": [\"Gathering dataset statistics.\", \"Generating features for the dataset.\", \"Beginning to fit featurizers and featurize the dataset.\", \"Completed fit featurizers and featurizing the dataset.\", \"Generating individually featurized CV splits.\", \"Beginning model selection.\", \"Best run model explanations started\", \"Model explanations data setup completed\", \"Choosing LightGBM as the surrogate model for explanations\", \"Computation of engineered features started\", \"Computation of engineered features completed\", \"Computation of raw features started\", \"Computation of raw features completed\", \"Best run model explanations completed\"]}]}, {\"name\": \"weighted_accuracy\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"categories\": [0], \"series\": [{\"data\": [0.8659197706002167]}]}, {\"name\": \"precision_score_weighted\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"categories\": [0], \"series\": [{\"data\": [0.7970478889184003]}]}, {\"name\": \"precision_score_micro\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"categories\": [0], \"series\": [{\"data\": [0.8066713981547196]}]}, {\"name\": \"accuracy\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"categories\": [0], \"series\": [{\"data\": [0.8066713981547196]}]}, {\"name\": \"average_precision_score_macro\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"categories\": [0], \"series\": [{\"data\": [0.8083833606699224]}]}, {\"name\": \"AUC_micro\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"categories\": [0], \"series\": [{\"data\": [0.8924039972175224]}]}, {\"name\": \"f1_score_macro\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"categories\": [0], \"series\": [{\"data\": [0.7315996066336993]}]}, {\"name\": \"precision_score_macro\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"categories\": [0], \"series\": [{\"data\": [0.7623533071045087]}]}, {\"name\": \"recall_score_weighted\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"categories\": [0], \"series\": [{\"data\": [0.8066713981547196]}]}, {\"name\": \"f1_score_weighted\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"categories\": [0], \"series\": [{\"data\": [0.7972189693042894]}]}, {\"name\": \"AUC_weighted\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"categories\": [0], \"series\": [{\"data\": [0.8523143193054924]}]}, {\"name\": \"balanced_accuracy\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"categories\": [0], \"series\": [{\"data\": [0.7151121302998558]}]}, {\"name\": \"AUC_macro\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"categories\": [0], \"series\": [{\"data\": [0.8523143193054924]}]}, {\"name\": \"average_precision_score_weighted\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"categories\": [0], \"series\": [{\"data\": [0.8685535930412165]}]}, {\"name\": \"f1_score_micro\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"categories\": [0], \"series\": [{\"data\": [0.8066713981547196]}]}, {\"name\": \"average_precision_score_micro\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"categories\": [0], \"series\": [{\"data\": [0.893687334721978]}]}, {\"name\": \"log_loss\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"categories\": [0], \"series\": [{\"data\": [0.42648424909028393]}]}, {\"name\": \"matthews_correlation\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"categories\": [0], \"series\": [{\"data\": [0.47501896840412494]}]}, {\"name\": \"norm_macro_recall\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"categories\": [0], \"series\": [{\"data\": [0.4302242605997115]}]}, {\"name\": \"recall_score_macro\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"categories\": [0], \"series\": [{\"data\": [0.7151121302998558]}]}, {\"name\": \"recall_score_micro\", \"run_id\": \"AutoML_14e70e02-a31c-4dc2-88df-f660af838a84\", \"categories\": [0], \"series\": [{\"data\": [0.8066713981547196]}]}], \"run_logs\": \"\\nRun is completed.\", \"graph\": {}, \"widget_settings\": {\"childWidgetDisplay\": \"popup\", \"send_telemetry\": false, \"log_level\": \"INFO\", \"sdk_version\": \"1.34.0\"}, \"loading\": false}"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 18,
          "data": {
            "text/plain": "{'runId': 'AutoML_14e70e02-a31c-4dc2-88df-f660af838a84',\n 'target': 'cluster-vhcg77',\n 'status': 'Completed',\n 'startTimeUtc': '2021-10-11T17:02:46.345337Z',\n 'endTimeUtc': '2021-10-11T17:50:37.708891Z',\n 'services': {},\n 'properties': {'num_iterations': '1000',\n  'training_type': 'TrainFull',\n  'acquisition_function': 'EI',\n  'primary_metric': 'AUC_weighted',\n  'train_split': '0.2',\n  'acquisition_parameter': '0',\n  'num_cross_validation': '10',\n  'target': 'cluster-vhcg77',\n  'AMLSettingsJsonString': '{\"path\":null,\"name\":\"telco-customer-churn\",\"subscription_id\":\"48a74bb7-9950-4cc1-9caa-5d50f995cc55\",\"resource_group\":\"aml-quickstarts-160731\",\"workspace_name\":\"quick-starts-ws-160731\",\"region\":\"southcentralus\",\"compute_target\":\"cluster-vhcg77\",\"spark_service\":null,\"azure_service\":\"remote\",\"many_models\":false,\"pipeline_fetch_max_batch_size\":1,\"enable_batch_run\":false,\"enable_run_restructure\":false,\"start_auxiliary_runs_before_parent_complete\":false,\"enable_code_generation\":false,\"iterations\":1000,\"primary_metric\":\"AUC_weighted\",\"task_type\":\"classification\",\"data_script\":null,\"test_size\":0.0,\"test_include_predictions_only\":false,\"validation_size\":0.2,\"n_cross_validations\":10,\"y_min\":null,\"y_max\":null,\"num_classes\":null,\"featurization\":\"auto\",\"_ignore_package_version_incompatibilities\":false,\"is_timeseries\":false,\"max_cores_per_iteration\":-1,\"max_concurrent_iterations\":5,\"iteration_timeout_minutes\":null,\"mem_in_mb\":null,\"enforce_time_on_windows\":false,\"experiment_timeout_minutes\":30,\"experiment_exit_score\":null,\"whitelist_models\":null,\"blacklist_algos\":[\"TensorFlowLinearClassifier\",\"TensorFlowDNN\"],\"supported_models\":[\"XGBoostClassifier\",\"DecisionTree\",\"SGD\",\"LogisticRegression\",\"ExtremeRandomTrees\",\"KNN\",\"SVM\",\"LinearSVM\",\"BernoulliNaiveBayes\",\"LightGBM\",\"MultinomialNaiveBayes\",\"AveragedPerceptronClassifier\",\"TensorFlowDNN\",\"RandomForest\",\"GradientBoosting\",\"TensorFlowLinearClassifier\"],\"private_models\":[],\"auto_blacklist\":true,\"blacklist_samples_reached\":false,\"exclude_nan_labels\":true,\"verbosity\":20,\"_debug_log\":\"azureml_automl.log\",\"show_warnings\":false,\"model_explainability\":true,\"service_url\":null,\"sdk_url\":null,\"sdk_packages\":null,\"enable_onnx_compatible_models\":false,\"enable_split_onnx_featurizer_estimator_models\":false,\"vm_type\":\"STANDARD_D2_V2\",\"telemetry_verbosity\":20,\"send_telemetry\":true,\"enable_dnn\":false,\"scenario\":\"SDK-1.13.0\",\"environment_label\":null,\"save_mlflow\":false,\"force_text_dnn\":false,\"enable_feature_sweeping\":true,\"enable_early_stopping\":true,\"early_stopping_n_iters\":10,\"metrics\":null,\"enable_metric_confidence\":false,\"enable_ensembling\":true,\"enable_stack_ensembling\":true,\"ensemble_iterations\":15,\"enable_tf\":false,\"enable_subsampling\":null,\"subsample_seed\":null,\"enable_nimbusml\":false,\"enable_streaming\":false,\"force_streaming\":false,\"track_child_runs\":true,\"allowed_private_models\":[],\"label_column_name\":\"Churn\",\"weight_column_name\":null,\"cv_split_column_names\":null,\"positive_label\":null,\"enable_local_managed\":false,\"_local_managed_run_id\":null,\"cost_mode\":1,\"lag_length\":0,\"metric_operation\":\"maximize\",\"preprocess\":true}',\n  'DataPrepJsonString': '{\\\\\"training_data\\\\\": {\\\\\"datasetId\\\\\": \\\\\"be6a012c-2b16-4557-a23c-8a11b53388cb\\\\\"}, \\\\\"datasets\\\\\": 0}',\n  'EnableSubsampling': None,\n  'runTemplate': 'AutoML',\n  'azureml.runsource': 'automl',\n  'display_task_type': 'classification',\n  'dependencies_versions': '{\"azureml-widgets\": \"1.34.0\", \"azureml-train\": \"1.34.0\", \"azureml-train-restclients-hyperdrive\": \"1.34.0\", \"azureml-train-core\": \"1.34.0\", \"azureml-train-automl\": \"1.34.0\", \"azureml-train-automl-runtime\": \"1.34.0.post1\", \"azureml-train-automl-client\": \"1.34.0\", \"azureml-tensorboard\": \"1.34.0\", \"azureml-telemetry\": \"1.34.0\", \"azureml-sdk\": \"1.34.0\", \"azureml-samples\": \"0+unknown\", \"azureml-responsibleai\": \"1.34.0\", \"azureml-pipeline\": \"1.34.0\", \"azureml-pipeline-steps\": \"1.34.0\", \"azureml-pipeline-core\": \"1.34.0\", \"azureml-opendatasets\": \"1.34.0\", \"azureml-mlflow\": \"1.34.0\", \"azureml-interpret\": \"1.34.0\", \"azureml-inference-server-http\": \"0.3.1\", \"azureml-explain-model\": \"1.34.0\", \"azureml-defaults\": \"1.34.0\", \"azureml-dataset-runtime\": \"1.34.0\", \"azureml-dataprep\": \"2.22.2\", \"azureml-dataprep-rslex\": \"1.20.2\", \"azureml-dataprep-native\": \"38.0.0\", \"azureml-datadrift\": \"1.34.0\", \"azureml-core\": \"1.34.0\", \"azureml-contrib-services\": \"1.34.0\", \"azureml-contrib-server\": \"1.34.0\", \"azureml-contrib-reinforcementlearning\": \"1.34.0\", \"azureml-contrib-pipeline-steps\": \"1.34.0\", \"azureml-contrib-notebook\": \"1.34.0\", \"azureml-contrib-fairness\": \"1.34.0\", \"azureml-contrib-dataset\": \"1.34.0\", \"azureml-contrib-automl-pipeline-steps\": \"1.34.0\", \"azureml-cli-common\": \"1.34.0\", \"azureml-automl-runtime\": \"1.34.0.post1\", \"azureml-automl-dnn-nlp\": \"1.34.0\", \"azureml-automl-core\": \"1.34.0.post1\", \"azureml-accel-models\": \"1.34.0\"}',\n  '_aml_system_scenario_identification': 'Remote.Parent',\n  'ClientType': 'SDK',\n  'environment_cpu_name': 'AzureML-AutoML',\n  'environment_cpu_label': 'prod',\n  'environment_gpu_name': 'AzureML-AutoML-GPU',\n  'environment_gpu_label': 'prod',\n  'root_attribution': 'automl',\n  'attribution': 'AutoML',\n  'Orchestrator': 'AutoML',\n  'CancelUri': 'https://southcentralus.api.azureml.ms/jasmine/v1.0/subscriptions/48a74bb7-9950-4cc1-9caa-5d50f995cc55/resourceGroups/aml-quickstarts-160731/providers/Microsoft.MachineLearningServices/workspaces/quick-starts-ws-160731/experimentids/db0c37f7-d0cb-4b46-be55-ae6a7fa5c163/cancel/AutoML_14e70e02-a31c-4dc2-88df-f660af838a84',\n  'ClientSdkVersion': '1.34.1',\n  'snapshotId': '00000000-0000-0000-0000-000000000000',\n  'SetupRunId': 'AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_setup',\n  'SetupRunContainerId': 'dcid.AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_setup',\n  'FeaturizationRunJsonPath': 'featurizer_container.json',\n  'FeaturizationRunId': 'AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_featurize',\n  'ProblemInfoJsonString': '{\"dataset_num_categorical\": 0, \"is_sparse\": true, \"subsampling\": false, \"has_extra_col\": true, \"dataset_classes\": 2, \"dataset_features\": 40, \"dataset_samples\": 7043, \"single_frequency_class_detected\": false}',\n  'ModelExplainRunId': 'AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_ModelExplain',\n  'azureml.git.repository_uri': 'https://github.com/vhcg77/nd00333-capstone.git',\n  'mlflow.source.git.repoURL': 'https://github.com/vhcg77/nd00333-capstone.git',\n  'azureml.git.branch': 'master',\n  'mlflow.source.git.branch': 'master',\n  'azureml.git.commit': '18a8010dfa58a418991343e7694c6366dc605848',\n  'mlflow.source.git.commit': '18a8010dfa58a418991343e7694c6366dc605848',\n  'azureml.git.dirty': 'True'},\n 'inputDatasets': [{'dataset': {'id': 'be6a012c-2b16-4557-a23c-8a11b53388cb'}, 'consumptionDetails': {'type': 'RunInput', 'inputName': 'training_data', 'mechanism': 'Direct'}}],\n 'outputDatasets': [],\n 'logFiles': {},\n 'submittedBy': 'ODL_User 160731'}"
          },
          "metadata": {}
        }
      ],
      "execution_count": 18,
      "metadata": {
        "gather": {
          "logged": 1633974659605
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Best Model\n",
        "\n",
        "TODO: In the cell below, get the best model from the automl experiments and display all the properties of the model.\n",
        "\n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Retrieve and save your best automl model.\n",
        "\n",
        "best_automl_run, fitted_automl_model = run.get_output()\n",
        "print(best_automl_run)\n",
        "\n",
        "print(\"Best run metrics: \")\n",
        "best_automl_run.get_metrics()\n",
        "fitted_automl_model"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Run(Experiment: telco-customer-churn,\nId: AutoML_14e70e02-a31c-4dc2-88df-f660af838a84_34,\nType: azureml.scriptrun,\nStatus: Completed)\nBest run metrics: \n"
        },
        {
          "output_type": "execute_result",
          "execution_count": 19,
          "data": {
            "text/plain": "PipelineWithYTransformations(Pipeline={'memory': None,\n                                       'steps': [('datatransformer',\n                                                  DataTransformer(enable_dnn=False, enable_feature_sweeping=True, feature_sweeping_config={}, feature_sweeping_timeout=86400, featurization_config=None, force_text_dnn=False, is_cross_validation=True, is_onnx_compatible=False, observer=None, task='classification', working_dir='/mn...\n), random_state=0, reg_alpha=0, reg_lambda=0.625, subsample=0.8, tree_method='auto'))], verbose=False)), ('25', Pipeline(memory=None, steps=[('truncatedsvdwrapper', TruncatedSVDWrapper(n_components=0.3068421052631579, random_state=None)), ('randomforestclassifier', RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None, criterion='entropy', max_depth=None, max_features=0.1, max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0, min_impurity_split=None, min_samples_leaf=0.3194736842105263, min_samples_split=0.6189473684210526, min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=-1, oob_score=True, random_state=None, verbose=0, warm_start=False))], verbose=False))], flatten_transform=None, weights=[0.2, 0.13333333333333333, 0.13333333333333333, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.13333333333333333, 0.06666666666666667, 0.13333333333333333]))],\n                                       'verbose': False},\n                             y_transformer={},\n                             y_transformer_name='LabelEncoder')"
          },
          "metadata": {}
        }
      ],
      "execution_count": 19,
      "metadata": {
        "gather": {
          "logged": 1633974931761
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#TODO: Save the best model\n",
        "\n",
        "\n",
        "#print(best_automl_run.get_file_names())\n",
        "\n",
        "models = [element for element in best_automl_run.get_file_names() if 'pkl' in element]\n",
        "models\n",
        "for model in models:\n",
        "    best_automl_run.download_file(name=model)"
      ],
      "outputs": [],
      "execution_count": 20,
      "metadata": {
        "gather": {
          "logged": 1633974936900
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Model Deployment\n",
        "\n",
        "Remember you have to deploy only one of the two models you trained.. Perform the steps in the rest of this notebook only if you wish to deploy this model.\n",
        "\n",
        "TODO: In the cell below, register the model, create an inference config and deploy the model as a web service."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "published_pipeline = pipeline_run.publish_pipeline(\n",
        "    name=\"Bankmarketing Train\", description=\"Training bankmarketing pipeline\", version=\"1.0\")\n",
        "\n",
        "published_pipeline"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1598431435189
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "TODO: In the cell below, send a request to the web service you deployed to test it."
      ],
      "metadata": {
        "collapsed": true,
        "gather": {
          "logged": 1598431657736
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "\n",
        "rest_endpoint = published_pipeline.endpoint\n",
        "response = requests.post(rest_endpoint, \n",
        "                         headers=auth_header, \n",
        "                         json={\"ExperimentName\": \"pipeline-rest-endpoint\"}\n",
        "                        )\n",
        "\n",
        "\n",
        "try:\n",
        "    response.raise_for_status()\n",
        "except Exception:    \n",
        "    raise Exception(\"Received bad response from the endpoint: {}\\n\"\n",
        "                    \"Response Code: {}\\n\"\n",
        "                    \"Headers: {}\\n\"\n",
        "                    \"Content: {}\".format(rest_endpoint, response.status_code, response.headers, response.content))\n",
        "\n",
        "run_id = response.json().get('Id')\n",
        "print('Submitted pipeline run: ', run_id)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1598432707604
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "TODO: In the cell below, print the logs of the web service and delete the service"
      ],
      "metadata": {
        "collapsed": true,
        "gather": {
          "logged": 1598432765711
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.pipeline.core.run import PipelineRun\n",
        "from azureml.widgets import RunDetails\n",
        "\n",
        "published_pipeline_run = PipelineRun(ws.experiments[\"pipeline-rest-endpoint\"], run_id)\n",
        "RunDetails(published_pipeline_run).show()"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    }
  ],
  "metadata": {
    "kernel_info": {
      "name": "python3"
    },
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.9",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    },
    "microsoft": {
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}