{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Automated ML\n",
        "\n",
        "TODO: Import Dependencies. In the cell below, import all the dependencies that you will need to complete the project."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import logging\n",
        "import os\n",
        "import csv\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn import datasets\n",
        "import pkg_resources\n",
        "\n",
        "import azureml.core\n",
        "from azureml.core.experiment import Experiment\n",
        "from azureml.core.workspace import Workspace\n",
        "from azureml.train.automl import AutoMLConfig\n",
        "from azureml.core.dataset import Dataset\n",
        "\n",
        "from azureml.pipeline.steps import AutoMLStep\n",
        "\n",
        "# Check core SDK version number\n",
        "print(\"SDK version:\", azureml.core.VERSION)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "SDK version: 1.34.0\n"
        }
      ],
      "execution_count": 1,
      "metadata": {
        "gather": {
          "logged": 1636310114488
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Dataset\n",
        "\n",
        "### Overview\n",
        "TODO: In this markdown cell, give an overview of the dataset you are using. Also mention the task you will be performing.\n",
        "\n",
        "This dataset contains numerical input variables that come from and PCA algorithm. Due to confidential concerns, the original variables are not available. Features V1, V2, ..., V8 are the outputs of the principal components from the PCA algorithm. The time and amount are the variables that are not transformed by PCA. The target variable is the feature 'Class' and it takes values 1 in case of fraud and 0 otherwise.\n",
        "\n",
        "\n",
        "This dataset contains transations made by credit cards in September 2012 by European cardholders. This dataset contains 492 frauds out of 284807 transations, and it is highly unbalanced, the positive class (fraud) account for 0.172% of all the transations.\n",
        "\n",
        "\n",
        "TODO: Get data. In the cell below, write code to access the data you will be using in this project. Remember that the dataset needs to be external."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "ws = Workspace.from_config()\n",
        "\n",
        "# choose a name for experiment\n",
        "experiment_name = 'telco-customer-churn'\n",
        "experiment=Experiment(ws, experiment_name)\n",
        "\n",
        "# Try to load the dataset from the Workspace. Otherwise, create it from the file\n",
        "# NOTE: update the key to match the dataset name\n",
        "found = False\n",
        "key = \"Customer Churn\"\n",
        "description_text = \"Customer Churn DataSet for Udacity Capstone Project\"\n",
        "\n",
        "if key in ws.datasets.keys(): \n",
        "        found = True\n",
        "        dataset = ws.datasets[key] \n",
        "\n",
        "if not found:\n",
        "        # Create AML Dataset and register it into Workspace\n",
        "        example_data = 'https://raw.githubusercontent.com/srees1988/predict-churn-py/main/customer_churn_data.csv'\n",
        "        dataset = Dataset.Tabular.from_delimited_files(example_data)        \n",
        "        #Register Dataset in Workspace\n",
        "        dataset = dataset.register(workspace=ws,\n",
        "                                   name=key,\n",
        "                                   description=description_text)\n",
        "\n",
        "\n",
        "df = dataset.to_pandas_dataframe()\n",
        "df.describe()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 2,
          "data": {
            "text/plain": "       SeniorCitizen       tenure  MonthlyCharges  TotalCharges\ncount    7043.000000  7043.000000     7043.000000   7032.000000\nmean        0.162147    32.371149       64.761692   2283.300441\nstd         0.368612    24.559481       30.090047   2266.771362\nmin         0.000000     0.000000       18.250000     18.800000\n25%         0.000000     9.000000       35.500000    401.450000\n50%         0.000000    29.000000       70.350000   1397.475000\n75%         0.000000    55.000000       89.850000   3794.737500\nmax         1.000000    72.000000      118.750000   8684.800000",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>SeniorCitizen</th>\n      <th>tenure</th>\n      <th>MonthlyCharges</th>\n      <th>TotalCharges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>7043.000000</td>\n      <td>7043.000000</td>\n      <td>7043.000000</td>\n      <td>7032.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.162147</td>\n      <td>32.371149</td>\n      <td>64.761692</td>\n      <td>2283.300441</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.368612</td>\n      <td>24.559481</td>\n      <td>30.090047</td>\n      <td>2266.771362</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>18.250000</td>\n      <td>18.800000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.000000</td>\n      <td>9.000000</td>\n      <td>35.500000</td>\n      <td>401.450000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>0.000000</td>\n      <td>29.000000</td>\n      <td>70.350000</td>\n      <td>1397.475000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>0.000000</td>\n      <td>55.000000</td>\n      <td>89.850000</td>\n      <td>3794.737500</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.000000</td>\n      <td>72.000000</td>\n      <td>118.750000</td>\n      <td>8684.800000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 2,
      "metadata": {
        "gather": {
          "logged": 1636310125095
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Check the first five rows:"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 3,
          "data": {
            "text/plain": "   customerID  gender  SeniorCitizen  Partner  Dependents  tenure  \\\n0  7590-VHVEG  Female              0     True       False       1   \n1  5575-GNVDE    Male              0    False       False      34   \n2  3668-QPYBK    Male              0    False       False       2   \n3  7795-CFOCW    Male              0    False       False      45   \n4  9237-HQITU  Female              0    False       False       2   \n\n   PhoneService     MultipleLines InternetService OnlineSecurity  ...  \\\n0         False  No phone service             DSL             No  ...   \n1          True                No             DSL            Yes  ...   \n2          True                No             DSL            Yes  ...   \n3         False  No phone service             DSL            Yes  ...   \n4          True                No     Fiber optic             No  ...   \n\n  DeviceProtection TechSupport StreamingTV StreamingMovies        Contract  \\\n0               No          No          No              No  Month-to-month   \n1              Yes          No          No              No        One year   \n2               No          No          No              No  Month-to-month   \n3              Yes         Yes          No              No        One year   \n4               No          No          No              No  Month-to-month   \n\n  PaperlessBilling              PaymentMethod MonthlyCharges  TotalCharges  \\\n0             True           Electronic check          29.85         29.85   \n1            False               Mailed check          56.95       1889.50   \n2             True               Mailed check          53.85        108.15   \n3            False  Bank transfer (automatic)          42.30       1840.75   \n4             True           Electronic check          70.70        151.65   \n\n   Churn  \n0  False  \n1  False  \n2   True  \n3  False  \n4   True  \n\n[5 rows x 21 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>customerID</th>\n      <th>gender</th>\n      <th>SeniorCitizen</th>\n      <th>Partner</th>\n      <th>Dependents</th>\n      <th>tenure</th>\n      <th>PhoneService</th>\n      <th>MultipleLines</th>\n      <th>InternetService</th>\n      <th>OnlineSecurity</th>\n      <th>...</th>\n      <th>DeviceProtection</th>\n      <th>TechSupport</th>\n      <th>StreamingTV</th>\n      <th>StreamingMovies</th>\n      <th>Contract</th>\n      <th>PaperlessBilling</th>\n      <th>PaymentMethod</th>\n      <th>MonthlyCharges</th>\n      <th>TotalCharges</th>\n      <th>Churn</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7590-VHVEG</td>\n      <td>Female</td>\n      <td>0</td>\n      <td>True</td>\n      <td>False</td>\n      <td>1</td>\n      <td>False</td>\n      <td>No phone service</td>\n      <td>DSL</td>\n      <td>No</td>\n      <td>...</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Month-to-month</td>\n      <td>True</td>\n      <td>Electronic check</td>\n      <td>29.85</td>\n      <td>29.85</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5575-GNVDE</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>34</td>\n      <td>True</td>\n      <td>No</td>\n      <td>DSL</td>\n      <td>Yes</td>\n      <td>...</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>One year</td>\n      <td>False</td>\n      <td>Mailed check</td>\n      <td>56.95</td>\n      <td>1889.50</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3668-QPYBK</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>2</td>\n      <td>True</td>\n      <td>No</td>\n      <td>DSL</td>\n      <td>Yes</td>\n      <td>...</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Month-to-month</td>\n      <td>True</td>\n      <td>Mailed check</td>\n      <td>53.85</td>\n      <td>108.15</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7795-CFOCW</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>45</td>\n      <td>False</td>\n      <td>No phone service</td>\n      <td>DSL</td>\n      <td>Yes</td>\n      <td>...</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>One year</td>\n      <td>False</td>\n      <td>Bank transfer (automatic)</td>\n      <td>42.30</td>\n      <td>1840.75</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9237-HQITU</td>\n      <td>Female</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>2</td>\n      <td>True</td>\n      <td>No</td>\n      <td>Fiber optic</td>\n      <td>No</td>\n      <td>...</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Month-to-month</td>\n      <td>True</td>\n      <td>Electronic check</td>\n      <td>70.70</td>\n      <td>151.65</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 21 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 3,
      "metadata": {
        "gather": {
          "logged": 1636310146445
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The column customerID should be removed because they have unique values in the whole column:"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['customerID'].nunique() == df.shape[0]"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 4,
          "data": {
            "text/plain": "True"
          },
          "metadata": {}
        }
      ],
      "execution_count": 4,
      "metadata": {
        "gather": {
          "logged": 1636310148955
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop('customerID', axis=1, inplace=True)\n",
        "df.head()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 5,
          "data": {
            "text/plain": "   gender  SeniorCitizen  Partner  Dependents  tenure  PhoneService  \\\n0  Female              0     True       False       1         False   \n1    Male              0    False       False      34          True   \n2    Male              0    False       False       2          True   \n3    Male              0    False       False      45         False   \n4  Female              0    False       False       2          True   \n\n      MultipleLines InternetService OnlineSecurity OnlineBackup  \\\n0  No phone service             DSL             No          Yes   \n1                No             DSL            Yes           No   \n2                No             DSL            Yes          Yes   \n3  No phone service             DSL            Yes           No   \n4                No     Fiber optic             No           No   \n\n  DeviceProtection TechSupport StreamingTV StreamingMovies        Contract  \\\n0               No          No          No              No  Month-to-month   \n1              Yes          No          No              No        One year   \n2               No          No          No              No  Month-to-month   \n3              Yes         Yes          No              No        One year   \n4               No          No          No              No  Month-to-month   \n\n   PaperlessBilling              PaymentMethod  MonthlyCharges  TotalCharges  \\\n0              True           Electronic check           29.85         29.85   \n1             False               Mailed check           56.95       1889.50   \n2              True               Mailed check           53.85        108.15   \n3             False  Bank transfer (automatic)           42.30       1840.75   \n4              True           Electronic check           70.70        151.65   \n\n   Churn  \n0  False  \n1  False  \n2   True  \n3  False  \n4   True  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gender</th>\n      <th>SeniorCitizen</th>\n      <th>Partner</th>\n      <th>Dependents</th>\n      <th>tenure</th>\n      <th>PhoneService</th>\n      <th>MultipleLines</th>\n      <th>InternetService</th>\n      <th>OnlineSecurity</th>\n      <th>OnlineBackup</th>\n      <th>DeviceProtection</th>\n      <th>TechSupport</th>\n      <th>StreamingTV</th>\n      <th>StreamingMovies</th>\n      <th>Contract</th>\n      <th>PaperlessBilling</th>\n      <th>PaymentMethod</th>\n      <th>MonthlyCharges</th>\n      <th>TotalCharges</th>\n      <th>Churn</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Female</td>\n      <td>0</td>\n      <td>True</td>\n      <td>False</td>\n      <td>1</td>\n      <td>False</td>\n      <td>No phone service</td>\n      <td>DSL</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Month-to-month</td>\n      <td>True</td>\n      <td>Electronic check</td>\n      <td>29.85</td>\n      <td>29.85</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Male</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>34</td>\n      <td>True</td>\n      <td>No</td>\n      <td>DSL</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>One year</td>\n      <td>False</td>\n      <td>Mailed check</td>\n      <td>56.95</td>\n      <td>1889.50</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Male</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>2</td>\n      <td>True</td>\n      <td>No</td>\n      <td>DSL</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Month-to-month</td>\n      <td>True</td>\n      <td>Mailed check</td>\n      <td>53.85</td>\n      <td>108.15</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Male</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>45</td>\n      <td>False</td>\n      <td>No phone service</td>\n      <td>DSL</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>One year</td>\n      <td>False</td>\n      <td>Bank transfer (automatic)</td>\n      <td>42.30</td>\n      <td>1840.75</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Female</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>2</td>\n      <td>True</td>\n      <td>No</td>\n      <td>Fiber optic</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Month-to-month</td>\n      <td>True</td>\n      <td>Electronic check</td>\n      <td>70.70</td>\n      <td>151.65</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 5,
      "metadata": {
        "gather": {
          "logged": 1636310149740
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Check the data types present along the columns:"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.dtypes"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 6,
          "data": {
            "text/plain": "gender               object\nSeniorCitizen         int64\nPartner                bool\nDependents             bool\ntenure                int64\nPhoneService           bool\nMultipleLines        object\nInternetService      object\nOnlineSecurity       object\nOnlineBackup         object\nDeviceProtection     object\nTechSupport          object\nStreamingTV          object\nStreamingMovies      object\nContract             object\nPaperlessBilling       bool\nPaymentMethod        object\nMonthlyCharges      float64\nTotalCharges        float64\nChurn                  bool\ndtype: object"
          },
          "metadata": {}
        }
      ],
      "execution_count": 6,
      "metadata": {
        "gather": {
          "logged": 1636310152087
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's check the missing values:"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# check missing values\n",
        "df.isnull().sum()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 7,
          "data": {
            "text/plain": "gender               0\nSeniorCitizen        0\nPartner              0\nDependents           0\ntenure               0\nPhoneService         0\nMultipleLines        0\nInternetService      0\nOnlineSecurity       0\nOnlineBackup         0\nDeviceProtection     0\nTechSupport          0\nStreamingTV          0\nStreamingMovies      0\nContract             0\nPaperlessBilling     0\nPaymentMethod        0\nMonthlyCharges       0\nTotalCharges        11\nChurn                0\ndtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 7,
      "metadata": {
        "gather": {
          "logged": 1636310158466
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's check the unique values of the float columns:"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "float_columns = df.select_dtypes(include=['float64']).columns\n",
        "print(float_columns)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Index(['MonthlyCharges', 'TotalCharges'], dtype='object')\n"
        }
      ],
      "execution_count": 8,
      "metadata": {
        "gather": {
          "logged": 1636310167282
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for column in float_columns:\n",
        "    print(df[column].value_counts())\n",
        "    print('\\n')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "20.05     61\n19.85     45\n19.95     44\n19.90     44\n20.00     43\n          ..\n114.75     1\n103.60     1\n113.40     1\n57.65      1\n113.30     1\nName: MonthlyCharges, Length: 1585, dtype: int64\n\n\n20.20      11\n19.75       9\n19.65       8\n20.05       8\n19.90       8\n           ..\n1066.15     1\n249.95      1\n8333.95     1\n7171.70     1\n1024.00     1\nName: TotalCharges, Length: 6530, dtype: int64\n\n\n"
        }
      ],
      "execution_count": 9,
      "metadata": {
        "gather": {
          "logged": 1636310167921
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's check the unique values of the float columns:"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "bool_columns = df.select_dtypes(include=['bool']).columns\n",
        "print(bool_columns)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Index(['Partner', 'Dependents', 'PhoneService', 'PaperlessBilling', 'Churn'], dtype='object')\n"
        }
      ],
      "execution_count": 10,
      "metadata": {
        "gather": {
          "logged": 1636310174187
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for column in bool_columns:\n",
        "    print(df[column].value_counts())\n",
        "    print('\\n')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "False    3641\nTrue     3402\nName: Partner, dtype: int64\n\n\nFalse    4933\nTrue     2110\nName: Dependents, dtype: int64\n\n\nTrue     6361\nFalse     682\nName: PhoneService, dtype: int64\n\n\nTrue     4171\nFalse    2872\nName: PaperlessBilling, dtype: int64\n\n\nFalse    5174\nTrue     1869\nName: Churn, dtype: int64\n\n\n"
        }
      ],
      "execution_count": 11,
      "metadata": {
        "gather": {
          "logged": 1636310175133
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "5174/1864"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 12,
          "data": {
            "text/plain": "2.7757510729613735"
          },
          "metadata": {}
        }
      ],
      "execution_count": 12,
      "metadata": {
        "gather": {
          "logged": 1636310180820
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The variable Churn is highly skewed toward False by a factor of 2.77"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's check the unique values of the object columns:"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "object_columns = df.select_dtypes(include=['object']).columns\n",
        "print(object_columns)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Index(['gender', 'MultipleLines', 'InternetService', 'OnlineSecurity',\n       'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV',\n       'StreamingMovies', 'Contract', 'PaymentMethod'],\n      dtype='object')\n"
        }
      ],
      "execution_count": 13,
      "metadata": {
        "gather": {
          "logged": 1636310184618
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for column in object_columns:\n",
        "    print(df[column].value_counts())\n",
        "    print('\\n')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Male      3555\nFemale    3488\nName: gender, dtype: int64\n\n\nNo                  3390\nYes                 2971\nNo phone service     682\nName: MultipleLines, dtype: int64\n\n\nFiber optic    3096\nDSL            2421\nNo             1526\nName: InternetService, dtype: int64\n\n\nNo                     3498\nYes                    2019\nNo internet service    1526\nName: OnlineSecurity, dtype: int64\n\n\nNo                     3088\nYes                    2429\nNo internet service    1526\nName: OnlineBackup, dtype: int64\n\n\nNo                     3095\nYes                    2422\nNo internet service    1526\nName: DeviceProtection, dtype: int64\n\n\nNo                     3473\nYes                    2044\nNo internet service    1526\nName: TechSupport, dtype: int64\n\n\nNo                     2810\nYes                    2707\nNo internet service    1526\nName: StreamingTV, dtype: int64\n\n\nNo                     2785\nYes                    2732\nNo internet service    1526\nName: StreamingMovies, dtype: int64\n\n\nMonth-to-month    3875\nTwo year          1695\nOne year          1473\nName: Contract, dtype: int64\n\n\nElectronic check             2365\nMailed check                 1612\nBank transfer (automatic)    1544\nCredit card (automatic)      1522\nName: PaymentMethod, dtype: int64\n\n\n"
        }
      ],
      "execution_count": 14,
      "metadata": {
        "gather": {
          "logged": 1636310186764
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Train Test Splitting"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from azureml.data.dataset_factory import TabularDatasetFactory\n",
        "description_text = \"Train and Test splitting from Customer Churn DataSet for Udacity Capstone Project\"\n",
        "\n",
        "churn = df['Churn']\n",
        "\n",
        "# Split data into train and test data taking into account the variable Churn is highly skewed:\n",
        "train_dataset, test_dataset = train_test_split(df, test_size=0.2, stratify=churn, random_state=42)\n",
        "\n",
        "directory = 'train'\n",
        "if not os.path.exists(directory):\n",
        "    os.makedirs(directory)\n",
        "    \n",
        "directory = 'test'\n",
        "if not os.path.exists(directory):\n",
        "    os.makedirs(directory)\n",
        "\n",
        "# Export data as csv\n",
        "train_dataset.to_csv(\"train_data.csv\", index=False)\n",
        "test_dataset.to_csv(\"test_data.csv\", index=False)\n",
        "\n",
        "# # Upload data to the datastore\n",
        "datastore = ws.get_default_datastore()\n",
        "datastore.upload(src_dir='./train', target_path = experiment_name)\n",
        "datastore.upload(src_dir='./test', target_path = experiment_name)\n",
        "print('Data uploaded to DataStore')\n",
        "\n",
        "csv_path_train = [(datastore, experiment_name+'/train_data.csv')]\n",
        "csv_path_test = [(datastore, experiment_name+'/test_data.csv')]\n",
        "\n",
        "train_data = Dataset.Tabular.from_delimited_files(path=csv_path_train)\n",
        "test_data = Dataset.Tabular.from_delimited_files(path=csv_path_test)\n",
        "\n",
        "display(train_data.to_pandas_dataframe().head())\n",
        "display(test_data.to_pandas_dataframe().head())"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Uploading an estimated of 1 files\nTarget already exists. Skipping upload for telco-customer-churn/train_data.csv\nUploaded 0 files\nUploading an estimated of 1 files\nTarget already exists. Skipping upload for telco-customer-churn/test_data.csv\nUploaded 0 files\nData uploaded to DataStore\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "   gender  SeniorCitizen  Partner  Dependents  tenure  PhoneService  \\\n0    Male              0    False       False      35         False   \n1    Male              0     True        True      15          True   \n2    Male              0     True        True      13         False   \n3  Female              0     True       False      26          True   \n4    Male              0     True        True       1          True   \n\n      MultipleLines InternetService OnlineSecurity OnlineBackup  \\\n0  No phone service             DSL             No           No   \n1                No     Fiber optic            Yes           No   \n2  No phone service             DSL            Yes          Yes   \n3                No             DSL             No          Yes   \n4                No             DSL             No           No   \n\n  DeviceProtection TechSupport StreamingTV StreamingMovies        Contract  \\\n0              Yes          No         Yes             Yes  Month-to-month   \n1               No          No          No              No  Month-to-month   \n2               No         Yes          No              No        Two year   \n3              Yes          No         Yes             Yes        Two year   \n4               No          No          No              No  Month-to-month   \n\n   PaperlessBilling            PaymentMethod  MonthlyCharges  TotalCharges  \\\n0             False         Electronic check           49.20       1701.65   \n1             False             Mailed check           75.10       1151.55   \n2             False             Mailed check           40.55        590.35   \n3              True  Credit card (automatic)           73.50       1905.70   \n4             False         Electronic check           44.55         44.55   \n\n   Churn  \n0  False  \n1  False  \n2  False  \n3  False  \n4  False  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gender</th>\n      <th>SeniorCitizen</th>\n      <th>Partner</th>\n      <th>Dependents</th>\n      <th>tenure</th>\n      <th>PhoneService</th>\n      <th>MultipleLines</th>\n      <th>InternetService</th>\n      <th>OnlineSecurity</th>\n      <th>OnlineBackup</th>\n      <th>DeviceProtection</th>\n      <th>TechSupport</th>\n      <th>StreamingTV</th>\n      <th>StreamingMovies</th>\n      <th>Contract</th>\n      <th>PaperlessBilling</th>\n      <th>PaymentMethod</th>\n      <th>MonthlyCharges</th>\n      <th>TotalCharges</th>\n      <th>Churn</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Male</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>35</td>\n      <td>False</td>\n      <td>No phone service</td>\n      <td>DSL</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Month-to-month</td>\n      <td>False</td>\n      <td>Electronic check</td>\n      <td>49.20</td>\n      <td>1701.65</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Male</td>\n      <td>0</td>\n      <td>True</td>\n      <td>True</td>\n      <td>15</td>\n      <td>True</td>\n      <td>No</td>\n      <td>Fiber optic</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Month-to-month</td>\n      <td>False</td>\n      <td>Mailed check</td>\n      <td>75.10</td>\n      <td>1151.55</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Male</td>\n      <td>0</td>\n      <td>True</td>\n      <td>True</td>\n      <td>13</td>\n      <td>False</td>\n      <td>No phone service</td>\n      <td>DSL</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Two year</td>\n      <td>False</td>\n      <td>Mailed check</td>\n      <td>40.55</td>\n      <td>590.35</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Female</td>\n      <td>0</td>\n      <td>True</td>\n      <td>False</td>\n      <td>26</td>\n      <td>True</td>\n      <td>No</td>\n      <td>DSL</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Two year</td>\n      <td>True</td>\n      <td>Credit card (automatic)</td>\n      <td>73.50</td>\n      <td>1905.70</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Male</td>\n      <td>0</td>\n      <td>True</td>\n      <td>True</td>\n      <td>1</td>\n      <td>True</td>\n      <td>No</td>\n      <td>DSL</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Month-to-month</td>\n      <td>False</td>\n      <td>Electronic check</td>\n      <td>44.55</td>\n      <td>44.55</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "   gender  SeniorCitizen  Partner  Dependents  tenure  PhoneService  \\\n0    Male              0     True        True      72          True   \n1  Female              1    False       False       8          True   \n2  Female              0     True        True      41          True   \n3    Male              0     True       False      18          True   \n4  Female              0     True       False      72          True   \n\n  MultipleLines InternetService OnlineSecurity OnlineBackup DeviceProtection  \\\n0           Yes     Fiber optic            Yes          Yes              Yes   \n1           Yes     Fiber optic             No           No               No   \n2           Yes             DSL            Yes          Yes              Yes   \n3            No     Fiber optic             No           No              Yes   \n4           Yes             DSL            Yes          Yes              Yes   \n\n  TechSupport StreamingTV StreamingMovies        Contract  PaperlessBilling  \\\n0         Yes         Yes             Yes        Two year              True   \n1         Yes         Yes             Yes  Month-to-month              True   \n2          No         Yes              No        One year              True   \n3         Yes          No              No  Month-to-month             False   \n4          No         Yes             Yes        Two year              True   \n\n             PaymentMethod  MonthlyCharges  TotalCharges  Churn  \n0  Credit card (automatic)          114.05       8468.20  False  \n1  Credit card (automatic)          100.15        908.55  False  \n2  Credit card (automatic)           78.35       3211.20  False  \n3         Electronic check           78.20       1468.75  False  \n4  Credit card (automatic)           82.65       5919.35  False  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gender</th>\n      <th>SeniorCitizen</th>\n      <th>Partner</th>\n      <th>Dependents</th>\n      <th>tenure</th>\n      <th>PhoneService</th>\n      <th>MultipleLines</th>\n      <th>InternetService</th>\n      <th>OnlineSecurity</th>\n      <th>OnlineBackup</th>\n      <th>DeviceProtection</th>\n      <th>TechSupport</th>\n      <th>StreamingTV</th>\n      <th>StreamingMovies</th>\n      <th>Contract</th>\n      <th>PaperlessBilling</th>\n      <th>PaymentMethod</th>\n      <th>MonthlyCharges</th>\n      <th>TotalCharges</th>\n      <th>Churn</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Male</td>\n      <td>0</td>\n      <td>True</td>\n      <td>True</td>\n      <td>72</td>\n      <td>True</td>\n      <td>Yes</td>\n      <td>Fiber optic</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Two year</td>\n      <td>True</td>\n      <td>Credit card (automatic)</td>\n      <td>114.05</td>\n      <td>8468.20</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Female</td>\n      <td>1</td>\n      <td>False</td>\n      <td>False</td>\n      <td>8</td>\n      <td>True</td>\n      <td>Yes</td>\n      <td>Fiber optic</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Month-to-month</td>\n      <td>True</td>\n      <td>Credit card (automatic)</td>\n      <td>100.15</td>\n      <td>908.55</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Female</td>\n      <td>0</td>\n      <td>True</td>\n      <td>True</td>\n      <td>41</td>\n      <td>True</td>\n      <td>Yes</td>\n      <td>DSL</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>One year</td>\n      <td>True</td>\n      <td>Credit card (automatic)</td>\n      <td>78.35</td>\n      <td>3211.20</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Male</td>\n      <td>0</td>\n      <td>True</td>\n      <td>False</td>\n      <td>18</td>\n      <td>True</td>\n      <td>No</td>\n      <td>Fiber optic</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Month-to-month</td>\n      <td>False</td>\n      <td>Electronic check</td>\n      <td>78.20</td>\n      <td>1468.75</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Female</td>\n      <td>0</td>\n      <td>True</td>\n      <td>False</td>\n      <td>72</td>\n      <td>True</td>\n      <td>Yes</td>\n      <td>DSL</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Two year</td>\n      <td>True</td>\n      <td>Credit card (automatic)</td>\n      <td>82.65</td>\n      <td>5919.35</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 47,
      "metadata": {
        "gather": {
          "logged": 1636321162743
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Cluster Provisioning\n"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core.compute import ComputeTarget, AmlCompute\n",
        "from azureml.core.compute_target import ComputeTargetException\n",
        "\n",
        "# TODO: Create compute cluster\n",
        "# Use vm_size = \"Standard_D2_V2\" in your provisioning configuration.\n",
        "# max_nodes should be no greater than 4.\n",
        "\n",
        "### YOUR CODE HERE ###\n",
        "\n",
        "cluster_name = \"cluster-vhcg\"\n",
        "# verify that the cluster does not exist already\n",
        "try:\n",
        "    cpu_cluster = ComputeTarget(workspace=ws, name = cluster_name)\n",
        "    print('Found existing cluster, use it.')\n",
        "except ComputeTargetException:\n",
        "    compute_config = AmlCompute.provisioning_configuration(vm_size='Standard_D2_V2', max_nodes = 4, idle_seconds_before_scaledown=120)\n",
        "    cpu_cluster = ComputeTarget.create(ws, cluster_name, compute_config)\n",
        "\n",
        "cpu_cluster.wait_for_completion(show_output=True)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Found existing cluster, use it.\nSucceeded\nAmlCompute wait for completion finished\n\nMinimum number of nodes requested have been provisioned\n"
        }
      ],
      "execution_count": 48,
      "metadata": {
        "gather": {
          "logged": 1636321172776
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## AutoML Configuration\n",
        "\n",
        "TODO: Explain why you chose the automl settings and cofiguration you used below."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# TODO: Put your automl config here\n",
        "automl_config = AutoMLConfig(\n",
        "                                compute_target=cluster_name,\n",
        "                                task='classification',\n",
        "                                training_data=train_data,\n",
        "                                test_data = test_data,\n",
        "                                label_column_name='Churn',\n",
        "                                # n_cross_validations=10,\n",
        "                                # validation_size=0.2,\n",
        "                                primary_metric='AUC_weighted',\n",
        "                                experiment_timeout_minutes=30,\n",
        "                                max_concurrent_iterations=5,\n",
        "                                max_cores_per_iteration=-1, \n",
        "                                featurization= 'auto',\n",
        "                                debug_log = \"automl_errors.log\",                                \n",
        "\n",
        "                                )"
      ],
      "outputs": [],
      "execution_count": 49,
      "metadata": {
        "gather": {
          "logged": 1636321257382
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##  Create AutoML Pipeline"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\r\n",
        "from azureml.pipeline.core import PipelineData, TrainingOutput\r\n",
        "\r\n",
        "ds = ws.get_default_datastore()\r\n",
        "metrics_output_name = 'metrics_output'\r\n",
        "best_model_output_name = 'best_model_output'\r\n",
        "\r\n",
        "metrics_data = PipelineData(name='metrics_data',\r\n",
        "                           datastore=ds,\r\n",
        "                           pipeline_output_name=metrics_output_name,\r\n",
        "                           training_output=TrainingOutput(type='Metrics'))\r\n",
        "model_data = PipelineData(name='model_data',\r\n",
        "                           datastore=ds,\r\n",
        "                           pipeline_output_name=best_model_output_name,\r\n",
        "                           training_output=TrainingOutput(type='Model'))"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Create AutoMLStep"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "automl_step = AutoMLStep(\r\n",
        "    name='automl_module',\r\n",
        "    automl_config=automl_config,\r\n",
        "    outputs=[metrics_data, model_data],\r\n",
        "    allow_reuse=True)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.pipeline.core import Pipeline\r\n",
        "pipeline = Pipeline(\r\n",
        "    description=\"pipeline_with_automlstep\",\r\n",
        "    workspace=ws,    \r\n",
        "    steps=[automl_step])"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pipeline_run = experiment.submit(pipeline)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.widgets import RunDetails\r\n",
        "RunDetails(pipeline_run).show()"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pipeline_run.wait_for_completion()"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Examine Results"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Retrieve the metrics of all child runs"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "metrics_output = pipeline_run.get_pipeline_output(metrics_output_name)\r\n",
        "num_file_downloaded = metrics_output.download('.', show_progress=True)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import json\r\n",
        "with open(metrics_output._path_on_datastore) as f:\r\n",
        "    metrics_output_result = f.read()\r\n",
        "    \r\n",
        "deserialized_metrics_output = json.loads(metrics_output_result)\r\n",
        "df = pd.DataFrame(deserialized_metrics_output)\r\n",
        "df"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\r\n",
        "Retrieve the Best Model"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\r\n",
        "# Retrieve best model from Pipeline Run\r\n",
        "best_model_output = pipeline_run.get_pipeline_output(best_model_output_name)\r\n",
        "num_file_downloaded = best_model_output.download('.', show_progress=True)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle\r\n",
        "\r\n",
        "with open(best_model_output._path_on_datastore, \"rb\" ) as f:\r\n",
        "    best_model = pickle.load(f)\r\n",
        "best_model"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "best_model.steps"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Test the model"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Load Test Data"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\r\n",
        "dataset_test = test_data\r\n",
        "df_test = dataset_test.to_pandas_dataframe()\r\n",
        "df_test = df_test[pd.notnull(df_test['Churn'])]\r\n",
        "\r\n",
        "y_test = df_test['Churn']\r\n",
        "X_test = df_test.drop(['y'], axis=1)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Testing Our Best Fitted Model"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\r\n",
        "from sklearn.metrics import confusion_matrix\r\n",
        "ypred = best_model.predict(X_test)\r\n",
        "cm = confusion_matrix(y_test, ypred)\r\n"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualize the confusion matrix\r\n",
        "pd.DataFrame(cm).style.background_gradient(cmap='Blues', low=0, high=0.9)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\r\n",
        "## Publish and run from REST endpoint"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\r\n",
        "published_pipeline = pipeline_run.publish_pipeline(\r\n",
        "    name=\"Bankmarketing Train\", description=\"Training bankmarketing pipeline\", version=\"1.0\")\r\n",
        "\r\n",
        "published_pipeline"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core.authentication import InteractiveLoginAuthentication\r\n",
        "\r\n",
        "interactive_auth = InteractiveLoginAuthentication()\r\n",
        "auth_header = interactive_auth.get_authentication_header()"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\r\n",
        "\r\n",
        "rest_endpoint = published_pipeline.endpoint\r\n",
        "response = requests.post(rest_endpoint, \r\n",
        "                         headers=auth_header, \r\n",
        "                         json={\"ExperimentName\": \"pipeline-rest-endpoint\"}\r\n",
        "                        )"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "try:\r\n",
        "    response.raise_for_status()\r\n",
        "except Exception:    \r\n",
        "    raise Exception(\"Received bad response from the endpoint: {}\\n\"\r\n",
        "                    \"Response Code: {}\\n\"\r\n",
        "                    \"Headers: {}\\n\"\r\n",
        "                    \"Content: {}\".format(rest_endpoint, response.status_code, response.headers, response.content))\r\n",
        "\r\n",
        "run_id = response.json().get('Id')\r\n",
        "print('Submitted pipeline run: ', run_id)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\r\n",
        "from azureml.pipeline.core.run import PipelineRun\r\n",
        "from azureml.widgets import RunDetails\r\n",
        "\r\n",
        "published_pipeline_run = PipelineRun(ws.experiments[\"pipeline-rest-endpoint\"], run_id)\r\n",
        "RunDetails(published_pipeline_run).show()"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# TODO: Submit your experiment\n",
        "from azureml.widgets import RunDetails\n",
        "run = experiment.submit(config=automl_config, show_output=True)\n",
        "RunDetails(run).show()\n",
        "run.wait_for_completion()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Submitting remote run.\nNo run_configuration provided, running on cluster-vhcg with default configuration\nRunning on remote compute: cluster-vhcg\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<IPython.core.display.HTML object>",
            "text/html": "<table style=\"width:100%\"><tr><th>Experiment</th><th>Id</th><th>Type</th><th>Status</th><th>Details Page</th><th>Docs Page</th></tr><tr><td>telco-customer-churn</td><td>AutoML_6914179d-c21b-43ef-968a-9564792a6b75</td><td>automl</td><td>NotStarted</td><td><a href=\"https://ml.azure.com/runs/AutoML_6914179d-c21b-43ef-968a-9564792a6b75?wsid=/subscriptions/61c5c3f0-6dc7-4ed9-a7f3-c704b20e3b30/resourcegroups/aml-quickstarts-162961/workspaces/quick-starts-ws-162961&amp;tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\" target=\"_blank\" rel=\"noopener\">Link to Azure Machine Learning studio</a></td><td><a href=\"https://docs.microsoft.com/en-us/python/api/overview/azure/ml/intro?view=azure-ml-py\" target=\"_blank\" rel=\"noopener\">Link to Documentation</a></td></tr></table>"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "\nCurrent status: FeaturesGeneration. Generating features for the dataset.\nCurrent status: DatasetCrossValidationSplit. Generating individually featurized CV splits.\nCurrent status: ModelSelection. Beginning model selection.\n\n****************************************************************************************************\nDATA GUARDRAILS: \n\nTYPE:         Cross validation\nSTATUS:       DONE\nDESCRIPTION:  Each iteration of the trained model was validated through cross-validation.\n              \nDETAILS:      \n+---------------------------------+\n|Number of folds                  |\n+=================================+\n|3                                |\n+---------------------------------+\n\n****************************************************************************************************\n\nTYPE:         Class balancing detection\nSTATUS:       PASSED\nDESCRIPTION:  Your inputs were analyzed, and all classes are balanced in your training data.\n              Learn more about imbalanced data: https://aka.ms/AutomatedMLImbalancedData\n\n****************************************************************************************************\n\nTYPE:         Missing feature values imputation\nSTATUS:       DONE\nDESCRIPTION:  If the missing values are expected, let the run complete. Otherwise cancel the current run and use a script to customize the handling of missing feature values that may be more appropriate based on the data type and business requirement.\n              Learn more about missing value imputation: https://aka.ms/AutomatedMLFeaturization\nDETAILS:      \n+---------------------------------+---------------------------------+---------------------------------+\n|Column name                      |Missing value count              |Imputation type                  |\n+=================================+=================================+=================================+\n|TotalCharges                     |8                                |mean                             |\n+---------------------------------+---------------------------------+---------------------------------+\n\n****************************************************************************************************\n\nTYPE:         High cardinality feature detection\nSTATUS:       PASSED\nDESCRIPTION:  Your inputs were analyzed, and no high cardinality features were detected.\n              Learn more about high cardinality feature handling: https://aka.ms/AutomatedMLFeaturization\n\n****************************************************************************************************\n\n****************************************************************************************************\nITERATION: The iteration being evaluated.\nPIPELINE: A summary description of the pipeline being evaluated.\nDURATION: Time taken for the current iteration.\nMETRIC: The result of computing score on the fitted pipeline.\nBEST: The best observed score thus far.\n****************************************************************************************************\n\n ITERATION   PIPELINE                                       DURATION      METRIC      BEST\n         1   MaxAbsScaler XGBoostClassifier                 0:00:38       0.8484    0.8484\n         0   MaxAbsScaler LightGBM                          0:01:09       0.8390    0.8484\n         4   StandardScalerWrapper LightGBM                 0:01:38       0.8485    0.8485\n         3   MaxAbsScaler RandomForest                      0:02:06       0.8433    0.8485\n         2   MaxAbsScaler ExtremeRandomTrees                0:02:36       0.8376    0.8485\n         5   SparseNormalizer XGBoostClassifier             0:02:27       0.8415    0.8485\n         8   SparseNormalizer XGBoostClassifier             0:02:24       0.8323    0.8485\n         9   MaxAbsScaler RandomForest                      0:02:21       0.8377    0.8485\n        10   SparseNormalizer LightGBM                      0:03:06       0.8471    0.8485\n        11   MaxAbsScaler ExtremeRandomTrees                0:02:34       0.8419    0.8485\n         7   StandardScalerWrapper XGBoostClassifier        0:03:44       0.8334    0.8485\n        12   StandardScalerWrapper XGBoostClassifier        0:03:35       0.8455    0.8485\n         6   SparseNormalizer RandomForest                  0:04:21       0.8482    0.8485\n        13   StandardScalerWrapper ExtremeRandomTrees       0:02:17       0.8364    0.8485\n        14   StandardScalerWrapper RandomForest             0:01:59       0.8266    0.8485\n        15   MaxAbsScaler LightGBM                          0:02:14       0.8480    0.8485\n        16   MaxAbsScaler LogisticRegression                0:02:12       0.8461    0.8485\n        17   StandardScalerWrapper ExtremeRandomTrees       0:02:05       0.8422    0.8485\n        18   StandardScalerWrapper XGBoostClassifier        0:02:08       0.8417    0.8485\n        19   MaxAbsScaler ExtremeRandomTrees                0:03:28       0.8358    0.8485\n        20   MaxAbsScaler LogisticRegression                0:02:00       0.8464    0.8485\n        21   StandardScalerWrapper XGBoostClassifier        0:01:56       0.8377    0.8485\n        22   StandardScalerWrapper XGBoostClassifier        0:02:21       0.8464    0.8485\n        23   MaxAbsScaler RandomForest                      0:03:33       0.8404    0.8485\n        24   StandardScalerWrapper LightGBM                 0:01:56       0.8491    0.8491\n        25   SparseNormalizer XGBoostClassifier             0:01:56       0.8440    0.8491\n        26   StandardScalerWrapper LightGBM                 0:02:24       0.8506    0.8506\n        27   MaxAbsScaler LightGBM                          0:03:29       0.8487    0.8506\n        28   SparseNormalizer XGBoostClassifier             0:01:59       0.8363    0.8506\n        29   StandardScalerWrapper XGBoostClassifier        0:01:57       0.8442    0.8506\n        30   TruncatedSVDWrapper LightGBM                   0:02:23       0.8411    0.8506\n        31   TruncatedSVDWrapper XGBoostClassifier          0:03:30       0.8242    0.8506\n        32   TruncatedSVDWrapper XGBoostClassifier          0:02:03       0.8327    0.8506\n        34   StandardScalerWrapper LogisticRegression       0:01:51       0.8424    0.8506\n        33   StandardScalerWrapper LogisticRegression       0:02:24       0.8454    0.8506\n        35   SparseNormalizer LightGBM                      0:03:27       0.8452    0.8506\n        37   SparseNormalizer LightGBM                      0:01:56       0.8474    0.8506\n        36   StandardScalerWrapper GradientBoosting         0:02:02       0.8379    0.8506\n        38   StandardScalerWrapper XGBoostClassifier        0:02:24       0.8488    0.8506\n        39   MaxAbsScaler LightGBM                          0:03:26       0.8483    0.8506\n        40   TruncatedSVDWrapper LightGBM                   0:01:58       0.8145    0.8506\n        41   MaxAbsScaler SGD                               0:01:54       0.8330    0.8506\n        42                                                  0:01:57          nan    0.8506\n        43                                                  0:01:30          nan    0.8506\n        44   StandardScalerWrapper ExtremeRandomTrees       0:00:43       0.8288    0.8506\n        45    VotingEnsemble                                0:01:41       0.8528    0.8528\n        46    StackEnsemble                                 0:01:43       0.8520    0.8528\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "_AutoMLWidget(widget_settings={'childWidgetDisplay': 'popup', 'send_telemetry': False, 'log_level': 'INFO', 's…",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "8f51e39140ee460ab53503092aa0385f"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "application/aml.mini.widget.v1": "{\"status\": \"Completed\", \"workbench_run_details_uri\": \"https://ml.azure.com/runs/AutoML_6914179d-c21b-43ef-968a-9564792a6b75?wsid=/subscriptions/61c5c3f0-6dc7-4ed9-a7f3-c704b20e3b30/resourcegroups/aml-quickstarts-162961/workspaces/quick-starts-ws-162961&tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"run_properties\": {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"created_utc\": \"2021-11-07T21:41:25.505098Z\", \"properties\": {\"num_iterations\": \"1000\", \"training_type\": \"TrainFull\", \"acquisition_function\": \"EI\", \"primary_metric\": \"AUC_weighted\", \"train_split\": \"0\", \"acquisition_parameter\": \"0\", \"num_cross_validation\": null, \"target\": \"cluster-vhcg\", \"AMLSettingsJsonString\": \"{\\\"path\\\":null,\\\"name\\\":\\\"telco-customer-churn\\\",\\\"subscription_id\\\":\\\"61c5c3f0-6dc7-4ed9-a7f3-c704b20e3b30\\\",\\\"resource_group\\\":\\\"aml-quickstarts-162961\\\",\\\"workspace_name\\\":\\\"quick-starts-ws-162961\\\",\\\"region\\\":\\\"southcentralus\\\",\\\"compute_target\\\":\\\"cluster-vhcg\\\",\\\"spark_service\\\":null,\\\"azure_service\\\":\\\"remote\\\",\\\"many_models\\\":false,\\\"pipeline_fetch_max_batch_size\\\":1,\\\"enable_batch_run\\\":false,\\\"enable_run_restructure\\\":false,\\\"start_auxiliary_runs_before_parent_complete\\\":true,\\\"enable_code_generation\\\":false,\\\"iterations\\\":1000,\\\"primary_metric\\\":\\\"AUC_weighted\\\",\\\"task_type\\\":\\\"classification\\\",\\\"data_script\\\":null,\\\"test_size\\\":0.0,\\\"test_include_predictions_only\\\":false,\\\"validation_size\\\":0.0,\\\"n_cross_validations\\\":null,\\\"y_min\\\":null,\\\"y_max\\\":null,\\\"num_classes\\\":null,\\\"featurization\\\":\\\"auto\\\",\\\"_ignore_package_version_incompatibilities\\\":false,\\\"is_timeseries\\\":false,\\\"max_cores_per_iteration\\\":-1,\\\"max_concurrent_iterations\\\":5,\\\"iteration_timeout_minutes\\\":null,\\\"mem_in_mb\\\":null,\\\"enforce_time_on_windows\\\":false,\\\"experiment_timeout_minutes\\\":30,\\\"experiment_exit_score\\\":null,\\\"whitelist_models\\\":null,\\\"blacklist_algos\\\":[\\\"TensorFlowLinearClassifier\\\",\\\"TensorFlowDNN\\\"],\\\"supported_models\\\":[\\\"XGBoostClassifier\\\",\\\"LinearSVM\\\",\\\"KNN\\\",\\\"DecisionTree\\\",\\\"GradientBoosting\\\",\\\"BernoulliNaiveBayes\\\",\\\"TensorFlowDNN\\\",\\\"MultinomialNaiveBayes\\\",\\\"TensorFlowLinearClassifier\\\",\\\"LightGBM\\\",\\\"LogisticRegression\\\",\\\"AveragedPerceptronClassifier\\\",\\\"SVM\\\",\\\"SGD\\\",\\\"ExtremeRandomTrees\\\",\\\"RandomForest\\\"],\\\"private_models\\\":[],\\\"auto_blacklist\\\":true,\\\"blacklist_samples_reached\\\":false,\\\"exclude_nan_labels\\\":true,\\\"verbosity\\\":20,\\\"_debug_log\\\":\\\"azureml_automl.log\\\",\\\"show_warnings\\\":false,\\\"model_explainability\\\":true,\\\"service_url\\\":null,\\\"sdk_url\\\":null,\\\"sdk_packages\\\":null,\\\"enable_onnx_compatible_models\\\":false,\\\"enable_split_onnx_featurizer_estimator_models\\\":false,\\\"vm_type\\\":\\\"STANDARD_D2_V2\\\",\\\"telemetry_verbosity\\\":20,\\\"send_telemetry\\\":true,\\\"enable_dnn\\\":false,\\\"scenario\\\":\\\"SDK-1.13.0\\\",\\\"environment_label\\\":null,\\\"save_mlflow\\\":false,\\\"force_text_dnn\\\":false,\\\"enable_feature_sweeping\\\":true,\\\"enable_early_stopping\\\":true,\\\"early_stopping_n_iters\\\":10,\\\"metrics\\\":null,\\\"enable_metric_confidence\\\":false,\\\"enable_ensembling\\\":true,\\\"enable_stack_ensembling\\\":true,\\\"ensemble_iterations\\\":15,\\\"enable_tf\\\":false,\\\"enable_subsampling\\\":null,\\\"subsample_seed\\\":null,\\\"enable_nimbusml\\\":false,\\\"enable_streaming\\\":false,\\\"force_streaming\\\":false,\\\"track_child_runs\\\":true,\\\"allowed_private_models\\\":[],\\\"label_column_name\\\":\\\"Churn\\\",\\\"weight_column_name\\\":null,\\\"cv_split_column_names\\\":null,\\\"positive_label\\\":null,\\\"enable_local_managed\\\":false,\\\"_local_managed_run_id\\\":null,\\\"cost_mode\\\":1,\\\"lag_length\\\":0,\\\"metric_operation\\\":\\\"maximize\\\",\\\"preprocess\\\":true}\", \"DataPrepJsonString\": \"{\\\\\\\"training_data\\\\\\\": {\\\\\\\"datasetId\\\\\\\": \\\\\\\"de13efab-9983-4223-83ce-7cab5689fb7a\\\\\\\"}, \\\\\\\"test_data\\\\\\\": {\\\\\\\"datasetId\\\\\\\": \\\\\\\"82ab290a-d982-4196-87a6-3a357795dcd6\\\\\\\"}, \\\\\\\"datasets\\\\\\\": 0}\", \"EnableSubsampling\": null, \"runTemplate\": \"AutoML\", \"azureml.runsource\": \"automl\", \"display_task_type\": \"classification\", \"dependencies_versions\": \"{\\\"azureml-widgets\\\": \\\"1.34.0\\\", \\\"azureml-train\\\": \\\"1.34.0\\\", \\\"azureml-train-restclients-hyperdrive\\\": \\\"1.34.0\\\", \\\"azureml-train-core\\\": \\\"1.34.0\\\", \\\"azureml-train-automl\\\": \\\"1.34.0\\\", \\\"azureml-train-automl-runtime\\\": \\\"1.34.0\\\", \\\"azureml-train-automl-client\\\": \\\"1.34.0\\\", \\\"azureml-tensorboard\\\": \\\"1.34.0\\\", \\\"azureml-telemetry\\\": \\\"1.34.0\\\", \\\"azureml-sdk\\\": \\\"1.34.0\\\", \\\"azureml-samples\\\": \\\"0+unknown\\\", \\\"azureml-responsibleai\\\": \\\"1.34.0\\\", \\\"azureml-pipeline\\\": \\\"1.34.0\\\", \\\"azureml-pipeline-steps\\\": \\\"1.34.0\\\", \\\"azureml-pipeline-core\\\": \\\"1.34.0\\\", \\\"azureml-opendatasets\\\": \\\"1.34.0\\\", \\\"azureml-mlflow\\\": \\\"1.34.0\\\", \\\"azureml-interpret\\\": \\\"1.34.0\\\", \\\"azureml-inference-server-http\\\": \\\"0.3.1\\\", \\\"azureml-explain-model\\\": \\\"1.34.0\\\", \\\"azureml-defaults\\\": \\\"1.34.0\\\", \\\"azureml-dataset-runtime\\\": \\\"1.34.0\\\", \\\"azureml-dataprep\\\": \\\"2.22.2\\\", \\\"azureml-dataprep-rslex\\\": \\\"1.20.1\\\", \\\"azureml-dataprep-native\\\": \\\"38.0.0\\\", \\\"azureml-datadrift\\\": \\\"1.34.0\\\", \\\"azureml-core\\\": \\\"1.34.0\\\", \\\"azureml-contrib-services\\\": \\\"1.34.0\\\", \\\"azureml-contrib-server\\\": \\\"1.34.0\\\", \\\"azureml-contrib-reinforcementlearning\\\": \\\"1.34.0\\\", \\\"azureml-contrib-pipeline-steps\\\": \\\"1.34.0\\\", \\\"azureml-contrib-notebook\\\": \\\"1.34.0\\\", \\\"azureml-contrib-fairness\\\": \\\"1.34.0\\\", \\\"azureml-contrib-dataset\\\": \\\"1.34.0\\\", \\\"azureml-contrib-automl-pipeline-steps\\\": \\\"1.34.0\\\", \\\"azureml-cli-common\\\": \\\"1.34.0\\\", \\\"azureml-automl-runtime\\\": \\\"1.34.0\\\", \\\"azureml-automl-dnn-nlp\\\": \\\"1.34.0\\\", \\\"azureml-automl-core\\\": \\\"1.34.0\\\", \\\"azureml-accel-models\\\": \\\"1.34.0\\\"}\", \"_aml_system_scenario_identification\": \"Remote.Parent\", \"ClientType\": \"SDK\", \"environment_cpu_name\": \"AzureML-AutoML\", \"environment_cpu_label\": \"prod\", \"environment_gpu_name\": \"AzureML-AutoML-GPU\", \"environment_gpu_label\": \"prod\", \"root_attribution\": \"automl\", \"attribution\": \"AutoML\", \"Orchestrator\": \"AutoML\", \"CancelUri\": \"https://southcentralus.api.azureml.ms/jasmine/v1.0/subscriptions/61c5c3f0-6dc7-4ed9-a7f3-c704b20e3b30/resourceGroups/aml-quickstarts-162961/providers/Microsoft.MachineLearningServices/workspaces/quick-starts-ws-162961/experimentids/fcd5bab4-fec7-4d6a-9843-df4874a48643/cancel/AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"ClientSdkVersion\": \"1.35.1\", \"snapshotId\": \"00000000-0000-0000-0000-000000000000\", \"SetupRunId\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_setup\", \"SetupRunContainerId\": \"dcid.AutoML_6914179d-c21b-43ef-968a-9564792a6b75_setup\", \"FeaturizationRunJsonPath\": \"featurizer_container.json\", \"FeaturizationRunId\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_featurize\", \"ProblemInfoJsonString\": \"{\\\"dataset_num_categorical\\\": 0, \\\"is_sparse\\\": true, \\\"subsampling\\\": false, \\\"has_extra_col\\\": true, \\\"dataset_classes\\\": 2, \\\"dataset_features\\\": 40, \\\"dataset_samples\\\": 5634, \\\"single_frequency_class_detected\\\": false}\", \"ModelExplainRunId\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_ModelExplain\", \"azureml.git.repository_uri\": \"https://github.com/vhcg77/nd00333-capstone.git\", \"mlflow.source.git.repoURL\": \"https://github.com/vhcg77/nd00333-capstone.git\", \"azureml.git.branch\": \"master\", \"mlflow.source.git.branch\": \"master\", \"azureml.git.commit\": \"9d7f0e14371856363c13e7b6feba72e54bac9f66\", \"mlflow.source.git.commit\": \"9d7f0e14371856363c13e7b6feba72e54bac9f66\", \"azureml.git.dirty\": \"True\"}, \"tags\": {\"model_explain_run\": \"best_run\", \"_aml_system_azureml.automlComponent\": \"AutoML\", \"pipeline_id\": \"\", \"score\": \"\", \"predicted_cost\": \"\", \"fit_time\": \"\", \"training_percent\": \"\", \"iteration\": \"\", \"run_preprocessor\": \"\", \"run_algorithm\": \"\", \"dynamic_whitelisting_iterations\": \"<24>;<30>;<35>;<40>;\", \"_aml_system_azureml.automl_early_exit_message\": \"No scores improved over last 20 iterations, so experiment stopped early. This early stopping behavior can be disabled by setting enable_early_stopping = False in AutoMLConfig for notebook/python SDK runs.\", \"automl_best_child_run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_45\", \"model_explain_best_run_child_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_45\"}, \"end_time_utc\": \"2021-11-07T22:13:17.559844Z\", \"status\": \"Completed\", \"log_files\": {}, \"log_groups\": [], \"run_duration\": \"0:31:52\", \"run_number\": \"1\", \"run_queued_details\": {\"status\": \"Completed\", \"details\": null}}, \"child_runs\": [{\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_setup\", \"run_number\": 2, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-11-07T21:45:47.579955Z\", \"end_time\": \"2021-11-07T21:46:24.890252Z\", \"created_time\": \"2021-11-07T21:41:40.149601Z\", \"created_time_dt\": \"2021-11-07T21:41:40.149601Z\", \"duration\": \"0:04:44\", \"iteration\": null, \"goal\": null, \"run_name\": \"Completed\", \"run_properties\": null}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_featurize\", \"run_number\": 3, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"automl.featurization\", \"training_percent\": null, \"start_time\": \"2021-11-07T21:46:25.712226Z\", \"end_time\": \"2021-11-07T21:48:01.956929Z\", \"created_time\": \"2021-11-07T21:46:25.357061Z\", \"created_time_dt\": \"2021-11-07T21:46:25.357061Z\", \"duration\": \"0:01:36\", \"iteration\": null, \"goal\": null, \"run_name\": \"Completed\", \"run_properties\": null}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_0\", \"run_number\": 5, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:48:03.081483Z\", \"end_time\": \"2021-11-07T21:49:12.234955Z\", \"created_time\": \"2021-11-07T21:48:03.081483Z\", \"created_time_dt\": \"2021-11-07T21:48:03.081483Z\", \"duration\": \"0:01:09\", \"iteration\": \"0\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, LightGBM\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.83895386, \"best_metric\": 0.83895386}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_2\", \"run_number\": 6, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:48:03.101919Z\", \"end_time\": \"2021-11-07T21:50:39.289167Z\", \"created_time\": \"2021-11-07T21:48:03.101919Z\", \"created_time_dt\": \"2021-11-07T21:48:03.101919Z\", \"duration\": \"0:02:36\", \"iteration\": \"2\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, ExtremeRandomTrees\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.83759243, \"best_metric\": 0.84842525}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_3\", \"run_number\": 7, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:48:03.090889Z\", \"end_time\": \"2021-11-07T21:50:08.821702Z\", \"created_time\": \"2021-11-07T21:48:03.090889Z\", \"created_time_dt\": \"2021-11-07T21:48:03.090889Z\", \"duration\": \"0:02:05\", \"iteration\": \"3\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, RandomForest\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.84327721, \"best_metric\": 0.84842525}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_4\", \"run_number\": 8, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:48:03.120736Z\", \"end_time\": \"2021-11-07T21:49:41.019935Z\", \"created_time\": \"2021-11-07T21:48:03.120736Z\", \"created_time_dt\": \"2021-11-07T21:48:03.120736Z\", \"duration\": \"0:01:37\", \"iteration\": \"4\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, LightGBM\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=True\\n\", \"primary_metric\": 0.84854551, \"best_metric\": 0.84854551}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_1\", \"run_number\": 9, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:48:03.113401Z\", \"end_time\": \"2021-11-07T21:48:40.678594Z\", \"created_time\": \"2021-11-07T21:48:03.113401Z\", \"created_time_dt\": \"2021-11-07T21:48:03.113401Z\", \"duration\": \"0:00:37\", \"iteration\": \"1\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, XGBoostClassifier\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.84842525, \"best_metric\": 0.84842525}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_5\", \"run_number\": 10, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:48:42.114416Z\", \"end_time\": \"2021-11-07T21:51:09.574753Z\", \"created_time\": \"2021-11-07T21:48:42.114416Z\", \"created_time_dt\": \"2021-11-07T21:48:42.114416Z\", \"duration\": \"0:02:27\", \"iteration\": \"5\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"SparseNormalizer, XGBoostClassifier\", \"run_properties\": \"copy=True, norm='max'\", \"primary_metric\": 0.84149349, \"best_metric\": 0.84854551}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_6\", \"run_number\": 11, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:52:08.687866Z\", \"end_time\": \"2021-11-07T21:56:30.102875Z\", \"created_time\": \"2021-11-07T21:49:13.901233Z\", \"created_time_dt\": \"2021-11-07T21:49:13.901233Z\", \"duration\": \"0:07:16\", \"iteration\": \"6\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"SparseNormalizer, RandomForest\", \"run_properties\": \"copy=True, norm='l2'\", \"primary_metric\": 0.84818612, \"best_metric\": 0.84854551}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_7\", \"run_number\": 12, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:52:42.559217Z\", \"end_time\": \"2021-11-07T21:56:26.213316Z\", \"created_time\": \"2021-11-07T21:49:44.2196Z\", \"created_time_dt\": \"2021-11-07T21:49:44.2196Z\", \"duration\": \"0:06:41\", \"iteration\": \"7\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, XGBoostClassifier\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.83342619, \"best_metric\": 0.84854551}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_8\", \"run_number\": 13, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:50:11.715681Z\", \"end_time\": \"2021-11-07T21:52:36.022705Z\", \"created_time\": \"2021-11-07T21:50:11.715681Z\", \"created_time_dt\": \"2021-11-07T21:50:11.715681Z\", \"duration\": \"0:02:24\", \"iteration\": \"8\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"SparseNormalizer, XGBoostClassifier\", \"run_properties\": \"copy=True, norm='max'\", \"primary_metric\": 0.83228106, \"best_metric\": 0.84854551}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_9\", \"run_number\": 14, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:50:41.977894Z\", \"end_time\": \"2021-11-07T21:53:02.946398Z\", \"created_time\": \"2021-11-07T21:50:41.977894Z\", \"created_time_dt\": \"2021-11-07T21:50:41.977894Z\", \"duration\": \"0:02:20\", \"iteration\": \"9\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, RandomForest\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.83769557, \"best_metric\": 0.84854551}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_10\", \"run_number\": 15, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:51:33.319842Z\", \"end_time\": \"2021-11-07T21:54:39.547839Z\", \"created_time\": \"2021-11-07T21:51:33.319842Z\", \"created_time_dt\": \"2021-11-07T21:51:33.319842Z\", \"duration\": \"0:03:06\", \"iteration\": \"10\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"SparseNormalizer, LightGBM\", \"run_properties\": \"copy=True, norm='l1'\", \"primary_metric\": 0.84709559, \"best_metric\": 0.84854551}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_11\", \"run_number\": 16, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:52:39.11761Z\", \"end_time\": \"2021-11-07T21:55:13.046482Z\", \"created_time\": \"2021-11-07T21:52:39.11761Z\", \"created_time_dt\": \"2021-11-07T21:52:39.11761Z\", \"duration\": \"0:02:33\", \"iteration\": \"11\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, ExtremeRandomTrees\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.84187757, \"best_metric\": 0.84854551}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_12\", \"run_number\": 17, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:53:05.873927Z\", \"end_time\": \"2021-11-07T21:56:40.718097Z\", \"created_time\": \"2021-11-07T21:53:05.873927Z\", \"created_time_dt\": \"2021-11-07T21:53:05.873927Z\", \"duration\": \"0:03:34\", \"iteration\": \"12\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, XGBoostClassifier\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.8454582, \"best_metric\": 0.84854551}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_13\", \"run_number\": 18, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:54:42.54478Z\", \"end_time\": \"2021-11-07T21:56:59.091621Z\", \"created_time\": \"2021-11-07T21:54:42.54478Z\", \"created_time_dt\": \"2021-11-07T21:54:42.54478Z\", \"duration\": \"0:02:16\", \"iteration\": \"13\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, ExtremeRandomTrees\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.83642755, \"best_metric\": 0.84854551}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_14\", \"run_number\": 19, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:55:16.351097Z\", \"end_time\": \"2021-11-07T21:57:14.968791Z\", \"created_time\": \"2021-11-07T21:55:16.351097Z\", \"created_time_dt\": \"2021-11-07T21:55:16.351097Z\", \"duration\": \"0:01:58\", \"iteration\": \"14\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, RandomForest\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.82664895, \"best_metric\": 0.84854551}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_15\", \"run_number\": 20, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:56:29.071563Z\", \"end_time\": \"2021-11-07T21:58:42.673862Z\", \"created_time\": \"2021-11-07T21:56:29.071563Z\", \"created_time_dt\": \"2021-11-07T21:56:29.071563Z\", \"duration\": \"0:02:13\", \"iteration\": \"15\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, LightGBM\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.84796395, \"best_metric\": 0.84854551}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_16\", \"run_number\": 21, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:56:32.94882Z\", \"end_time\": \"2021-11-07T21:58:45.116206Z\", \"created_time\": \"2021-11-07T21:56:32.94882Z\", \"created_time_dt\": \"2021-11-07T21:56:32.94882Z\", \"duration\": \"0:02:12\", \"iteration\": \"16\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, LogisticRegression\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.84614724, \"best_metric\": 0.84854551}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_17\", \"run_number\": 22, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:56:43.71421Z\", \"end_time\": \"2021-11-07T21:58:49.106204Z\", \"created_time\": \"2021-11-07T21:56:43.71421Z\", \"created_time_dt\": \"2021-11-07T21:56:43.71421Z\", \"duration\": \"0:02:05\", \"iteration\": \"17\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, ExtremeRandomTrees\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=True\\n\", \"primary_metric\": 0.84224722, \"best_metric\": 0.84854551}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_18\", \"run_number\": 23, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:57:02.117554Z\", \"end_time\": \"2021-11-07T21:59:09.758869Z\", \"created_time\": \"2021-11-07T21:57:02.117554Z\", \"created_time_dt\": \"2021-11-07T21:57:02.117554Z\", \"duration\": \"0:02:07\", \"iteration\": \"18\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, XGBoostClassifier\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.8416785, \"best_metric\": 0.84854551}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_19\", \"run_number\": 24, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:57:17.770379Z\", \"end_time\": \"2021-11-07T22:00:45.354416Z\", \"created_time\": \"2021-11-07T21:57:17.770379Z\", \"created_time_dt\": \"2021-11-07T21:57:17.770379Z\", \"duration\": \"0:03:27\", \"iteration\": \"19\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, ExtremeRandomTrees\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.83579426, \"best_metric\": 0.84854551}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_20\", \"run_number\": 25, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:58:45.546539Z\", \"end_time\": \"2021-11-07T22:00:45.752441Z\", \"created_time\": \"2021-11-07T21:58:45.546539Z\", \"created_time_dt\": \"2021-11-07T21:58:45.546539Z\", \"duration\": \"0:02:00\", \"iteration\": \"20\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, LogisticRegression\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.84640352, \"best_metric\": 0.84854551}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_21\", \"run_number\": 26, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:58:49.628386Z\", \"end_time\": \"2021-11-07T22:00:45.145447Z\", \"created_time\": \"2021-11-07T21:58:49.628386Z\", \"created_time_dt\": \"2021-11-07T21:58:49.628386Z\", \"duration\": \"0:01:55\", \"iteration\": \"21\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, XGBoostClassifier\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.83771415, \"best_metric\": 0.84854551}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_22\", \"run_number\": 27, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:58:53.965021Z\", \"end_time\": \"2021-11-07T22:01:14.53593Z\", \"created_time\": \"2021-11-07T21:58:53.965021Z\", \"created_time_dt\": \"2021-11-07T21:58:53.965021Z\", \"duration\": \"0:02:20\", \"iteration\": \"22\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, XGBoostClassifier\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.84642016, \"best_metric\": 0.84854551}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_23\", \"run_number\": 28, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T21:59:13.129162Z\", \"end_time\": \"2021-11-07T22:02:45.652524Z\", \"created_time\": \"2021-11-07T21:59:13.129162Z\", \"created_time_dt\": \"2021-11-07T21:59:13.129162Z\", \"duration\": \"0:03:32\", \"iteration\": \"23\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, RandomForest\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.84042051, \"best_metric\": 0.84854551}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_24\", \"run_number\": 29, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T22:00:49.661801Z\", \"end_time\": \"2021-11-07T22:02:45.821271Z\", \"created_time\": \"2021-11-07T22:00:49.661801Z\", \"created_time_dt\": \"2021-11-07T22:00:49.661801Z\", \"duration\": \"0:01:56\", \"iteration\": \"24\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, LightGBM\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.84907198, \"best_metric\": 0.84907198}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_25\", \"run_number\": 30, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T22:00:49.674943Z\", \"end_time\": \"2021-11-07T22:02:45.69633Z\", \"created_time\": \"2021-11-07T22:00:49.674943Z\", \"created_time_dt\": \"2021-11-07T22:00:49.674943Z\", \"duration\": \"0:01:56\", \"iteration\": \"25\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"SparseNormalizer, XGBoostClassifier\", \"run_properties\": \"copy=True, norm='max'\", \"primary_metric\": 0.8440329, \"best_metric\": 0.84907198}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_26\", \"run_number\": 31, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T22:00:52.755862Z\", \"end_time\": \"2021-11-07T22:03:16.287264Z\", \"created_time\": \"2021-11-07T22:00:52.755862Z\", \"created_time_dt\": \"2021-11-07T22:00:52.755862Z\", \"duration\": \"0:02:23\", \"iteration\": \"26\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, LightGBM\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.85056644, \"best_metric\": 0.85056644}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_27\", \"run_number\": 32, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T22:01:16.561733Z\", \"end_time\": \"2021-11-07T22:04:45.956748Z\", \"created_time\": \"2021-11-07T22:01:16.561733Z\", \"created_time_dt\": \"2021-11-07T22:01:16.561733Z\", \"duration\": \"0:03:29\", \"iteration\": \"27\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, LightGBM\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.84866298, \"best_metric\": 0.85056644}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_28\", \"run_number\": 33, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T22:02:48.156194Z\", \"end_time\": \"2021-11-07T22:04:47.217179Z\", \"created_time\": \"2021-11-07T22:02:48.156194Z\", \"created_time_dt\": \"2021-11-07T22:02:48.156194Z\", \"duration\": \"0:01:59\", \"iteration\": \"28\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"SparseNormalizer, XGBoostClassifier\", \"run_properties\": \"copy=True, norm='l2'\", \"primary_metric\": 0.83626283, \"best_metric\": 0.85056644}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_29\", \"run_number\": 34, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T22:02:48.18424Z\", \"end_time\": \"2021-11-07T22:04:45.074818Z\", \"created_time\": \"2021-11-07T22:02:48.18424Z\", \"created_time_dt\": \"2021-11-07T22:02:48.18424Z\", \"duration\": \"0:01:56\", \"iteration\": \"29\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, XGBoostClassifier\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.84418587, \"best_metric\": 0.85056644}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_30\", \"run_number\": 35, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T22:02:52.20979Z\", \"end_time\": \"2021-11-07T22:05:15.360614Z\", \"created_time\": \"2021-11-07T22:02:52.20979Z\", \"created_time_dt\": \"2021-11-07T22:02:52.20979Z\", \"duration\": \"0:02:23\", \"iteration\": \"30\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"TruncatedSVDWrapper, LightGBM\", \"run_properties\": \"n_components=0.45526315789473687, random_state=None\", \"primary_metric\": 0.84105505, \"best_metric\": 0.85056644}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_31\", \"run_number\": 36, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T22:03:18.113949Z\", \"end_time\": \"2021-11-07T22:06:48.276023Z\", \"created_time\": \"2021-11-07T22:03:18.113949Z\", \"created_time_dt\": \"2021-11-07T22:03:18.113949Z\", \"duration\": \"0:03:30\", \"iteration\": \"31\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"TruncatedSVDWrapper, XGBoostClassifier\", \"run_properties\": \"n_components=0.8510526315789474, random_state=None\", \"primary_metric\": 0.82415663, \"best_metric\": 0.85056644}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_32\", \"run_number\": 37, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T22:04:47.601884Z\", \"end_time\": \"2021-11-07T22:06:50.383383Z\", \"created_time\": \"2021-11-07T22:04:47.601884Z\", \"created_time_dt\": \"2021-11-07T22:04:47.601884Z\", \"duration\": \"0:02:02\", \"iteration\": \"32\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"TruncatedSVDWrapper, XGBoostClassifier\", \"run_properties\": \"n_components=0.6531578947368422, random_state=None\", \"primary_metric\": 0.83266064, \"best_metric\": 0.85056644}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_33\", \"run_number\": 38, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T22:04:53.816523Z\", \"end_time\": \"2021-11-07T22:07:17.526764Z\", \"created_time\": \"2021-11-07T22:04:53.816523Z\", \"created_time_dt\": \"2021-11-07T22:04:53.816523Z\", \"duration\": \"0:02:23\", \"iteration\": \"33\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, LogisticRegression\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.84538951, \"best_metric\": 0.85056644}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_34\", \"run_number\": 39, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T22:04:53.842579Z\", \"end_time\": \"2021-11-07T22:06:45.133705Z\", \"created_time\": \"2021-11-07T22:04:53.842579Z\", \"created_time_dt\": \"2021-11-07T22:04:53.842579Z\", \"duration\": \"0:01:51\", \"iteration\": \"34\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, LogisticRegression\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=True\\n\", \"primary_metric\": 0.84237118, \"best_metric\": 0.85056644}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_35\", \"run_number\": 40, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T22:05:18.341271Z\", \"end_time\": \"2021-11-07T22:08:45.7698Z\", \"created_time\": \"2021-11-07T22:05:18.341271Z\", \"created_time_dt\": \"2021-11-07T22:05:18.341271Z\", \"duration\": \"0:03:27\", \"iteration\": \"35\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"SparseNormalizer, LightGBM\", \"run_properties\": \"copy=True, norm='max'\", \"primary_metric\": 0.84519861, \"best_metric\": 0.85056644}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_36\", \"run_number\": 41, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T22:06:46.977234Z\", \"end_time\": \"2021-11-07T22:08:48.521957Z\", \"created_time\": \"2021-11-07T22:06:46.977234Z\", \"created_time_dt\": \"2021-11-07T22:06:46.977234Z\", \"duration\": \"0:02:01\", \"iteration\": \"36\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, GradientBoosting\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=True\\n\", \"primary_metric\": 0.837859, \"best_metric\": 0.85056644}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_37\", \"run_number\": 42, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T22:06:50.624547Z\", \"end_time\": \"2021-11-07T22:08:46.29302Z\", \"created_time\": \"2021-11-07T22:06:50.624547Z\", \"created_time_dt\": \"2021-11-07T22:06:50.624547Z\", \"duration\": \"0:01:55\", \"iteration\": \"37\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"SparseNormalizer, LightGBM\", \"run_properties\": \"copy=True, norm='l1'\", \"primary_metric\": 0.84743671, \"best_metric\": 0.85056644}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_38\", \"run_number\": 43, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T22:06:53.64989Z\", \"end_time\": \"2021-11-07T22:09:17.505709Z\", \"created_time\": \"2021-11-07T22:06:53.64989Z\", \"created_time_dt\": \"2021-11-07T22:06:53.64989Z\", \"duration\": \"0:02:23\", \"iteration\": \"38\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, XGBoostClassifier\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.84882769, \"best_metric\": 0.85056644}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_39\", \"run_number\": 44, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T22:07:19.49589Z\", \"end_time\": \"2021-11-07T22:10:45.701558Z\", \"created_time\": \"2021-11-07T22:07:19.49589Z\", \"created_time_dt\": \"2021-11-07T22:07:19.49589Z\", \"duration\": \"0:03:26\", \"iteration\": \"39\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, LightGBM\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.84833719, \"best_metric\": 0.85056644}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_40\", \"run_number\": 45, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T22:08:48.982303Z\", \"end_time\": \"2021-11-07T22:10:46.862535Z\", \"created_time\": \"2021-11-07T22:08:48.982303Z\", \"created_time_dt\": \"2021-11-07T22:08:48.982303Z\", \"duration\": \"0:01:57\", \"iteration\": \"40\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"TruncatedSVDWrapper, LightGBM\", \"run_properties\": \"n_components=0.2573684210526316, random_state=None\", \"primary_metric\": 0.81445302, \"best_metric\": 0.85056644}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_41\", \"run_number\": 46, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T22:08:52.317229Z\", \"end_time\": \"2021-11-07T22:10:46.798656Z\", \"created_time\": \"2021-11-07T22:08:52.317229Z\", \"created_time_dt\": \"2021-11-07T22:08:52.317229Z\", \"duration\": \"0:01:54\", \"iteration\": \"41\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, SGD\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.83299023, \"best_metric\": 0.85056644}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_42\", \"run_number\": 47, \"metric\": null, \"status\": \"Canceled\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T22:08:52.347181Z\", \"end_time\": \"2021-11-07T22:10:49.837866Z\", \"created_time\": \"2021-11-07T22:08:52.347181Z\", \"created_time_dt\": \"2021-11-07T22:08:52.347181Z\", \"duration\": \"0:01:57\", \"iteration\": \"42\", \"goal\": null, \"run_name\": \"Canceled\", \"run_properties\": null}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_43\", \"run_number\": 48, \"metric\": null, \"status\": \"Canceled\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T22:09:19.43779Z\", \"end_time\": \"2021-11-07T22:10:49.734026Z\", \"created_time\": \"2021-11-07T22:09:19.43779Z\", \"created_time_dt\": \"2021-11-07T22:09:19.43779Z\", \"duration\": \"0:01:30\", \"iteration\": \"43\", \"goal\": null, \"run_name\": \"Canceled\", \"run_properties\": null}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_44\", \"run_number\": 49, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T22:10:47.518929Z\", \"end_time\": \"2021-11-07T22:11:30.273806Z\", \"created_time\": \"2021-11-07T22:10:47.518929Z\", \"created_time_dt\": \"2021-11-07T22:10:47.518929Z\", \"duration\": \"0:00:42\", \"iteration\": \"44\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, ExtremeRandomTrees\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=True\\n\", \"primary_metric\": 0.82884823, \"best_metric\": 0.85056644}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_45\", \"run_number\": 50, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T22:11:31.273427Z\", \"end_time\": \"2021-11-07T22:13:11.893447Z\", \"created_time\": \"2021-11-07T22:11:31.273427Z\", \"created_time_dt\": \"2021-11-07T22:11:31.273427Z\", \"duration\": \"0:01:40\", \"iteration\": \"45\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"VotingEnsemble\", \"run_properties\": \"\\n    estimators=[('26', Pipeline(\\n        memory=None,\\n        steps=[('standardscalerwrapper', StandardScalerWrapper(\\n            copy=True,\\n            with_mean=False,\\n            with_std=False\\n        \", \"primary_metric\": 0.85277393, \"best_metric\": 0.85277393}, {\"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75_46\", \"run_number\": 51, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-11-07T22:11:31.306623Z\", \"end_time\": \"2021-11-07T22:13:14.648537Z\", \"created_time\": \"2021-11-07T22:11:31.306623Z\", \"created_time_dt\": \"2021-11-07T22:11:31.306623Z\", \"duration\": \"0:01:43\", \"iteration\": \"46\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StackEnsemble\", \"run_properties\": \"\\n    base_learners=[('26', Pipeline(\\n        memory=None,\\n        steps=[('standardscalerwrapper', StandardScalerWrapper(\\n            copy=True,\\n            with_mean=False,\\n            with_std=False\\n        \", \"primary_metric\": 0.85198411, \"best_metric\": 0.85277393}], \"children_metrics\": {\"categories\": [0], \"series\": {\"precision_score_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"markers\", \"name\": \"precision_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.785930522402627, 0.794543712657206, 0.7838046468825182, 0.7874287233502805, 0.7893899694343607, 0.7888228820595868, 0.8074355602894486, 0.7838080974041949, 0.786827809532145, 0.8021013144288394, 0.793324621475964, 0.8009600286210383, 0.7968284088131795, 0.7786430059900146, 0.7786666667709329, 0.7839194565678334, 0.8079878746120716, 0.80347242061137, 0.789745446633018, 0.7757287507938196, 0.7991389524510518, 0.7874329828710795, 0.7920209172812122, 0.8018435885471037, 0.7911190408489075, 0.7873297879542895, 0.7972913220688488, 0.7905885671301162, 0.7837708958458204, 0.7894362219869687, 0.7958704550398655, 0.7774188537775322, 0.7817249581268794, 0.8061250489939455, 0.8053160001288031, 0.7902640418631162, 0.7845988660816977, 0.7883626016478505, 0.7971871662422293, 0.8004625792105736, 0.778158012667458, 0.7898186662360454, 0.7758699023177629, 0.7963337900947142, 0.7961357828188268]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"lines\", \"name\": \"precision_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.785930522402627, 0.794543712657206, 0.794543712657206, 0.794543712657206, 0.794543712657206, 0.794543712657206, 0.8074355602894486, 0.8074355602894486, 0.8074355602894486, 0.8074355602894486, 0.8074355602894486, 0.8074355602894486, 0.8074355602894486, 0.8074355602894486, 0.8074355602894486, 0.8074355602894486, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716, 0.8079878746120716]}], \"recall_score_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"markers\", \"name\": \"recall_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.794462193823216, 0.8031593894213702, 0.7958821441249556, 0.7996095136670217, 0.8010294639687611, 0.799254526091587, 0.7610933617323393, 0.7939297124600638, 0.7967696130635428, 0.7252396166134186, 0.80386936457224, 0.7428115015974441, 0.8054668086616968, 0.7900248491302805, 0.7896698615548456, 0.7957046503372381, 0.7520411785587505, 0.7428115015974441, 0.7992545260915868, 0.7878949236776713, 0.805999290024849, 0.7980120695775649, 0.8006744763933261, 0.7387291444799432, 0.8010294639687611, 0.7980120695775649, 0.8061767838125665, 0.8003194888178914, 0.7935747248846291, 0.7981895633652822, 0.805999290024849, 0.7893148739794107, 0.7914447994320198, 0.7520411785587505, 0.745296414625488, 0.8010294639687611, 0.7965921192758253, 0.8001419950301739, 0.805999290024849, 0.8077742279020234, 0.7648207312744054, 0.7802626908058218, 0.7777777777777778, 0.8058217962371317, 0.80386936457224]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"lines\", \"name\": \"recall_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.794462193823216, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.80386936457224, 0.80386936457224, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.805999290024849, 0.805999290024849, 0.805999290024849, 0.805999290024849, 0.805999290024849, 0.805999290024849, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8077742279020234, 0.8077742279020234, 0.8077742279020234, 0.8077742279020234, 0.8077742279020234, 0.8077742279020234]}], \"accuracy\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"markers\", \"name\": \"accuracy\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.794462193823216, 0.8031593894213702, 0.7958821441249556, 0.7996095136670217, 0.8010294639687611, 0.799254526091587, 0.7610933617323393, 0.7939297124600638, 0.7967696130635428, 0.7252396166134186, 0.80386936457224, 0.7428115015974441, 0.8054668086616968, 0.7900248491302805, 0.7896698615548456, 0.7957046503372381, 0.7520411785587505, 0.7428115015974441, 0.7992545260915868, 0.7878949236776713, 0.805999290024849, 0.7980120695775649, 0.8006744763933261, 0.7387291444799432, 0.8010294639687611, 0.7980120695775649, 0.8061767838125665, 0.8003194888178914, 0.7935747248846291, 0.7981895633652822, 0.805999290024849, 0.7893148739794107, 0.7914447994320198, 0.7520411785587505, 0.745296414625488, 0.8010294639687611, 0.7965921192758253, 0.8001419950301739, 0.805999290024849, 0.8077742279020234, 0.7648207312744054, 0.7802626908058218, 0.7777777777777778, 0.8058217962371317, 0.80386936457224]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"lines\", \"name\": \"accuracy_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.794462193823216, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.80386936457224, 0.80386936457224, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.805999290024849, 0.805999290024849, 0.805999290024849, 0.805999290024849, 0.805999290024849, 0.805999290024849, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8077742279020234, 0.8077742279020234, 0.8077742279020234, 0.8077742279020234, 0.8077742279020234, 0.8077742279020234]}], \"recall_score_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"markers\", \"name\": \"recall_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.7071714790435207, 0.7157502360179263, 0.6835403814327528, 0.6876226286107121, 0.6871120851525042, 0.7046952023272112, 0.768059581640062, 0.7016431353417708, 0.7062579956465634, 0.7561557645731374, 0.7003631079345976, 0.7583061137712933, 0.714973950859027, 0.6501332791772332, 0.6940484008964836, 0.6725256242741056, 0.7680073252672793, 0.7603189269981511, 0.7065942164762161, 0.6485581987410715, 0.7261851157707455, 0.7031616420343374, 0.711886427967273, 0.7580042854442062, 0.7063999837814885, 0.7017468854014316, 0.7148376495964776, 0.706113640722088, 0.7038472854078478, 0.7091635876820789, 0.7091268586777547, 0.6892136452365644, 0.7001254126435272, 0.7656691919075591, 0.7638351563296797, 0.6996493579763303, 0.6786351135624904, 0.6871594081448462, 0.7156810960476419, 0.725581054438158, 0.5674776982582123, 0.7266710463529605, 0.7094658520556959, 0.7100138281779547, 0.7131067234395498]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"lines\", \"name\": \"recall_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.7071714790435207, 0.7157502360179263, 0.7157502360179263, 0.7157502360179263, 0.7157502360179263, 0.7157502360179263, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062]}], \"AUC_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"markers\", \"name\": \"AUC_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8848453762584763, 0.8912738553351911, 0.8838641512829267, 0.8872440942202805, 0.8898958211648962, 0.8868478048422724, 0.8506282977646368, 0.8820439420935496, 0.8807113210036582, 0.8223063191190865, 0.890161400261534, 0.8319957976124722, 0.8898487541221467, 0.8792144378248147, 0.8760544718794266, 0.8872801978554818, 0.8390822229102706, 0.8345980947109876, 0.8871081857715385, 0.8788904502293432, 0.8896896902005661, 0.8845918947149949, 0.8899070681088462, 0.8284461108823917, 0.8913373202331956, 0.8885649012934175, 0.8926304352510602, 0.8911039697742633, 0.8831820099555302, 0.8883527215525092, 0.8876858439347596, 0.8758212631886958, 0.8803852541412382, 0.8386219488175208, 0.8347868354426552, 0.8890418095217573, 0.8833190998059477, 0.8895995256246968, 0.8916556371006247, 0.891550445095444, 0.8601121178543627, 0.8673026010117333, 0.8727275975053334, 0.8937487028209604, 0.8926577492577962]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"lines\", \"name\": \"AUC_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8848453762584763, 0.8912738553351911, 0.8912738553351911, 0.8912738553351911, 0.8912738553351911, 0.8912738553351911, 0.8912738553351911, 0.8912738553351911, 0.8912738553351911, 0.8912738553351911, 0.8912738553351911, 0.8912738553351911, 0.8912738553351911, 0.8912738553351911, 0.8912738553351911, 0.8912738553351911, 0.8912738553351911, 0.8912738553351911, 0.8912738553351911, 0.8912738553351911, 0.8912738553351911, 0.8912738553351911, 0.8912738553351911, 0.8912738553351911, 0.8913373202331956, 0.8913373202331956, 0.8926304352510602, 0.8926304352510602, 0.8926304352510602, 0.8926304352510602, 0.8926304352510602, 0.8926304352510602, 0.8926304352510602, 0.8926304352510602, 0.8926304352510602, 0.8926304352510602, 0.8926304352510602, 0.8926304352510602, 0.8926304352510602, 0.8926304352510602, 0.8926304352510602, 0.8926304352510602, 0.8926304352510602, 0.8937487028209604, 0.8937487028209604]}], \"average_precision_score_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"markers\", \"name\": \"average_precision_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8590503064057925, 0.8659209605128874, 0.8545634422154085, 0.8596603354866769, 0.8642152934392917, 0.8580808403874957, 0.8655535608120103, 0.8529002364771857, 0.8513593323509244, 0.8534029546758252, 0.8646605080061894, 0.8582394683859693, 0.8634541293038834, 0.8545143516536114, 0.8446032403961516, 0.8658017618979853, 0.86165496698425, 0.8596993423104219, 0.8594289866134717, 0.8532177081238338, 0.8620072587120765, 0.8569780025494534, 0.8642178285407206, 0.8554542899177447, 0.8649896741477542, 0.8602651340573392, 0.8671711135688637, 0.8652313088909843, 0.8555029982954335, 0.8628187338551777, 0.8599171745349454, 0.845425613299072, 0.8521856859671594, 0.8620283931089793, 0.8587393521955723, 0.8618004176120887, 0.8550844037128714, 0.8641115641128074, 0.8656964093090131, 0.8655290243839605, 0.8358009355510184, 0.8484515758592583, 0.8454937818709851, 0.8689451549617887, 0.86854367379823]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"lines\", \"name\": \"average_precision_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8590503064057925, 0.8659209605128874, 0.8659209605128874, 0.8659209605128874, 0.8659209605128874, 0.8659209605128874, 0.8659209605128874, 0.8659209605128874, 0.8659209605128874, 0.8659209605128874, 0.8659209605128874, 0.8659209605128874, 0.8659209605128874, 0.8659209605128874, 0.8659209605128874, 0.8659209605128874, 0.8659209605128874, 0.8659209605128874, 0.8659209605128874, 0.8659209605128874, 0.8659209605128874, 0.8659209605128874, 0.8659209605128874, 0.8659209605128874, 0.8659209605128874, 0.8659209605128874, 0.8671711135688637, 0.8671711135688637, 0.8671711135688637, 0.8671711135688637, 0.8671711135688637, 0.8671711135688637, 0.8671711135688637, 0.8671711135688637, 0.8671711135688637, 0.8671711135688637, 0.8671711135688637, 0.8671711135688637, 0.8671711135688637, 0.8671711135688637, 0.8671711135688637, 0.8671711135688637, 0.8671711135688637, 0.8689451549617887, 0.8689451549617887]}], \"weighted_accuracy\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"markers\", \"name\": \"weighted_accuracy\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8502504861183905, 0.8590481007568375, 0.8676556283215925, 0.8711713430469521, 0.8738263244123182, 0.8596956508623084, 0.7566169358662366, 0.8528914576161489, 0.8546352458704525, 0.7054967707548102, 0.870021369346008, 0.7329176785546418, 0.8633340796013328, 0.8794139305742816, 0.8507715147448779, 0.8744022040204368, 0.7418503786761743, 0.7316871432733203, 0.8584817552072694, 0.8769625548773546, 0.8570255664051764, 0.8586153889724993, 0.8574385502736187, 0.7263969861825452, 0.861531455284655, 0.8595576443742908, 0.8645861711284066, 0.860548304849423, 0.8509352822967734, 0.855117243706966, 0.8679309047270434, 0.853299863381757, 0.8498506652450907, 0.7433506716968487, 0.7334583333785675, 0.8658069216147926, 0.8719337052035212, 0.8723536673253601, 0.8637210295318388, 0.8602851010280622, 0.8909315544157695, 0.8139776384379119, 0.8214277954051358, 0.867060578475413, 0.8619361516047951]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"lines\", \"name\": \"weighted_accuracy_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8502504861183905, 0.8590481007568375, 0.8676556283215925, 0.8711713430469521, 0.8738263244123182, 0.8738263244123182, 0.8738263244123182, 0.8738263244123182, 0.8738263244123182, 0.8738263244123182, 0.8738263244123182, 0.8738263244123182, 0.8738263244123182, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8794139305742816, 0.8909315544157695, 0.8909315544157695, 0.8909315544157695, 0.8909315544157695, 0.8909315544157695]}], \"f1_score_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"markers\", \"name\": \"f1_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.794462193823216, 0.8031593894213701, 0.7958821441249556, 0.7996095136670217, 0.8010294639687611, 0.7992545260915868, 0.7610933617323393, 0.7939297124600638, 0.7967696130635428, 0.7252396166134186, 0.80386936457224, 0.7428115015974441, 0.8054668086616968, 0.7900248491302805, 0.7896698615548456, 0.795704650337238, 0.7520411785587505, 0.7428115015974441, 0.7992545260915868, 0.7878949236776712, 0.805999290024849, 0.7980120695775649, 0.8006744763933261, 0.7387291444799432, 0.8010294639687611, 0.7980120695775649, 0.8061767838125665, 0.8003194888178914, 0.7935747248846289, 0.7981895633652821, 0.805999290024849, 0.7893148739794107, 0.7914447994320198, 0.7520411785587505, 0.7452964146254882, 0.8010294639687611, 0.7965921192758253, 0.8001419950301739, 0.805999290024849, 0.8077742279020234, 0.7648207312744054, 0.7802626908058218, 0.7777777777777778, 0.8058217962371317, 0.80386936457224]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"lines\", \"name\": \"f1_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.794462193823216, 0.8031593894213701, 0.8031593894213701, 0.8031593894213701, 0.8031593894213701, 0.8031593894213701, 0.8031593894213701, 0.8031593894213701, 0.8031593894213701, 0.8031593894213701, 0.80386936457224, 0.80386936457224, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.805999290024849, 0.805999290024849, 0.805999290024849, 0.805999290024849, 0.805999290024849, 0.805999290024849, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8077742279020234, 0.8077742279020234, 0.8077742279020234, 0.8077742279020234, 0.8077742279020234, 0.8077742279020234]}], \"precision_score_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"markers\", \"name\": \"precision_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.794462193823216, 0.8031593894213702, 0.7958821441249556, 0.7996095136670217, 0.8010294639687611, 0.799254526091587, 0.7610933617323393, 0.7939297124600638, 0.7967696130635428, 0.7252396166134186, 0.80386936457224, 0.7428115015974441, 0.8054668086616968, 0.7900248491302805, 0.7896698615548456, 0.7957046503372381, 0.7520411785587505, 0.7428115015974441, 0.7992545260915868, 0.7878949236776713, 0.805999290024849, 0.7980120695775649, 0.8006744763933261, 0.7387291444799432, 0.8010294639687611, 0.7980120695775649, 0.8061767838125665, 0.8003194888178914, 0.7935747248846291, 0.7981895633652822, 0.805999290024849, 0.7893148739794107, 0.7914447994320198, 0.7520411785587505, 0.745296414625488, 0.8010294639687611, 0.7965921192758253, 0.8001419950301739, 0.805999290024849, 0.8077742279020234, 0.7648207312744054, 0.7802626908058218, 0.7777777777777778, 0.8058217962371317, 0.80386936457224]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"lines\", \"name\": \"precision_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.794462193823216, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.80386936457224, 0.80386936457224, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.805999290024849, 0.805999290024849, 0.805999290024849, 0.805999290024849, 0.805999290024849, 0.805999290024849, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8077742279020234, 0.8077742279020234, 0.8077742279020234, 0.8077742279020234, 0.8077742279020234, 0.8077742279020234]}], \"average_precision_score_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"markers\", \"name\": \"average_precision_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8865484596120158, 0.8931714909406261, 0.8836394747288088, 0.8884599865422022, 0.8906583806357596, 0.8872908302682845, 0.8535673377002796, 0.8819580377115521, 0.881128950945309, 0.8280816674002754, 0.89106985304632, 0.8370066441601146, 0.8911561600642685, 0.8810502435928854, 0.8733917796657948, 0.889770034859554, 0.8439199811120806, 0.8386621725873394, 0.8879275574894779, 0.8806591663165918, 0.8906780905985682, 0.8855543612565241, 0.8915150058129799, 0.8328096964498067, 0.8922639963933131, 0.889210484425135, 0.8938113447457129, 0.8926054609663878, 0.8839160464431147, 0.8902139055996878, 0.8876905116037673, 0.876670588690572, 0.8819239907767535, 0.8422520693634817, 0.8386496884228348, 0.8895167614870158, 0.8840750554994267, 0.890287434443569, 0.8926806506972867, 0.8924849543308838, 0.8556901808755347, 0.8640290305385973, 0.8738812425170464, 0.8950927052032841, 0.894252762877315]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"lines\", \"name\": \"average_precision_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8865484596120158, 0.8931714909406261, 0.8931714909406261, 0.8931714909406261, 0.8931714909406261, 0.8931714909406261, 0.8931714909406261, 0.8931714909406261, 0.8931714909406261, 0.8931714909406261, 0.8931714909406261, 0.8931714909406261, 0.8931714909406261, 0.8931714909406261, 0.8931714909406261, 0.8931714909406261, 0.8931714909406261, 0.8931714909406261, 0.8931714909406261, 0.8931714909406261, 0.8931714909406261, 0.8931714909406261, 0.8931714909406261, 0.8931714909406261, 0.8931714909406261, 0.8931714909406261, 0.8938113447457129, 0.8938113447457129, 0.8938113447457129, 0.8938113447457129, 0.8938113447457129, 0.8938113447457129, 0.8938113447457129, 0.8938113447457129, 0.8938113447457129, 0.8938113447457129, 0.8938113447457129, 0.8938113447457129, 0.8938113447457129, 0.8938113447457129, 0.8938113447457129, 0.8938113447457129, 0.8938113447457129, 0.8950927052032841, 0.8950927052032841]}], \"f1_score_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"markers\", \"name\": \"f1_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.7187306521954412, 0.7290211798845604, 0.702272245773838, 0.7073757062730897, 0.707337283553653, 0.7199430885731867, 0.7285893890980403, 0.715054266531891, 0.7196689131764863, 0.7001617844562545, 0.719064986430749, 0.7127931004771694, 0.7299916635292245, 0.6698436721022706, 0.7077017673507565, 0.6929910942856551, 0.7224064108283411, 0.7133735631462685, 0.7211469151061355, 0.6675019678655939, 0.7374716601681416, 0.7181205460019487, 0.7255052759125364, 0.7098757037667872, 0.7214978182574435, 0.7172353555986728, 0.7299978207677448, 0.7210329911192926, 0.7164242331070559, 0.7222403495143251, 0.7261864269298632, 0.7036591928734334, 0.7127822361171524, 0.7216015443927698, 0.7163749380522008, 0.7171206096258024, 0.69789369854458, 0.7072416546651296, 0.7306108655978528, 0.7380867948124283, 0.554447090380994, 0.7174597994740944, 0.7115254746719298, 0.7269243047887389, 0.7274882060009603]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"lines\", \"name\": \"f1_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.7187306521954412, 0.7290211798845604, 0.7290211798845604, 0.7290211798845604, 0.7290211798845604, 0.7290211798845604, 0.7290211798845604, 0.7290211798845604, 0.7290211798845604, 0.7290211798845604, 0.7290211798845604, 0.7290211798845604, 0.7299916635292245, 0.7299916635292245, 0.7299916635292245, 0.7299916635292245, 0.7299916635292245, 0.7299916635292245, 0.7299916635292245, 0.7299916635292245, 0.7374716601681416, 0.7374716601681416, 0.7374716601681416, 0.7374716601681416, 0.7374716601681416, 0.7374716601681416, 0.7374716601681416, 0.7374716601681416, 0.7374716601681416, 0.7374716601681416, 0.7374716601681416, 0.7374716601681416, 0.7374716601681416, 0.7374716601681416, 0.7374716601681416, 0.7374716601681416, 0.7374716601681416, 0.7374716601681416, 0.7374716601681416, 0.7380867948124283, 0.7380867948124283, 0.7380867948124283, 0.7380867948124283, 0.7380867948124283, 0.7380867948124283]}], \"matthews_correlation\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"markers\", \"name\": \"matthews_correlation\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.44514696238764134, 0.4666459815433653, 0.4282234502561213, 0.43795266070017336, 0.440788738378125, 0.45048403939300724, 0.48579009232827985, 0.4389645985106809, 0.4473969625687035, 0.45520311166287947, 0.45633054547258256, 0.4635421248150084, 0.4706897448321221, 0.39317122347604316, 0.4251323648640531, 0.42044352038640725, 0.4817035868885721, 0.4676605531487296, 0.4527193994066836, 0.3870138447649249, 0.48048452967971983, 0.44695832583081724, 0.45983215734201116, 0.4624710053006986, 0.4552671649079631, 0.4459931695353365, 0.4714731517635001, 0.45403431492750035, 0.44010130682236714, 0.453304465042681, 0.4661843383836027, 0.42014441881033643, 0.4340013026105299, 0.4782881184705389, 0.4728781488325608, 0.45015551252812275, 0.42572938272085953, 0.43911863772975557, 0.47179882499321185, 0.4829074776862734, 0.2799592059706556, 0.45006528862181466, 0.4241617873432642, 0.4673105268417285, 0.4674955205804448]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"lines\", \"name\": \"matthews_correlation_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.44514696238764134, 0.4666459815433653, 0.4666459815433653, 0.4666459815433653, 0.4666459815433653, 0.4666459815433653, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985, 0.48579009232827985]}], \"precision_score_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"markers\", \"name\": \"precision_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.7395376697971479, 0.7526845676526924, 0.7502309747001501, 0.7556401698554523, 0.759877118979699, 0.7479671297292411, 0.7201093036282927, 0.7391024754864642, 0.7427267395792329, 0.7022380283536215, 0.7601131040986129, 0.7079709741685812, 0.758049122264924, 0.7576891934058732, 0.7330333107555412, 0.7565892453119362, 0.7164606954308589, 0.7100815701527123, 0.7483387205786952, 0.7526093823709257, 0.7554225032121312, 0.7460040449827158, 0.7498002378569791, 0.7072632652073395, 0.7515128778941781, 0.7466368308030189, 0.759143225636307, 0.7505057708881623, 0.7376594398291049, 0.7459889823116354, 0.7600634276596187, 0.7335922795791286, 0.735579960147639, 0.7152839907826039, 0.711898056054883, 0.7540378668707753, 0.7544593169819156, 0.7577123384188577, 0.7583952820998198, 0.7587183379408957, 0.7918826694828599, 0.7259441362796276, 0.7148689293108531, 0.760279643460296, 0.7572724780628629]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"lines\", \"name\": \"precision_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.7395376697971479, 0.7526845676526924, 0.7526845676526924, 0.7556401698554523, 0.759877118979699, 0.759877118979699, 0.759877118979699, 0.759877118979699, 0.759877118979699, 0.759877118979699, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7601131040986129, 0.7918826694828599, 0.7918826694828599, 0.7918826694828599, 0.7918826694828599, 0.7918826694828599]}], \"AUC_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"markers\", \"name\": \"AUC_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.838953857621382, 0.848425304715561, 0.8375924322143606, 0.8432772149583846, 0.848545512515794, 0.8414934901142965, 0.8481861225513204, 0.8334261927094698, 0.8322810639435803, 0.8376955742274133, 0.8470955878583365, 0.8418775749162924, 0.8454581954161958, 0.8364275495555001, 0.8266490179219542, 0.8479639536146655, 0.846147235882054, 0.8422472226314811, 0.8416784953856767, 0.8357942616534606, 0.846403521671539, 0.8377141471234718, 0.8464201602185243, 0.8404205110619863, 0.8490719838275784, 0.8440329023542547, 0.8505664381581758, 0.8486629840327548, 0.8362628867642066, 0.8441858686796331, 0.8410550512272293, 0.8241566308348348, 0.8326606377708873, 0.8453895086791553, 0.8423711778129456, 0.8451986083992683, 0.8378590014813475, 0.8474367140363861, 0.8488276858340674, 0.8483371879240119, 0.8144530206091796, 0.8329902276807579, 0.828848234579396, 0.8527739326178465, 0.8519841082338525]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"lines\", \"name\": \"AUC_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.838953857621382, 0.848425304715561, 0.848425304715561, 0.848425304715561, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.8490719838275784, 0.8490719838275784, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8527739326178465, 0.8527739326178465]}], \"f1_score_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"markers\", \"name\": \"f1_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.7871985268450351, 0.7954938901990269, 0.7806140647247415, 0.7844882217162041, 0.7850306945164052, 0.789909259133715, 0.772666599884453, 0.7854233954432944, 0.7886591221560693, 0.7408546536401618, 0.7914976777261207, 0.7563531750996676, 0.7969597775011255, 0.7633192809675945, 0.7803793505254015, 0.7763383179804885, 0.7649483649472031, 0.756293202443287, 0.7904268374724143, 0.761353713874822, 0.8004033348441016, 0.7885545920473428, 0.7929013679841012, 0.7526550345696049, 0.7912873933922929, 0.7881786863219853, 0.7972491300099743, 0.7907828829073248, 0.7858463145600251, 0.7903648819900936, 0.7955479336173458, 0.7783786467595853, 0.7832898990460997, 0.76477203858013, 0.7588603623623863, 0.7894433370771171, 0.7789141999966982, 0.7846455425308999, 0.7974684318238944, 0.8014932091444894, 0.6980362287827001, 0.7791288292928472, 0.776388724089449, 0.7958192057942212, 0.7950905435887309]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"lines\", \"name\": \"f1_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.7871985268450351, 0.7954938901990269, 0.7954938901990269, 0.7954938901990269, 0.7954938901990269, 0.7954938901990269, 0.7954938901990269, 0.7954938901990269, 0.7954938901990269, 0.7954938901990269, 0.7954938901990269, 0.7954938901990269, 0.7969597775011255, 0.7969597775011255, 0.7969597775011255, 0.7969597775011255, 0.7969597775011255, 0.7969597775011255, 0.7969597775011255, 0.7969597775011255, 0.8004033348441016, 0.8004033348441016, 0.8004033348441016, 0.8004033348441016, 0.8004033348441016, 0.8004033348441016, 0.8004033348441016, 0.8004033348441016, 0.8004033348441016, 0.8004033348441016, 0.8004033348441016, 0.8004033348441016, 0.8004033348441016, 0.8004033348441016, 0.8004033348441016, 0.8004033348441016, 0.8004033348441016, 0.8004033348441016, 0.8004033348441016, 0.8014932091444894, 0.8014932091444894, 0.8014932091444894, 0.8014932091444894, 0.8014932091444894, 0.8014932091444894]}], \"average_precision_score_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"markers\", \"name\": \"average_precision_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.7929736319880424, 0.801840145693317, 0.7872061642267355, 0.7927887285545795, 0.7999408319325871, 0.7912162167502309, 0.801680230353908, 0.7856086969937367, 0.7822645472511541, 0.78243433787047, 0.8010323517544314, 0.79023076874337, 0.7989342301388317, 0.7857456366786666, 0.7738550523145057, 0.8014120557915806, 0.7955233312054073, 0.7945012245745687, 0.7933484546289225, 0.7835710297480469, 0.7962236541138634, 0.7902999143676842, 0.7997973488925164, 0.786437589715943, 0.8008606049041189, 0.7942089940082561, 0.8040610864994138, 0.8008036218967685, 0.7882998285015356, 0.7977361771250239, 0.7955552585984513, 0.7740120684359217, 0.7826466098894835, 0.7968205349931382, 0.7913291577593139, 0.7967619058000676, 0.7868774878800154, 0.8003095326289896, 0.8021047574198185, 0.8022199918377173, 0.7687902897219926, 0.7807478679439117, 0.7726248454363347, 0.806401274056722, 0.8057411653330373]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"lines\", \"name\": \"average_precision_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.7929736319880424, 0.801840145693317, 0.801840145693317, 0.801840145693317, 0.801840145693317, 0.801840145693317, 0.801840145693317, 0.801840145693317, 0.801840145693317, 0.801840145693317, 0.801840145693317, 0.801840145693317, 0.801840145693317, 0.801840145693317, 0.801840145693317, 0.801840145693317, 0.801840145693317, 0.801840145693317, 0.801840145693317, 0.801840145693317, 0.801840145693317, 0.801840145693317, 0.801840145693317, 0.801840145693317, 0.801840145693317, 0.801840145693317, 0.8040610864994138, 0.8040610864994138, 0.8040610864994138, 0.8040610864994138, 0.8040610864994138, 0.8040610864994138, 0.8040610864994138, 0.8040610864994138, 0.8040610864994138, 0.8040610864994138, 0.8040610864994138, 0.8040610864994138, 0.8040610864994138, 0.8040610864994138, 0.8040610864994138, 0.8040610864994138, 0.8040610864994138, 0.806401274056722, 0.806401274056722]}], \"norm_macro_recall\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"markers\", \"name\": \"norm_macro_recall\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.4143429580870414, 0.43150047203585246, 0.36708076286550534, 0.37524525722142404, 0.37422417030500843, 0.4093904046544225, 0.536119163280124, 0.4032862706835416, 0.4125159912931269, 0.5123115291462746, 0.40072621586919516, 0.5166122275425867, 0.42994790171805414, 0.30026655835446636, 0.38809680179296707, 0.3450512485482112, 0.5360146505345588, 0.5206378539963022, 0.41318843295243246, 0.29711639748214286, 0.4523702315414911, 0.40632328406867474, 0.42377285593454594, 0.5160085708884125, 0.412799967562977, 0.40349377080286314, 0.42967529919295494, 0.41222728144417614, 0.40769457081569566, 0.418327175364158, 0.4182537173555094, 0.3784272904731288, 0.40025082528705447, 0.5313383838151181, 0.5276703126593594, 0.3992987159526604, 0.35727022712498063, 0.3743188162896926, 0.43136219209528387, 0.45116210887631597, 0.13495539651642452, 0.453342092705921, 0.41893170411139163, 0.4200276563559094, 0.4262134468790997]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"lines\", \"name\": \"norm_macro_recall_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.4143429580870414, 0.43150047203585246, 0.43150047203585246, 0.43150047203585246, 0.43150047203585246, 0.43150047203585246, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124, 0.536119163280124]}], \"balanced_accuracy\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"markers\", \"name\": \"balanced_accuracy\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.7071714790435207, 0.7157502360179263, 0.6835403814327528, 0.6876226286107121, 0.6871120851525042, 0.7046952023272112, 0.768059581640062, 0.7016431353417708, 0.7062579956465634, 0.7561557645731374, 0.7003631079345976, 0.7583061137712933, 0.714973950859027, 0.6501332791772332, 0.6940484008964836, 0.6725256242741056, 0.7680073252672793, 0.7603189269981511, 0.7065942164762161, 0.6485581987410715, 0.7261851157707455, 0.7031616420343374, 0.711886427967273, 0.7580042854442062, 0.7063999837814885, 0.7017468854014316, 0.7148376495964776, 0.706113640722088, 0.7038472854078478, 0.7091635876820789, 0.7091268586777547, 0.6892136452365644, 0.7001254126435272, 0.7656691919075591, 0.7638351563296797, 0.6996493579763303, 0.6786351135624904, 0.6871594081448462, 0.7156810960476419, 0.725581054438158, 0.5674776982582123, 0.7266710463529605, 0.7094658520556959, 0.7100138281779547, 0.7131067234395498]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"lines\", \"name\": \"balanced_accuracy_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.7071714790435207, 0.7157502360179263, 0.7157502360179263, 0.7157502360179263, 0.7157502360179263, 0.7157502360179263, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062, 0.768059581640062]}], \"log_loss\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"markers\", \"name\": \"log_loss\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.433399336815482, 0.4126166754224896, 0.42736378292219124, 0.4222810515949568, 0.42139902727313344, 0.47435875324453397, 0.47457463148604956, 0.4789622334550767, 0.4792039062334486, 0.5259144395347692, 0.42122733741913637, 0.498767971471175, 0.4205664410135655, 0.4399389532190087, 0.507267658793173, 0.4354623839330202, 0.49079683718102857, 0.5097310790983851, 0.4786676486202884, 0.4406861095217507, 0.4168884445754073, 0.47916532345025603, 0.41619396821363436, 0.5048641356231365, 0.4151395583722677, 0.4762427304051951, 0.41280572196844156, 0.41419024986706793, 0.43739650255461343, 0.4181682502797867, 0.42194001111284174, 0.4660818985725074, 0.44283530797822807, 0.49179431640103405, 0.5021428795760104, 0.4211305545569863, 0.4327500848375287, 0.42159340087160047, 0.41434805359426347, 0.4133850793333138, 0.4846715727801432, 0.7797492470062792, 0.45080178676633215, 0.41322389927630293, 0.4194022559717982]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"lines\", \"name\": \"log_loss_min\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.433399336815482, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896, 0.4126166754224896]}], \"AUC_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"markers\", \"name\": \"AUC_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.838953857621382, 0.8484252457097097, 0.8375924322143605, 0.8432772149583846, 0.848545512515794, 0.8414934901142965, 0.8481861225513204, 0.8334261927094696, 0.8322810639435803, 0.8376955742274133, 0.8470955878583365, 0.8418775749162924, 0.8454581954161958, 0.8364275495555001, 0.8266489544213892, 0.8479639536146655, 0.846147235882054, 0.8422472226314811, 0.8416784953856767, 0.8357942616534606, 0.8464035216715389, 0.8377141471234718, 0.8464201602185243, 0.8404205110619863, 0.8490719838275783, 0.8440329023542544, 0.8505664381581758, 0.8486629840327548, 0.8362628298155713, 0.8441858686796331, 0.8410550512272293, 0.8241566308348348, 0.8326606377708871, 0.8453895086791555, 0.8423711778129456, 0.8451986083992683, 0.8378590014813475, 0.8474367140363861, 0.8488276858340676, 0.8483371879240118, 0.8144530206091795, 0.8329902276807578, 0.828848234579396, 0.8527739326178465, 0.8519841082338525]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"lines\", \"name\": \"AUC_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.838953857621382, 0.8484252457097097, 0.8484252457097097, 0.8484252457097097, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.848545512515794, 0.8490719838275783, 0.8490719838275783, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8505664381581758, 0.8527739326178465, 0.8527739326178465]}], \"recall_score_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"markers\", \"name\": \"recall_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.794462193823216, 0.8031593894213702, 0.7958821441249556, 0.7996095136670217, 0.8010294639687611, 0.799254526091587, 0.7610933617323393, 0.7939297124600638, 0.7967696130635428, 0.7252396166134186, 0.80386936457224, 0.7428115015974441, 0.8054668086616968, 0.7900248491302805, 0.7896698615548456, 0.7957046503372381, 0.7520411785587505, 0.7428115015974441, 0.7992545260915868, 0.7878949236776713, 0.805999290024849, 0.7980120695775649, 0.8006744763933261, 0.7387291444799432, 0.8010294639687611, 0.7980120695775649, 0.8061767838125665, 0.8003194888178914, 0.7935747248846291, 0.7981895633652822, 0.805999290024849, 0.7893148739794107, 0.7914447994320198, 0.7520411785587505, 0.745296414625488, 0.8010294639687611, 0.7965921192758253, 0.8001419950301739, 0.805999290024849, 0.8077742279020234, 0.7648207312744054, 0.7802626908058218, 0.7777777777777778, 0.8058217962371317, 0.80386936457224]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\", \"46\"], \"mode\": \"lines\", \"name\": \"recall_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.794462193823216, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.8031593894213702, 0.80386936457224, 0.80386936457224, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.8054668086616968, 0.805999290024849, 0.805999290024849, 0.805999290024849, 0.805999290024849, 0.805999290024849, 0.805999290024849, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8061767838125665, 0.8077742279020234, 0.8077742279020234, 0.8077742279020234, 0.8077742279020234, 0.8077742279020234, 0.8077742279020234]}]}, \"metricName\": null, \"primaryMetricName\": \"AUC_weighted\", \"showLegend\": false}, \"run_metrics\": [{\"name\": \"experiment_status\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"categories\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], \"series\": [{\"data\": [\"DatasetEvaluation\", \"FeaturesGeneration\", \"DatasetFeaturization\", \"DatasetFeaturizationCompleted\", \"DatasetCrossValidationSplit\", \"ModelSelection\", \"BestRunExplainModel\", \"ModelExplanationDataSetSetup\", \"PickSurrogateModel\", \"EngineeredFeatureExplanations\", \"EngineeredFeatureExplanations\", \"RawFeaturesExplanations\"]}]}, {\"name\": \"experiment_status_description\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"categories\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], \"series\": [{\"data\": [\"Gathering dataset statistics.\", \"Generating features for the dataset.\", \"Beginning to fit featurizers and featurize the dataset.\", \"Completed fit featurizers and featurizing the dataset.\", \"Generating individually featurized CV splits.\", \"Beginning model selection.\", \"Best run model explanations started\", \"Model explanations data setup completed\", \"Choosing LightGBM as the surrogate model for explanations\", \"Computation of engineered features started\", \"Computation of engineered features completed\", \"Computation of raw features started\"]}]}, {\"name\": \"f1_score_micro\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"categories\": [0], \"series\": [{\"data\": [0.8058217962371317]}]}, {\"name\": \"log_loss\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"categories\": [0], \"series\": [{\"data\": [0.41322389927630293]}]}, {\"name\": \"average_precision_score_micro\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"categories\": [0], \"series\": [{\"data\": [0.8950927052032841]}]}, {\"name\": \"f1_score_macro\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"categories\": [0], \"series\": [{\"data\": [0.7269243047887389]}]}, {\"name\": \"AUC_macro\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"categories\": [0], \"series\": [{\"data\": [0.8527739326178465]}]}, {\"name\": \"average_precision_score_macro\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"categories\": [0], \"series\": [{\"data\": [0.806401274056722]}]}, {\"name\": \"AUC_weighted\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"categories\": [0], \"series\": [{\"data\": [0.8527739326178465]}]}, {\"name\": \"recall_score_macro\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"categories\": [0], \"series\": [{\"data\": [0.7100138281779547]}]}, {\"name\": \"accuracy\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"categories\": [0], \"series\": [{\"data\": [0.8058217962371317]}]}, {\"name\": \"AUC_micro\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"categories\": [0], \"series\": [{\"data\": [0.8937487028209604]}]}, {\"name\": \"f1_score_weighted\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"categories\": [0], \"series\": [{\"data\": [0.7958192057942212]}]}, {\"name\": \"precision_score_macro\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"categories\": [0], \"series\": [{\"data\": [0.760279643460296]}]}, {\"name\": \"recall_score_micro\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"categories\": [0], \"series\": [{\"data\": [0.8058217962371317]}]}, {\"name\": \"recall_score_weighted\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"categories\": [0], \"series\": [{\"data\": [0.8058217962371317]}]}, {\"name\": \"matthews_correlation\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"categories\": [0], \"series\": [{\"data\": [0.4673105268417285]}]}, {\"name\": \"balanced_accuracy\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"categories\": [0], \"series\": [{\"data\": [0.7100138281779547]}]}, {\"name\": \"average_precision_score_weighted\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"categories\": [0], \"series\": [{\"data\": [0.8689451549617887]}]}, {\"name\": \"precision_score_micro\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"categories\": [0], \"series\": [{\"data\": [0.8058217962371317]}]}, {\"name\": \"norm_macro_recall\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"categories\": [0], \"series\": [{\"data\": [0.4200276563559094]}]}, {\"name\": \"weighted_accuracy\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"categories\": [0], \"series\": [{\"data\": [0.867060578475413]}]}, {\"name\": \"precision_score_weighted\", \"run_id\": \"AutoML_6914179d-c21b-43ef-968a-9564792a6b75\", \"categories\": [0], \"series\": [{\"data\": [0.7963337900947142]}]}], \"run_logs\": \"\\nRun is completed.\", \"graph\": {}, \"widget_settings\": {\"childWidgetDisplay\": \"popup\", \"send_telemetry\": false, \"log_level\": \"INFO\", \"sdk_version\": \"1.34.0\"}, \"loading\": false}"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 50,
          "data": {
            "text/plain": "{'runId': 'AutoML_6914179d-c21b-43ef-968a-9564792a6b75',\n 'target': 'cluster-vhcg',\n 'status': 'Completed',\n 'startTimeUtc': '2021-11-07T21:41:42.530266Z',\n 'endTimeUtc': '2021-11-07T22:13:17.559844Z',\n 'services': {},\n 'warnings': [{'source': 'JasmineService',\n   'message': 'No scores improved over last 20 iterations, so experiment stopped early. This early stopping behavior can be disabled by setting enable_early_stopping = False in AutoMLConfig for notebook/python SDK runs.'}],\n 'properties': {'num_iterations': '1000',\n  'training_type': 'TrainFull',\n  'acquisition_function': 'EI',\n  'primary_metric': 'AUC_weighted',\n  'train_split': '0',\n  'acquisition_parameter': '0',\n  'num_cross_validation': None,\n  'target': 'cluster-vhcg',\n  'AMLSettingsJsonString': '{\"path\":null,\"name\":\"telco-customer-churn\",\"subscription_id\":\"61c5c3f0-6dc7-4ed9-a7f3-c704b20e3b30\",\"resource_group\":\"aml-quickstarts-162961\",\"workspace_name\":\"quick-starts-ws-162961\",\"region\":\"southcentralus\",\"compute_target\":\"cluster-vhcg\",\"spark_service\":null,\"azure_service\":\"remote\",\"many_models\":false,\"pipeline_fetch_max_batch_size\":1,\"enable_batch_run\":false,\"enable_run_restructure\":false,\"start_auxiliary_runs_before_parent_complete\":true,\"enable_code_generation\":false,\"iterations\":1000,\"primary_metric\":\"AUC_weighted\",\"task_type\":\"classification\",\"data_script\":null,\"test_size\":0.0,\"test_include_predictions_only\":false,\"validation_size\":0.0,\"n_cross_validations\":null,\"y_min\":null,\"y_max\":null,\"num_classes\":null,\"featurization\":\"auto\",\"_ignore_package_version_incompatibilities\":false,\"is_timeseries\":false,\"max_cores_per_iteration\":-1,\"max_concurrent_iterations\":5,\"iteration_timeout_minutes\":null,\"mem_in_mb\":null,\"enforce_time_on_windows\":false,\"experiment_timeout_minutes\":30,\"experiment_exit_score\":null,\"whitelist_models\":null,\"blacklist_algos\":[\"TensorFlowLinearClassifier\",\"TensorFlowDNN\"],\"supported_models\":[\"XGBoostClassifier\",\"LinearSVM\",\"KNN\",\"DecisionTree\",\"GradientBoosting\",\"BernoulliNaiveBayes\",\"TensorFlowDNN\",\"MultinomialNaiveBayes\",\"TensorFlowLinearClassifier\",\"LightGBM\",\"LogisticRegression\",\"AveragedPerceptronClassifier\",\"SVM\",\"SGD\",\"ExtremeRandomTrees\",\"RandomForest\"],\"private_models\":[],\"auto_blacklist\":true,\"blacklist_samples_reached\":false,\"exclude_nan_labels\":true,\"verbosity\":20,\"_debug_log\":\"azureml_automl.log\",\"show_warnings\":false,\"model_explainability\":true,\"service_url\":null,\"sdk_url\":null,\"sdk_packages\":null,\"enable_onnx_compatible_models\":false,\"enable_split_onnx_featurizer_estimator_models\":false,\"vm_type\":\"STANDARD_D2_V2\",\"telemetry_verbosity\":20,\"send_telemetry\":true,\"enable_dnn\":false,\"scenario\":\"SDK-1.13.0\",\"environment_label\":null,\"save_mlflow\":false,\"force_text_dnn\":false,\"enable_feature_sweeping\":true,\"enable_early_stopping\":true,\"early_stopping_n_iters\":10,\"metrics\":null,\"enable_metric_confidence\":false,\"enable_ensembling\":true,\"enable_stack_ensembling\":true,\"ensemble_iterations\":15,\"enable_tf\":false,\"enable_subsampling\":null,\"subsample_seed\":null,\"enable_nimbusml\":false,\"enable_streaming\":false,\"force_streaming\":false,\"track_child_runs\":true,\"allowed_private_models\":[],\"label_column_name\":\"Churn\",\"weight_column_name\":null,\"cv_split_column_names\":null,\"positive_label\":null,\"enable_local_managed\":false,\"_local_managed_run_id\":null,\"cost_mode\":1,\"lag_length\":0,\"metric_operation\":\"maximize\",\"preprocess\":true}',\n  'DataPrepJsonString': '{\\\\\"training_data\\\\\": {\\\\\"datasetId\\\\\": \\\\\"de13efab-9983-4223-83ce-7cab5689fb7a\\\\\"}, \\\\\"test_data\\\\\": {\\\\\"datasetId\\\\\": \\\\\"82ab290a-d982-4196-87a6-3a357795dcd6\\\\\"}, \\\\\"datasets\\\\\": 0}',\n  'EnableSubsampling': None,\n  'runTemplate': 'AutoML',\n  'azureml.runsource': 'automl',\n  'display_task_type': 'classification',\n  'dependencies_versions': '{\"azureml-widgets\": \"1.34.0\", \"azureml-train\": \"1.34.0\", \"azureml-train-restclients-hyperdrive\": \"1.34.0\", \"azureml-train-core\": \"1.34.0\", \"azureml-train-automl\": \"1.34.0\", \"azureml-train-automl-runtime\": \"1.34.0\", \"azureml-train-automl-client\": \"1.34.0\", \"azureml-tensorboard\": \"1.34.0\", \"azureml-telemetry\": \"1.34.0\", \"azureml-sdk\": \"1.34.0\", \"azureml-samples\": \"0+unknown\", \"azureml-responsibleai\": \"1.34.0\", \"azureml-pipeline\": \"1.34.0\", \"azureml-pipeline-steps\": \"1.34.0\", \"azureml-pipeline-core\": \"1.34.0\", \"azureml-opendatasets\": \"1.34.0\", \"azureml-mlflow\": \"1.34.0\", \"azureml-interpret\": \"1.34.0\", \"azureml-inference-server-http\": \"0.3.1\", \"azureml-explain-model\": \"1.34.0\", \"azureml-defaults\": \"1.34.0\", \"azureml-dataset-runtime\": \"1.34.0\", \"azureml-dataprep\": \"2.22.2\", \"azureml-dataprep-rslex\": \"1.20.1\", \"azureml-dataprep-native\": \"38.0.0\", \"azureml-datadrift\": \"1.34.0\", \"azureml-core\": \"1.34.0\", \"azureml-contrib-services\": \"1.34.0\", \"azureml-contrib-server\": \"1.34.0\", \"azureml-contrib-reinforcementlearning\": \"1.34.0\", \"azureml-contrib-pipeline-steps\": \"1.34.0\", \"azureml-contrib-notebook\": \"1.34.0\", \"azureml-contrib-fairness\": \"1.34.0\", \"azureml-contrib-dataset\": \"1.34.0\", \"azureml-contrib-automl-pipeline-steps\": \"1.34.0\", \"azureml-cli-common\": \"1.34.0\", \"azureml-automl-runtime\": \"1.34.0\", \"azureml-automl-dnn-nlp\": \"1.34.0\", \"azureml-automl-core\": \"1.34.0\", \"azureml-accel-models\": \"1.34.0\"}',\n  '_aml_system_scenario_identification': 'Remote.Parent',\n  'ClientType': 'SDK',\n  'environment_cpu_name': 'AzureML-AutoML',\n  'environment_cpu_label': 'prod',\n  'environment_gpu_name': 'AzureML-AutoML-GPU',\n  'environment_gpu_label': 'prod',\n  'root_attribution': 'automl',\n  'attribution': 'AutoML',\n  'Orchestrator': 'AutoML',\n  'CancelUri': 'https://southcentralus.api.azureml.ms/jasmine/v1.0/subscriptions/61c5c3f0-6dc7-4ed9-a7f3-c704b20e3b30/resourceGroups/aml-quickstarts-162961/providers/Microsoft.MachineLearningServices/workspaces/quick-starts-ws-162961/experimentids/fcd5bab4-fec7-4d6a-9843-df4874a48643/cancel/AutoML_6914179d-c21b-43ef-968a-9564792a6b75',\n  'ClientSdkVersion': '1.35.1',\n  'snapshotId': '00000000-0000-0000-0000-000000000000',\n  'SetupRunId': 'AutoML_6914179d-c21b-43ef-968a-9564792a6b75_setup',\n  'SetupRunContainerId': 'dcid.AutoML_6914179d-c21b-43ef-968a-9564792a6b75_setup',\n  'FeaturizationRunJsonPath': 'featurizer_container.json',\n  'FeaturizationRunId': 'AutoML_6914179d-c21b-43ef-968a-9564792a6b75_featurize',\n  'ProblemInfoJsonString': '{\"dataset_num_categorical\": 0, \"is_sparse\": true, \"subsampling\": false, \"has_extra_col\": true, \"dataset_classes\": 2, \"dataset_features\": 40, \"dataset_samples\": 5634, \"single_frequency_class_detected\": false}',\n  'ModelExplainRunId': 'AutoML_6914179d-c21b-43ef-968a-9564792a6b75_ModelExplain',\n  'azureml.git.repository_uri': 'https://github.com/vhcg77/nd00333-capstone.git',\n  'mlflow.source.git.repoURL': 'https://github.com/vhcg77/nd00333-capstone.git',\n  'azureml.git.branch': 'master',\n  'mlflow.source.git.branch': 'master',\n  'azureml.git.commit': '9d7f0e14371856363c13e7b6feba72e54bac9f66',\n  'mlflow.source.git.commit': '9d7f0e14371856363c13e7b6feba72e54bac9f66',\n  'azureml.git.dirty': 'True'},\n 'inputDatasets': [{'dataset': {'id': 'de13efab-9983-4223-83ce-7cab5689fb7a'}, 'consumptionDetails': {'type': 'RunInput', 'inputName': 'training_data', 'mechanism': 'Direct'}}, {'dataset': {'id': '82ab290a-d982-4196-87a6-3a357795dcd6'}, 'consumptionDetails': {'type': 'RunInput', 'inputName': 'test_data', 'mechanism': 'Direct'}}],\n 'outputDatasets': [],\n 'logFiles': {},\n 'submittedBy': 'ODL_User 162961'}"
          },
          "metadata": {}
        }
      ],
      "execution_count": 50,
      "metadata": {
        "gather": {
          "logged": 1636323230773
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Best Model\n",
        "\n",
        "TODO: In the cell below, get the best model from the automl experiments and display all the properties of the model.\n",
        "\n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Retrieve and save your best automl model.\n",
        "\n",
        "best_automl_run, fitted_automl_model = run.get_output()\n",
        "print(best_automl_run)\n",
        "\n",
        "print(\"Best run metrics: \")\n",
        "best_automl_run.get_metrics()\n",
        "fitted_automl_model"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "WARNING:root:The version of the SDK does not match the version the model was trained on.\nWARNING:root:The consistency in the result may not be guaranteed.\nWARNING:root:Package:azureml-automl-core, training version:1.35.1, current version:1.34.0\nPackage:azureml-automl-runtime, training version:1.35.1, current version:1.34.0\nPackage:azureml-core, training version:1.35.0.post1, current version:1.34.0\nPackage:azureml-dataprep, training version:2.23.2, current version:2.22.2\nPackage:azureml-dataprep-rslex, training version:1.21.2, current version:1.20.1\nPackage:azureml-dataset-runtime, training version:1.35.0, current version:1.34.0\nPackage:azureml-defaults, training version:1.35.0, current version:1.34.0\nPackage:azureml-interpret, training version:1.35.0, current version:1.34.0\nPackage:azureml-mlflow, training version:1.35.0, current version:1.34.0\nPackage:azureml-pipeline-core, training version:1.35.0, current version:1.34.0\nPackage:azureml-responsibleai, training version:1.35.0, current version:1.34.0\nPackage:azureml-telemetry, training version:1.35.0, current version:1.34.0\nPackage:azureml-train-automl-client, training version:1.35.0, current version:1.34.0\nPackage:azureml-train-automl-runtime, training version:1.35.1, current version:1.34.0\nPackage:azureml-train-core, training version:1.35.0, current version:1.34.0\nPackage:azureml-train-restclients-hyperdrive, training version:1.35.0, current version:1.34.0\nWARNING:root:Please ensure the version of your local conda dependencies match the version on which your model was trained in order to properly retrieve your model.\n"
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Run(Experiment: telco-customer-churn,\nId: AutoML_6914179d-c21b-43ef-968a-9564792a6b75_45,\nType: azureml.scriptrun,\nStatus: Completed)\nBest run metrics: \n"
        },
        {
          "output_type": "execute_result",
          "execution_count": 51,
          "data": {
            "text/plain": "PipelineWithYTransformations(Pipeline={'memory': None,\n                                       'steps': [('datatransformer',\n                                                  DataTransformer(enable_dnn=False, enable_feature_sweeping=True, feature_sweeping_config={}, feature_sweeping_timeout=86400, featurization_config=None, force_text_dnn=False, is_cross_validation=True, is_onnx_compatible=False, observer=None, task='classification', working_dir='/mn...\n    gpu_training_param_dict={'processing_unit_type': 'cpu'}\n), random_state=None))], verbose=False))], flatten_transform=None, weights=[0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.26666666666666666, 0.2, 0.06666666666666667, 0.06666666666666667]))],\n                                       'verbose': False},\n                             y_transformer={},\n                             y_transformer_name='LabelEncoder')"
          },
          "metadata": {}
        }
      ],
      "execution_count": 51,
      "metadata": {
        "gather": {
          "logged": 1636323748547
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#TODO: Save the best model\n",
        "\n",
        "\n",
        "#print(best_automl_run.get_file_names())\n",
        "\n",
        "models = [element for element in best_automl_run.get_file_names() if 'pkl' in element]\n",
        "models\n",
        "for model in models:\n",
        "    best_automl_run.download_file(name=model)"
      ],
      "outputs": [],
      "execution_count": 53,
      "metadata": {
        "gather": {
          "logged": 1636323750495
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Model Deployment\n",
        "\n",
        "Remember you have to deploy only one of the two models you trained.. Perform the steps in the rest of this notebook only if you wish to deploy this model.\n",
        "\n",
        "TODO: In the cell below, register the model, create an inference config and deploy the model as a web service."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "published_pipeline = pipeline_run.publish_pipeline(\n",
        "    name=\"Bankmarketing Train\", description=\"Training bankmarketing pipeline\", version=\"1.0\")\n",
        "\n",
        "published_pipeline"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1598431435189
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "TODO: In the cell below, send a request to the web service you deployed to test it."
      ],
      "metadata": {
        "collapsed": true,
        "gather": {
          "logged": 1598431657736
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "\n",
        "rest_endpoint = published_pipeline.endpoint\n",
        "response = requests.post(rest_endpoint, \n",
        "                         headers=auth_header, \n",
        "                         json={\"ExperimentName\": \"pipeline-rest-endpoint\"}\n",
        "                        )\n",
        "\n",
        "\n",
        "try:\n",
        "    response.raise_for_status()\n",
        "except Exception:    \n",
        "    raise Exception(\"Received bad response from the endpoint: {}\\n\"\n",
        "                    \"Response Code: {}\\n\"\n",
        "                    \"Headers: {}\\n\"\n",
        "                    \"Content: {}\".format(rest_endpoint, response.status_code, response.headers, response.content))\n",
        "\n",
        "run_id = response.json().get('Id')\n",
        "print('Submitted pipeline run: ', run_id)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1598432707604
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "TODO: In the cell below, print the logs of the web service and delete the service"
      ],
      "metadata": {
        "collapsed": true,
        "gather": {
          "logged": 1598432765711
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.pipeline.core.run import PipelineRun\n",
        "from azureml.widgets import RunDetails\n",
        "\n",
        "published_pipeline_run = PipelineRun(ws.experiments[\"pipeline-rest-endpoint\"], run_id)\n",
        "RunDetails(published_pipeline_run).show()"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    }
  ],
  "metadata": {
    "kernel_info": {
      "name": "python3"
    },
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.9",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "microsoft": {
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}