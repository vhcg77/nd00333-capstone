{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Hyperparameter Tuning using HyperDrive\n",
        "\n",
        "TODO: Import Dependencies. In the cell below, import all the dependencies that you will need to complete the project."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core.model import InferenceConfig\n",
        "from azureml.core import Model\n",
        "from azureml.core import Environment, Experiment, Workspace\n",
        "from azureml.widgets import RunDetails\n",
        "from azureml.train.sklearn import SKLearn\n",
        "from azureml.train.hyperdrive.run import PrimaryMetricGoal\n",
        "from azureml.train.hyperdrive.policy import BanditPolicy\n",
        "from azureml.train.hyperdrive.sampling import RandomParameterSampling\n",
        "from azureml.train.hyperdrive.runconfig import HyperDriveConfig\n",
        "from azureml.train.hyperdrive.parameter_expressions import uniform, choice\n",
        "from azureml.train.hyperdrive.parameter_expressions import choice, loguniform, uniform\n",
        "from azureml.core.dataset import Dataset\n",
        "from azureml.core.webservice import AciWebservice, Webservice\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "import os\n"
      ],
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "gather": {
          "logged": 1638648386431
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Dataset\n",
        "\n",
        "TODO: Get data. In the cell below, write code to access the data you will be using in this project. Remember that the dataset needs to be external.\n",
        "\n",
        "This dataset contains numerical input variables that come from and PCA algorithm. Due to confidential concerns, the original variables are not available. Features V1, V2, ..., V8 are the outputs of the principal components from the PCA algorithm. The time and amount are the variables that are not transformed by PCA. The target variable is the feature 'Class' and it takes values 1 in case of fraud and 0 otherwise.\n",
        "\n",
        "\n",
        "This dataset contains transations made by credit cards in September 2012 by European cardholders. This dataset contains 492 frauds out of 284807 transations, and it is highly unbalanced, the positive class (fraud) account for 0.172% of all the transations.\n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "ws = Workspace.from_config()\n",
        "\n",
        "# choose a name for experiment\n",
        "experiment_name = 'telco-customer-churn'\n",
        "experiment=Experiment(ws, experiment_name)\n",
        "\n",
        "# Try to load the dataset from the Workspace. Otherwise, create it from the file\n",
        "# NOTE: update the key to match the dataset name\n",
        "found = False\n",
        "key = \"Customer Churn\"\n",
        "description_text = \"Customer Churn DataSet for Udacity Capstone Project\"\n",
        "\n",
        "if key in ws.datasets.keys(): \n",
        "        found = True\n",
        "        dataset = ws.datasets[key] \n",
        "\n",
        "# if not found:\n",
        "#         # Create AML Dataset and register it into Workspace\n",
        "#         example_data = 'https://raw.githubusercontent.com/srees1988/predict-churn-py/main/customer_churn_data.csv'\n",
        "#         dataset = Dataset.Tabular.from_delimited_files(example_data)        \n",
        "#         #Register Dataset in Workspace\n",
        "#         dataset = dataset.register(workspace=ws,\n",
        "#                                    name=key,\n",
        "#                                    description=description_text)\n",
        "\n",
        "\n",
        "# df = dataset.to_pandas_dataframe()\n",
        "\n",
        "df = pd.read_csv(\n",
        "    \"https://raw.githubusercontent.com/srees1988/predict-churn-py/main/customer_churn_data.csv\"\n",
        ")\n",
        "\n",
        "df.describe()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 10,
          "data": {
            "text/plain": "       SeniorCitizen       tenure  MonthlyCharges\ncount    7043.000000  7043.000000     7043.000000\nmean        0.162147    32.371149       64.761692\nstd         0.368612    24.559481       30.090047\nmin         0.000000     0.000000       18.250000\n25%         0.000000     9.000000       35.500000\n50%         0.000000    29.000000       70.350000\n75%         0.000000    55.000000       89.850000\nmax         1.000000    72.000000      118.750000",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>SeniorCitizen</th>\n      <th>tenure</th>\n      <th>MonthlyCharges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>7043.000000</td>\n      <td>7043.000000</td>\n      <td>7043.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.162147</td>\n      <td>32.371149</td>\n      <td>64.761692</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.368612</td>\n      <td>24.559481</td>\n      <td>30.090047</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>18.250000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.000000</td>\n      <td>9.000000</td>\n      <td>35.500000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>0.000000</td>\n      <td>29.000000</td>\n      <td>70.350000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>0.000000</td>\n      <td>55.000000</td>\n      <td>89.850000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.000000</td>\n      <td>72.000000</td>\n      <td>118.750000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 10,
      "metadata": {
        "gather": {
          "logged": 1638648563691
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 11,
          "data": {
            "text/plain": "   customerID  gender  SeniorCitizen Partner Dependents  tenure PhoneService  \\\n0  7590-VHVEG  Female              0     Yes         No       1           No   \n1  5575-GNVDE    Male              0      No         No      34          Yes   \n2  3668-QPYBK    Male              0      No         No       2          Yes   \n3  7795-CFOCW    Male              0      No         No      45           No   \n4  9237-HQITU  Female              0      No         No       2          Yes   \n\n      MultipleLines InternetService OnlineSecurity  ... DeviceProtection  \\\n0  No phone service             DSL             No  ...               No   \n1                No             DSL            Yes  ...              Yes   \n2                No             DSL            Yes  ...               No   \n3  No phone service             DSL            Yes  ...              Yes   \n4                No     Fiber optic             No  ...               No   \n\n  TechSupport StreamingTV StreamingMovies        Contract PaperlessBilling  \\\n0          No          No              No  Month-to-month              Yes   \n1          No          No              No        One year               No   \n2          No          No              No  Month-to-month              Yes   \n3         Yes          No              No        One year               No   \n4          No          No              No  Month-to-month              Yes   \n\n               PaymentMethod MonthlyCharges  TotalCharges Churn  \n0           Electronic check          29.85         29.85    No  \n1               Mailed check          56.95        1889.5    No  \n2               Mailed check          53.85        108.15   Yes  \n3  Bank transfer (automatic)          42.30       1840.75    No  \n4           Electronic check          70.70        151.65   Yes  \n\n[5 rows x 21 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>customerID</th>\n      <th>gender</th>\n      <th>SeniorCitizen</th>\n      <th>Partner</th>\n      <th>Dependents</th>\n      <th>tenure</th>\n      <th>PhoneService</th>\n      <th>MultipleLines</th>\n      <th>InternetService</th>\n      <th>OnlineSecurity</th>\n      <th>...</th>\n      <th>DeviceProtection</th>\n      <th>TechSupport</th>\n      <th>StreamingTV</th>\n      <th>StreamingMovies</th>\n      <th>Contract</th>\n      <th>PaperlessBilling</th>\n      <th>PaymentMethod</th>\n      <th>MonthlyCharges</th>\n      <th>TotalCharges</th>\n      <th>Churn</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7590-VHVEG</td>\n      <td>Female</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>1</td>\n      <td>No</td>\n      <td>No phone service</td>\n      <td>DSL</td>\n      <td>No</td>\n      <td>...</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Month-to-month</td>\n      <td>Yes</td>\n      <td>Electronic check</td>\n      <td>29.85</td>\n      <td>29.85</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5575-GNVDE</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>No</td>\n      <td>No</td>\n      <td>34</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>DSL</td>\n      <td>Yes</td>\n      <td>...</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>One year</td>\n      <td>No</td>\n      <td>Mailed check</td>\n      <td>56.95</td>\n      <td>1889.5</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3668-QPYBK</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>No</td>\n      <td>No</td>\n      <td>2</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>DSL</td>\n      <td>Yes</td>\n      <td>...</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Month-to-month</td>\n      <td>Yes</td>\n      <td>Mailed check</td>\n      <td>53.85</td>\n      <td>108.15</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7795-CFOCW</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>No</td>\n      <td>No</td>\n      <td>45</td>\n      <td>No</td>\n      <td>No phone service</td>\n      <td>DSL</td>\n      <td>Yes</td>\n      <td>...</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>One year</td>\n      <td>No</td>\n      <td>Bank transfer (automatic)</td>\n      <td>42.30</td>\n      <td>1840.75</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9237-HQITU</td>\n      <td>Female</td>\n      <td>0</td>\n      <td>No</td>\n      <td>No</td>\n      <td>2</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Fiber optic</td>\n      <td>No</td>\n      <td>...</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Month-to-month</td>\n      <td>Yes</td>\n      <td>Electronic check</td>\n      <td>70.70</td>\n      <td>151.65</td>\n      <td>Yes</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 21 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 11,
      "metadata": {
        "gather": {
          "logged": 1638648566468
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Preprocessing data"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def clean_data(df):\n",
        "    df.drop(\"customerID\", axis=1, inplace=True)\n",
        "\n",
        "    # replace blanks with np.nan\n",
        "    df[\"TotalCharges\"] = df[\"TotalCharges\"].replace(\" \", np.nan)\n",
        "    # convert to float64\n",
        "    df[\"TotalCharges\"] = df[\"TotalCharges\"].astype(\"float64\")\n",
        "\n",
        "    df[\"TotalCharges\"] = df[\"TotalCharges\"].fillna(df[\"TotalCharges\"].median())\n",
        "\n",
        "    # Replace binary values\n",
        "    df[\"gender\"] = df[\"gender\"].apply(lambda s: 1 if s == \"Female\" else 0)\n",
        "    df[\"Partner\"] = df[\"Partner\"].apply(lambda s: 1 if s == \"Yes\" else 0)\n",
        "    df[\"Dependents\"] = df[\"Dependents\"].apply(lambda s: 1 if s == \"Yes\" else 0)\n",
        "    df[\"PhoneService\"] = df[\"PhoneService\"].apply(lambda s: 1 if s == \"Yes\" else 0)\n",
        "    df[\"PaperlessBilling\"] = df[\"PaperlessBilling\"].apply(\n",
        "        lambda s: 1 if s == \"Yes\" else 0\n",
        "    )\n",
        "    df[\"Churn\"] = df[\"Churn\"].apply(lambda s: 1 if s == \"Yes\" else 0)\n",
        "\n",
        "    MultipleLines = pd.get_dummies(df[\"MultipleLines\"], prefix=\"MultipleLines\")\n",
        "    df.drop(\"MultipleLines\", inplace=True, axis=1)\n",
        "    df = df.join(MultipleLines)\n",
        "    InternetService = pd.get_dummies(df[\"InternetService\"], prefix=\"InternetService\")\n",
        "    df.drop(\"InternetService\", inplace=True, axis=1)\n",
        "    df = df.join(InternetService)\n",
        "    OnlineSecurity = pd.get_dummies(df[\"OnlineSecurity\"], prefix=\"OnlineSecurity\")\n",
        "    df.drop(\"OnlineSecurity\", inplace=True, axis=1)\n",
        "    df = df.join(OnlineSecurity)\n",
        "    OnlineBackup = pd.get_dummies(df[\"OnlineBackup\"], prefix=\"OnlineBackup\")\n",
        "    df.drop(\"OnlineBackup\", inplace=True, axis=1)\n",
        "    df = df.join(OnlineBackup)\n",
        "    DeviceProtection = pd.get_dummies(df[\"DeviceProtection\"], prefix=\"DeviceProtection\")\n",
        "    df.drop(\"DeviceProtection\", inplace=True, axis=1)\n",
        "    df = df.join(DeviceProtection)\n",
        "    TechSupport = pd.get_dummies(df[\"TechSupport\"], prefix=\"TechSupport\")\n",
        "    df.drop(\"TechSupport\", inplace=True, axis=1)\n",
        "    df = df.join(TechSupport)\n",
        "    StreamingTV = pd.get_dummies(df[\"StreamingTV\"], prefix=\"StreamingTV\")\n",
        "    df.drop(\"StreamingTV\", inplace=True, axis=1)\n",
        "    df = df.join(StreamingTV)\n",
        "    StreamingMovies = pd.get_dummies(df[\"StreamingMovies\"], prefix=\"StreamingMovies\")\n",
        "    df.drop(\"StreamingMovies\", inplace=True, axis=1)\n",
        "    df = df.join(StreamingMovies)\n",
        "    Contract = pd.get_dummies(df[\"Contract\"], prefix=\"Contract\")\n",
        "    df.drop(\"Contract\", inplace=True, axis=1)\n",
        "    df = df.join(Contract)\n",
        "    PaymentMethod = pd.get_dummies(df[\"PaymentMethod\"], prefix=\"PaymentMethod\")\n",
        "    df.drop(\"PaymentMethod\", inplace=True, axis=1)\n",
        "    df = df.join(PaymentMethod)\n",
        "    y_df = df.pop(\"Churn\")\n",
        "    # x_df = df.drop(\"Churn\", inplace=True, axis=1)\n",
        "\n",
        "    return df, y_df\n"
      ],
      "outputs": [],
      "execution_count": 12,
      "metadata": {
        "gather": {
          "logged": 1638648572424
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x, y = clean_data(df)"
      ],
      "outputs": [],
      "execution_count": 13,
      "metadata": {
        "gather": {
          "logged": 1638648573415
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Train test Split Dataset"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# TODO: Split data into train and test sets.\n",
        "x_train, x_test, y_train, y_test = train_test_split(\n",
        "    x, y, test_size=0.2, stratify=y, random_state=42\n",
        ")\n",
        "\n",
        "train_dataset = pd.concat([x_train,pd.DataFrame(y_train)], axis=1)\n",
        "test_dataset = pd.concat([x_test,pd.DataFrame(y_test)], axis=1)\n",
        "\n",
        "# directory = 'train'\n",
        "# if not os.path.exists(directory):\n",
        "#     os.makedirs(directory)\n",
        "    \n",
        "# directory = 'test'\n",
        "# if not os.path.exists(directory):\n",
        "#     os.makedirs(directory)\n",
        "\n",
        "# # Export data as csv\n",
        "# train_dataset.to_csv(\"./train/train_data.csv\", index=False)\n",
        "# test_dataset.to_csv(\"./test/test_data.csv\", index=False)\n",
        "\n",
        "# # # Upload data to the datastore\n",
        "# datastore = ws.get_default_datastore()\n",
        "# datastore.upload(src_dir='./train', target_path = experiment_name)\n",
        "# datastore.upload(src_dir='./test', target_path = experiment_name)\n",
        "# print('Data uploaded to DataStore')\n",
        "\n",
        "# csv_path_train = [(datastore, experiment_name+'/train_data.csv')]\n",
        "# csv_path_test = [(datastore, experiment_name+'/test_data.csv')]\n",
        "\n",
        "# train_data = Dataset.Tabular.from_delimited_files(path=csv_path_train)\n",
        "# test_data = Dataset.Tabular.from_delimited_files(path=csv_path_test)\n",
        "\n",
        "# display(train_data.to_pandas_dataframe().head())\n",
        "# display(test_data.to_pandas_dataframe().head())\n"
      ],
      "outputs": [],
      "execution_count": 14,
      "metadata": {
        "gather": {
          "logged": 1638648574801
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y_train.value_counts()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 15,
          "data": {
            "text/plain": "0    4139\n1    1495\nName: Churn, dtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 15,
      "metadata": {
        "gather": {
          "logged": 1638648575956
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y_test.value_counts()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 16,
          "data": {
            "text/plain": "0    1035\n1     374\nName: Churn, dtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 16,
      "metadata": {
        "gather": {
          "logged": 1638648576552
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Cluster Provisioning"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core.compute import ComputeTarget, AmlCompute\n",
        "from azureml.core.compute_target import ComputeTargetException\n",
        "\n",
        "# TODO: Create compute cluster\n",
        "# Use vm_size = \"Standard_D2_V2\" in your provisioning configuration.\n",
        "# max_nodes should be no greater than 4.\n",
        "\n",
        "\n",
        "cluster_name = \"cluster-vhcg\"\n",
        "# verify that the cluster does not exist already\n",
        "try:\n",
        "    cpu_cluster = ComputeTarget(workspace=ws, name = cluster_name)\n",
        "    print('Found existing cluster, use it.')\n",
        "except ComputeTargetException:\n",
        "    compute_config = AmlCompute.provisioning_configuration(vm_size='Standard_DS12_V2', max_nodes = 4, idle_seconds_before_scaledown=120)\n",
        "    cpu_cluster = ComputeTarget.create(ws, cluster_name, compute_config)\n",
        "\n",
        "cpu_cluster.wait_for_completion(show_output=True)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "InProgress....\nSucceededProvisioning operation finished, operation \"Succeeded\"\nSucceeded\nAmlCompute wait for completion finished\n\nMinimum number of nodes requested have been provisioned\n"
        }
      ],
      "execution_count": 17,
      "metadata": {
        "gather": {
          "logged": 1638648601338
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Hyperdrive Configuration\n",
        "\n",
        "TODO: Explain the model you are using and the reason for chosing the different hyperparameters, termination policy and config settings."
      ],
      "metadata": {
        "collapsed": true,
        "gather": {
          "logged": 1598531923519
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.widgets import RunDetails\n",
        "from azureml.train.sklearn import SKLearn\n",
        "from azureml.train.hyperdrive.run import PrimaryMetricGoal\n",
        "from azureml.train.hyperdrive.policy import BanditPolicy\n",
        "from azureml.train.hyperdrive.sampling import RandomParameterSampling\n",
        "from azureml.train.hyperdrive.runconfig import HyperDriveConfig\n",
        "from azureml.train.hyperdrive.parameter_expressions import uniform, choice, quniform\n",
        "import os\n",
        "\n",
        "# Specify parameter sampler\n",
        "ps = RandomParameterSampling({\n",
        "    '--n_estimators': choice(10, 100, 200, 500, 700, 1000, 1500, 2000),\n",
        "    '--max_features': uniform(0.5, 1.0),\n",
        "    '--max_depth': choice(10, 20, 30, 40, 50, 60, 70, 80, 90, 100),\n",
        "    '--min_samples_split': uniform(0.0001, 1.0),\n",
        "    '--min_samples_leaf': uniform(0.00001, 0.5),\n",
        "    # '--bootstrap': choice(True, False),\n",
        "})\n",
        "\n",
        "# Specify a Policy\n",
        "policy = BanditPolicy(slack_factor=0.1, evaluation_interval=2, delay_evaluation=10)\n",
        "\n",
        "if \"training\" not in os.listdir():\n",
        "    os.mkdir(\"./training\")\n",
        "\n",
        "# Create a SKLearn estimator for use with train.py\n",
        "est = SKLearn(source_directory='./', compute_target=cpu_cluster, entry_script='train_forest.py')\n",
        "\n",
        "# Create a HyperDriveConfig using the estimator, hyperparameter sampler, and policy.\n",
        "hyperdrive_config = HyperDriveConfig( hyperparameter_sampling=ps, \n",
        "                                        primary_metric_name='AUC_weighted', \n",
        "                                        primary_metric_goal=PrimaryMetricGoal.MAXIMIZE, \n",
        "                                        max_total_runs=5, \n",
        "                                        max_concurrent_runs=4, \n",
        "                                        max_duration_minutes=10080, \n",
        "                                        policy=policy, \n",
        "                                        estimator=est)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "'SKLearn' estimator is deprecated. Please use 'ScriptRunConfig' from 'azureml.core.script_run_config' with your own defined environment or the AzureML-Tutorial curated environment.\n'enabled' is deprecated. Please use the azureml.core.runconfig.DockerConfiguration object with the 'use_docker' param instead.\n"
        }
      ],
      "execution_count": 18,
      "metadata": {
        "gather": {
          "logged": 1638648975609
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#TODO: Submit your experiment\n",
        "\n",
        "hyperdrive_run = experiment.submit(hyperdrive_config)\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "WARNING:root:If 'script' has been provided here and a script file name has been specified in 'run_config', 'script' provided in ScriptRunConfig initialization will take precedence.\nWARNING:urllib3.connectionpool:Connection pool is full, discarding connection: mlstrg165039.blob.core.windows.net\nWARNING:urllib3.connectionpool:Connection pool is full, discarding connection: mlstrg165039.blob.core.windows.net\nWARNING:urllib3.connectionpool:Connection pool is full, discarding connection: mlstrg165039.blob.core.windows.net\nWARNING:urllib3.connectionpool:Connection pool is full, discarding connection: mlstrg165039.blob.core.windows.net\nWARNING:urllib3.connectionpool:Connection pool is full, discarding connection: mlstrg165039.blob.core.windows.net\nWARNING:urllib3.connectionpool:Connection pool is full, discarding connection: mlstrg165039.blob.core.windows.net\nWARNING:urllib3.connectionpool:Connection pool is full, discarding connection: mlstrg165039.blob.core.windows.net\nWARNING:urllib3.connectionpool:Connection pool is full, discarding connection: mlstrg165039.blob.core.windows.net\nWARNING:urllib3.connectionpool:Connection pool is full, discarding connection: mlstrg165039.blob.core.windows.net\nWARNING:urllib3.connectionpool:Connection pool is full, discarding connection: mlstrg165039.blob.core.windows.net\n"
        }
      ],
      "execution_count": 19,
      "metadata": {
        "gather": {
          "logged": 1638648987384
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Run Details\n",
        "\n",
        "OPTIONAL: Write about the different models trained and their performance. Why do you think some models did better than others?\n",
        "\n",
        "TODO: In the cell below, use the `RunDetails` widget to show the different experiments."
      ],
      "metadata": {
        "collapsed": true,
        "gather": {
          "logged": 1598544898497
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "RunDetails(hyperdrive_run).show()\n",
        "hyperdrive_run.wait_for_completion(show_output=True)"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "_HyperDriveWidget(widget_settings={'childWidgetDisplay': 'popup', 'send_telemetry': False, 'log_level': 'INFO'…",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "d3625195b65e43d183d793a513fa36c1"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "application/aml.mini.widget.v1": "{\"status\": \"Completed\", \"workbench_run_details_uri\": \"https://ml.azure.com/runs/HD_95af88e2-8e32-468f-a9c9-b754017b897d?wsid=/subscriptions/aa7cf8e8-d23f-4bce-a7b9-1f0b4e0ac8ee/resourcegroups/aml-quickstarts-165039/workspaces/quick-starts-ws-165039&tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\", \"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d\", \"run_properties\": {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d\", \"created_utc\": \"2021-12-04T20:16:25.932824Z\", \"properties\": {\"primary_metric_config\": \"{\\\"name\\\": \\\"AUC_weighted\\\", \\\"goal\\\": \\\"maximize\\\"}\", \"resume_from\": \"null\", \"runTemplate\": \"HyperDrive\", \"azureml.runsource\": \"hyperdrive\", \"platform\": \"AML\", \"ContentSnapshotId\": \"4e7a759e-7192-44ab-beca-d604f7b69270\", \"user_agent\": \"python/3.6.9 (Linux-5.4.0-1056-azure-x86_64-with-debian-buster-sid) msrest/0.6.21 Hyperdrive.Service/1.0.0 Hyperdrive.SDK/core.1.34.0\", \"score\": \"0.8553818563872182\", \"best_child_run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_8\", \"best_metric_status\": \"Succeeded\"}, \"tags\": {\"_aml_system_max_concurrent_jobs\": \"4\", \"_aml_system_max_total_jobs\": \"25\", \"_aml_system_max_duration_minutes\": \"10080\", \"_aml_system_policy_config\": \"{\\\"name\\\": \\\"BANDIT\\\", \\\"properties\\\": {\\\"evaluation_interval\\\": 2, \\\"delay_evaluation\\\": 10, \\\"slack_factor\\\": 0.1}}\", \"_aml_system_generator_config\": \"{\\\"name\\\": \\\"RANDOM\\\", \\\"parameter_space\\\": {\\\"--n_estimators\\\": [\\\"choice\\\", [[10, 100, 200, 500, 700, 1000, 1500, 2000]]], \\\"--max_features\\\": [\\\"uniform\\\", [0.5, 1.0]], \\\"--max_depth\\\": [\\\"choice\\\", [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]]], \\\"--min_samples_split\\\": [\\\"uniform\\\", [0.0001, 1.0]], \\\"--min_samples_leaf\\\": [\\\"uniform\\\", [1e-05, 0.5]]}}\", \"_aml_system_primary_metric_config\": \"{\\\"name\\\": \\\"AUC_weighted\\\", \\\"goal\\\": \\\"maximize\\\"}\", \"_aml_system_platform_config\": \"{\\\"ServiceAddress\\\": \\\"https://southcentralus.experiments.azureml.net\\\", \\\"ServiceArmScope\\\": \\\"subscriptions/aa7cf8e8-d23f-4bce-a7b9-1f0b4e0ac8ee/resourceGroups/aml-quickstarts-165039/providers/Microsoft.MachineLearningServices/workspaces/quick-starts-ws-165039/experiments/telco-customer-churn\\\", \\\"SubscriptionId\\\": \\\"aa7cf8e8-d23f-4bce-a7b9-1f0b4e0ac8ee\\\", \\\"ResourceGroupName\\\": \\\"aml-quickstarts-165039\\\", \\\"WorkspaceName\\\": \\\"quick-starts-ws-165039\\\", \\\"ExperimentName\\\": \\\"telco-customer-churn\\\", \\\"Definition\\\": {\\\"Overrides\\\": {\\\"script\\\": \\\"train_forest.py\\\", \\\"arguments\\\": [], \\\"target\\\": \\\"cluster-vhcg\\\", \\\"framework\\\": \\\"Python\\\", \\\"communicator\\\": \\\"None\\\", \\\"maxRunDurationSeconds\\\": null, \\\"nodeCount\\\": 1, \\\"priority\\\": null, \\\"environment\\\": {\\\"name\\\": null, \\\"version\\\": null, \\\"environmentVariables\\\": {\\\"EXAMPLE_ENV_VAR\\\": \\\"EXAMPLE_VALUE\\\"}, \\\"python\\\": {\\\"userManagedDependencies\\\": true, \\\"interpreterPath\\\": \\\"python\\\", \\\"condaDependenciesFile\\\": null, \\\"baseCondaEnvironment\\\": null, \\\"condaDependencies\\\": {\\\"name\\\": \\\"project_environment\\\", \\\"dependencies\\\": [\\\"python=3.6.2\\\", {\\\"pip\\\": [\\\"azureml-defaults\\\"]}], \\\"channels\\\": [\\\"anaconda\\\", \\\"conda-forge\\\"]}}, \\\"docker\\\": {\\\"enabled\\\": true, \\\"baseImage\\\": \\\"sklearn:0.20.3-cpu\\\", \\\"baseDockerfile\\\": null, \\\"sharedVolumes\\\": true, \\\"shmSize\\\": \\\"2g\\\", \\\"arguments\\\": [], \\\"baseImageRegistry\\\": {\\\"address\\\": \\\"viennaprivate.azurecr.io\\\", \\\"username\\\": null, \\\"password\\\": null, \\\"registryIdentity\\\": null}, \\\"platform\\\": {\\\"os\\\": \\\"Linux\\\", \\\"architecture\\\": \\\"amd64\\\"}}, \\\"spark\\\": {\\\"repositories\\\": [], \\\"packages\\\": [], \\\"precachePackages\\\": false}, \\\"databricks\\\": {\\\"mavenLibraries\\\": [], \\\"pypiLibraries\\\": [], \\\"rcranLibraries\\\": [], \\\"jarLibraries\\\": [], \\\"eggLibraries\\\": []}, \\\"r\\\": null, \\\"inferencingStackVersion\\\": null}, \\\"history\\\": {\\\"outputCollection\\\": true, \\\"snapshotProject\\\": true, \\\"directoriesToWatch\\\": [\\\"logs\\\"]}, \\\"spark\\\": {\\\"configuration\\\": {\\\"spark.app.name\\\": \\\"Azure ML Experiment\\\", \\\"spark.yarn.maxAppAttempts\\\": 1}}, \\\"docker\\\": {\\\"useDocker\\\": false, \\\"sharedVolumes\\\": true, \\\"arguments\\\": [], \\\"shmSize\\\": \\\"2g\\\"}, \\\"hdi\\\": {\\\"yarnDeployMode\\\": \\\"cluster\\\"}, \\\"tensorflow\\\": {\\\"workerCount\\\": 1, \\\"parameterServerCount\\\": 1}, \\\"mpi\\\": {\\\"processCountPerNode\\\": 1, \\\"nodeCount\\\": 1}, \\\"pytorch\\\": {\\\"communicationBackend\\\": \\\"nccl\\\", \\\"processCount\\\": null, \\\"nodeCount\\\": 1}, \\\"paralleltask\\\": {\\\"maxRetriesPerWorker\\\": 0, \\\"workerCountPerNode\\\": 1, \\\"terminalExitCodes\\\": null}, \\\"dataReferences\\\": {}, \\\"data\\\": {}, \\\"outputData\\\": {}, \\\"sourceDirectoryDataStore\\\": null, \\\"amlcompute\\\": {\\\"vmSize\\\": null, \\\"vmPriority\\\": null, \\\"retainCluster\\\": false, \\\"name\\\": null, \\\"clusterMaxNodeCount\\\": 1}, \\\"credentialPassthrough\\\": false, \\\"command\\\": \\\"\\\", \\\"environmentVariables\\\": {}, \\\"applicationEndpoints\\\": {}}, \\\"TargetDetails\\\": null, \\\"SnapshotId\\\": \\\"4e7a759e-7192-44ab-beca-d604f7b69270\\\", \\\"TelemetryValues\\\": {\\\"amlClientType\\\": \\\"azureml-sdk-train\\\", \\\"amlClientModule\\\": \\\"[Scrubbed]\\\", \\\"amlClientFunction\\\": \\\"[Scrubbed]\\\", \\\"tenantId\\\": \\\"660b3398-b80e-49d2-bc5b-ac1dc93b5254\\\", \\\"amlClientRequestId\\\": \\\"01b7ffa3-e2d6-4329-949d-db240ff552c5\\\", \\\"amlClientSessionId\\\": \\\"cade52d5-bacc-4df0-bd7f-a034b99fc34a\\\", \\\"subscriptionId\\\": \\\"aa7cf8e8-d23f-4bce-a7b9-1f0b4e0ac8ee\\\", \\\"estimator\\\": \\\"SKLearn\\\", \\\"samplingMethod\\\": \\\"RANDOM\\\", \\\"terminationPolicy\\\": \\\"Bandit\\\", \\\"primaryMetricGoal\\\": \\\"maximize\\\", \\\"maxTotalRuns\\\": 25, \\\"maxConcurrentRuns\\\": 4, \\\"maxDurationMinutes\\\": 10080, \\\"vmSize\\\": null}}}\", \"_aml_system_resume_child_runs\": \"null\", \"_aml_system_all_jobs_generated\": \"true\", \"_aml_system_cancellation_requested\": \"false\", \"_aml_system_progress_metadata_evaluation_timestamp\": \"\\\"2021-12-04T20:16:26.811754\\\"\", \"_aml_system_progress_metadata_digest\": \"\\\"a85bee7b0895d195f176232362493a5200b1202b54f2c0f4abe50c56febf9174\\\"\", \"_aml_system_progress_metadata_active_timestamp\": \"\\\"2021-12-04T20:16:26.811754\\\"\", \"_aml_system_optimizer_state_artifact\": \"null\", \"_aml_system_outdated_optimizer_state_artifacts\": \"\\\"[]\\\"\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_0\": \"{\\\"--max_depth\\\": 100, \\\"--max_features\\\": 0.5667853301952119, \\\"--min_samples_leaf\\\": 0.4932327378053848, \\\"--min_samples_split\\\": 0.687741381247643, \\\"--n_estimators\\\": 100}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_1\": \"{\\\"--max_depth\\\": 80, \\\"--max_features\\\": 0.5502330560558484, \\\"--min_samples_leaf\\\": 0.21759030201738427, \\\"--min_samples_split\\\": 0.6590149849834244, \\\"--n_estimators\\\": 1500}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_2\": \"{\\\"--max_depth\\\": 10, \\\"--max_features\\\": 0.6168980931845642, \\\"--min_samples_leaf\\\": 0.4981833274538551, \\\"--min_samples_split\\\": 0.2506143745151337, \\\"--n_estimators\\\": 100}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_3\": \"{\\\"--max_depth\\\": 40, \\\"--max_features\\\": 0.7347646334883301, \\\"--min_samples_leaf\\\": 0.2904980345242993, \\\"--min_samples_split\\\": 0.056383397153516354, \\\"--n_estimators\\\": 1000}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_4\": \"{\\\"--max_depth\\\": 80, \\\"--max_features\\\": 0.6478176818831635, \\\"--min_samples_leaf\\\": 0.37490706564040266, \\\"--min_samples_split\\\": 0.13094382452429032, \\\"--n_estimators\\\": 1000}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_5\": \"{\\\"--max_depth\\\": 70, \\\"--max_features\\\": 0.5370187400361137, \\\"--min_samples_leaf\\\": 0.28534542057118795, \\\"--min_samples_split\\\": 0.6633579244342472, \\\"--n_estimators\\\": 1000}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_6\": \"{\\\"--max_depth\\\": 80, \\\"--max_features\\\": 0.9064535499066405, \\\"--min_samples_leaf\\\": 0.035896483972630046, \\\"--min_samples_split\\\": 0.012337394545863245, \\\"--n_estimators\\\": 10}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_7\": \"{\\\"--max_depth\\\": 20, \\\"--max_features\\\": 0.5286292619326907, \\\"--min_samples_leaf\\\": 0.46844908056791335, \\\"--min_samples_split\\\": 0.4330907065753207, \\\"--n_estimators\\\": 1500}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_8\": \"{\\\"--max_depth\\\": 30, \\\"--max_features\\\": 0.5117122092251563, \\\"--min_samples_leaf\\\": 0.04802171307868145, \\\"--min_samples_split\\\": 0.1284235927805228, \\\"--n_estimators\\\": 1500}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_9\": \"{\\\"--max_depth\\\": 80, \\\"--max_features\\\": 0.9947326873554736, \\\"--min_samples_leaf\\\": 0.04346151080260284, \\\"--min_samples_split\\\": 0.5957397090895037, \\\"--n_estimators\\\": 200}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_10\": \"{\\\"--max_depth\\\": 60, \\\"--max_features\\\": 0.8251518759701635, \\\"--min_samples_leaf\\\": 0.42884669181205703, \\\"--min_samples_split\\\": 0.6884369786880737, \\\"--n_estimators\\\": 100}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_11\": \"{\\\"--max_depth\\\": 50, \\\"--max_features\\\": 0.74063926552642, \\\"--min_samples_leaf\\\": 0.0630770732820144, \\\"--min_samples_split\\\": 0.7677050410718659, \\\"--n_estimators\\\": 1500}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_12\": \"{\\\"--max_depth\\\": 20, \\\"--max_features\\\": 0.8598378037159542, \\\"--min_samples_leaf\\\": 0.1843982385414359, \\\"--min_samples_split\\\": 0.11851802010382924, \\\"--n_estimators\\\": 200}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_13\": \"{\\\"--max_depth\\\": 60, \\\"--max_features\\\": 0.9515251704474161, \\\"--min_samples_leaf\\\": 0.08981188350332883, \\\"--min_samples_split\\\": 0.9727678502273479, \\\"--n_estimators\\\": 1000}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_14\": \"{\\\"--max_depth\\\": 80, \\\"--max_features\\\": 0.5813203706943916, \\\"--min_samples_leaf\\\": 0.08474906270720022, \\\"--min_samples_split\\\": 0.5358281989105351, \\\"--n_estimators\\\": 500}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_15\": \"{\\\"--max_depth\\\": 100, \\\"--max_features\\\": 0.7788993002933011, \\\"--min_samples_leaf\\\": 0.485632431538341, \\\"--min_samples_split\\\": 0.3758567967803523, \\\"--n_estimators\\\": 10}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_16\": \"{\\\"--max_depth\\\": 90, \\\"--max_features\\\": 0.8076935278789328, \\\"--min_samples_leaf\\\": 0.40532747560274607, \\\"--min_samples_split\\\": 0.593463554250824, \\\"--n_estimators\\\": 200}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_17\": \"{\\\"--max_depth\\\": 90, \\\"--max_features\\\": 0.9424464850530347, \\\"--min_samples_leaf\\\": 0.3839271413904486, \\\"--min_samples_split\\\": 0.4960698460864696, \\\"--n_estimators\\\": 1500}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_18\": \"{\\\"--max_depth\\\": 90, \\\"--max_features\\\": 0.8845788421033327, \\\"--min_samples_leaf\\\": 0.015643007674288275, \\\"--min_samples_split\\\": 0.3264212102972915, \\\"--n_estimators\\\": 500}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_19\": \"{\\\"--max_depth\\\": 90, \\\"--max_features\\\": 0.8291897382639968, \\\"--min_samples_leaf\\\": 0.2324092545014483, \\\"--min_samples_split\\\": 0.10116395444169225, \\\"--n_estimators\\\": 100}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_20\": \"{\\\"--max_depth\\\": 30, \\\"--max_features\\\": 0.5808005989394467, \\\"--min_samples_leaf\\\": 0.16615870408256356, \\\"--min_samples_split\\\": 0.2292586302776355, \\\"--n_estimators\\\": 10}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_21\": \"{\\\"--max_depth\\\": 30, \\\"--max_features\\\": 0.7038990733495525, \\\"--min_samples_leaf\\\": 0.40657297228324935, \\\"--min_samples_split\\\": 0.9405709498950441, \\\"--n_estimators\\\": 1000}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_22\": \"{\\\"--max_depth\\\": 20, \\\"--max_features\\\": 0.5808870127610011, \\\"--min_samples_leaf\\\": 0.17106220349471254, \\\"--min_samples_split\\\": 0.9307365266902221, \\\"--n_estimators\\\": 200}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_23\": \"{\\\"--max_depth\\\": 60, \\\"--max_features\\\": 0.5959699466401503, \\\"--min_samples_leaf\\\": 0.29285154000628133, \\\"--min_samples_split\\\": 0.6560877504044967, \\\"--n_estimators\\\": 1500}\", \"_aml_system_HD_95af88e2-8e32-468f-a9c9-b754017b897d_24\": \"{\\\"--max_depth\\\": 90, \\\"--max_features\\\": 0.9954813563552314, \\\"--min_samples_leaf\\\": 0.1718942433181152, \\\"--min_samples_split\\\": 0.09714136617344961, \\\"--n_estimators\\\": 200}\", \"_aml_system_final_best_metric_update_retry_count\": \"1\"}, \"end_time_utc\": \"2021-12-04T20:32:09.728716Z\", \"status\": \"Completed\", \"log_files\": {\"azureml-logs/hyperdrive.txt\": \"https://mlstrg165039.blob.core.windows.net/azureml/ExperimentRun/dcid.HD_95af88e2-8e32-468f-a9c9-b754017b897d/azureml-logs/hyperdrive.txt?sv=2019-07-07&sr=b&sig=MgcXLvLfEIlSpXYRjHY8ibl2Cj5R%2BzkPMVd1LPogQJ8%3D&skoid=37eca691-81d1-43f5-ba90-0cc898d6b0c7&sktid=660b3398-b80e-49d2-bc5b-ac1dc93b5254&skt=2021-12-04T20%3A06%3A33Z&ske=2021-12-06T04%3A16%3A33Z&sks=b&skv=2019-07-07&st=2021-12-04T23%3A48%3A02Z&se=2021-12-05T07%3A58%3A02Z&sp=r\"}, \"log_groups\": [[\"azureml-logs/hyperdrive.txt\"]], \"run_duration\": \"0:15:43\", \"run_number\": \"1\", \"run_queued_details\": {\"status\": \"Completed\", \"details\": null}, \"hyper_parameters\": {\"--n_estimators\": [\"choice\", [[10, 100, 200, 500, 700, 1000, 1500, 2000]]], \"--max_features\": [\"uniform\", [0.5, 1.0]], \"--max_depth\": [\"choice\", [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]]], \"--min_samples_split\": [\"uniform\", [0.0001, 1.0]], \"--min_samples_leaf\": [\"uniform\", [1e-05, 0.5]]}}, \"child_runs\": [{\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_0\", \"run_number\": 2, \"metric\": 0.5, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:16:57.135375Z\", \"end_time\": \"2021-12-04T20:20:10.252462Z\", \"created_time\": \"2021-12-04T20:16:57.135375Z\", \"created_time_dt\": \"2021-12-04T20:16:57.135375Z\", \"duration\": \"0:03:13\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 100, \"param_--max_features\": 0.5667853301952119, \"param_--min_samples_leaf\": 0.4932327378053848, \"param_--min_samples_split\": 0.687741381247643, \"param_--n_estimators\": 100, \"best_metric\": 0.5}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_3\", \"run_number\": 3, \"metric\": 0.81304538, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:16:57.206025Z\", \"end_time\": \"2021-12-04T20:20:13.19588Z\", \"created_time\": \"2021-12-04T20:16:57.206025Z\", \"created_time_dt\": \"2021-12-04T20:16:57.206025Z\", \"duration\": \"0:03:15\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 40, \"param_--max_features\": 0.7347646334883301, \"param_--min_samples_leaf\": 0.2904980345242993, \"param_--min_samples_split\": 0.056383397153516354, \"param_--n_estimators\": 1000, \"best_metric\": 0.81304538}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_2\", \"run_number\": 4, \"metric\": 0.5, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:16:57.465439Z\", \"end_time\": \"2021-12-04T20:20:12.250942Z\", \"created_time\": \"2021-12-04T20:16:57.465439Z\", \"created_time_dt\": \"2021-12-04T20:16:57.465439Z\", \"duration\": \"0:03:14\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 10, \"param_--max_features\": 0.6168980931845642, \"param_--min_samples_leaf\": 0.4981833274538551, \"param_--min_samples_split\": 0.2506143745151337, \"param_--n_estimators\": 100, \"best_metric\": 0.81304538}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_1\", \"run_number\": 5, \"metric\": 0.5, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:16:58.095241Z\", \"end_time\": \"2021-12-04T20:20:12.59105Z\", \"created_time\": \"2021-12-04T20:16:58.095241Z\", \"created_time_dt\": \"2021-12-04T20:16:58.095241Z\", \"duration\": \"0:03:14\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 80, \"param_--max_features\": 0.5502330560558484, \"param_--min_samples_leaf\": 0.21759030201738427, \"param_--min_samples_split\": 0.6590149849834244, \"param_--n_estimators\": 1500, \"best_metric\": 0.81304538}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_4\", \"run_number\": 6, \"metric\": 0.5, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:21:00.86583Z\", \"end_time\": \"2021-12-04T20:21:23.983307Z\", \"created_time\": \"2021-12-04T20:21:00.86583Z\", \"created_time_dt\": \"2021-12-04T20:21:00.86583Z\", \"duration\": \"0:00:23\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 80, \"param_--max_features\": 0.6478176818831635, \"param_--min_samples_leaf\": 0.37490706564040266, \"param_--min_samples_split\": 0.13094382452429032, \"param_--n_estimators\": 1000, \"best_metric\": 0.81304538}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_5\", \"run_number\": 7, \"metric\": 0.5, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:21:01.048751Z\", \"end_time\": \"2021-12-04T20:21:23.733179Z\", \"created_time\": \"2021-12-04T20:21:01.048751Z\", \"created_time_dt\": \"2021-12-04T20:21:01.048751Z\", \"duration\": \"0:00:22\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 70, \"param_--max_features\": 0.5370187400361137, \"param_--min_samples_leaf\": 0.28534542057118795, \"param_--min_samples_split\": 0.6633579244342472, \"param_--n_estimators\": 1000, \"best_metric\": 0.81304538}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_7\", \"run_number\": 8, \"metric\": 0.5, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:21:01.088388Z\", \"end_time\": \"2021-12-04T20:21:41.776006Z\", \"created_time\": \"2021-12-04T20:21:01.088388Z\", \"created_time_dt\": \"2021-12-04T20:21:01.088388Z\", \"duration\": \"0:00:40\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 20, \"param_--max_features\": 0.5286292619326907, \"param_--min_samples_leaf\": 0.46844908056791335, \"param_--min_samples_split\": 0.4330907065753207, \"param_--n_estimators\": 1500, \"best_metric\": 0.81304538}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_6\", \"run_number\": 9, \"metric\": 0.85482936, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:21:01.170654Z\", \"end_time\": \"2021-12-04T20:21:22.242953Z\", \"created_time\": \"2021-12-04T20:21:01.170654Z\", \"created_time_dt\": \"2021-12-04T20:21:01.170654Z\", \"duration\": \"0:00:21\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 80, \"param_--max_features\": 0.9064535499066405, \"param_--min_samples_leaf\": 0.035896483972630046, \"param_--min_samples_split\": 0.012337394545863245, \"param_--n_estimators\": 10, \"best_metric\": 0.85482936}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_10\", \"run_number\": 10, \"metric\": 0.5, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:22:02.002665Z\", \"end_time\": \"2021-12-04T20:23:17.589805Z\", \"created_time\": \"2021-12-04T20:22:02.002665Z\", \"created_time_dt\": \"2021-12-04T20:22:02.002665Z\", \"duration\": \"0:01:15\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 60, \"param_--max_features\": 0.8251518759701635, \"param_--min_samples_leaf\": 0.42884669181205703, \"param_--min_samples_split\": 0.6884369786880737, \"param_--n_estimators\": 100, \"best_metric\": 0.85482936}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_9\", \"run_number\": 11, \"metric\": 0.81025961, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:22:02.342997Z\", \"end_time\": \"2021-12-04T20:23:19.138563Z\", \"created_time\": \"2021-12-04T20:22:02.342997Z\", \"created_time_dt\": \"2021-12-04T20:22:02.342997Z\", \"duration\": \"0:01:16\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 80, \"param_--max_features\": 0.9947326873554736, \"param_--min_samples_leaf\": 0.04346151080260284, \"param_--min_samples_split\": 0.5957397090895037, \"param_--n_estimators\": 200, \"best_metric\": 0.85482936}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_8\", \"run_number\": 12, \"metric\": 0.85538186, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:22:02.366242Z\", \"end_time\": \"2021-12-04T20:23:24.535534Z\", \"created_time\": \"2021-12-04T20:22:02.366242Z\", \"created_time_dt\": \"2021-12-04T20:22:02.366242Z\", \"duration\": \"0:01:22\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 30, \"param_--max_features\": 0.5117122092251563, \"param_--min_samples_leaf\": 0.04802171307868145, \"param_--min_samples_split\": 0.1284235927805228, \"param_--n_estimators\": 1500, \"best_metric\": 0.85538186}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_11\", \"run_number\": 13, \"metric\": 0.5, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:22:32.936954Z\", \"end_time\": \"2021-12-04T20:23:44.22885Z\", \"created_time\": \"2021-12-04T20:22:32.936954Z\", \"created_time_dt\": \"2021-12-04T20:22:32.936954Z\", \"duration\": \"0:01:11\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 50, \"param_--max_features\": 0.74063926552642, \"param_--min_samples_leaf\": 0.0630770732820144, \"param_--min_samples_split\": 0.7677050410718659, \"param_--n_estimators\": 1500, \"best_metric\": 0.85538186}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_12\", \"run_number\": 14, \"metric\": 0.82816851, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:24:03.814183Z\", \"end_time\": \"2021-12-04T20:25:22.76003Z\", \"created_time\": \"2021-12-04T20:24:03.814183Z\", \"created_time_dt\": \"2021-12-04T20:24:03.814183Z\", \"duration\": \"0:01:18\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 20, \"param_--max_features\": 0.8598378037159542, \"param_--min_samples_leaf\": 0.1843982385414359, \"param_--min_samples_split\": 0.11851802010382924, \"param_--n_estimators\": 200, \"best_metric\": 0.85538186}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_13\", \"run_number\": 15, \"metric\": 0.5, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:24:03.851807Z\", \"end_time\": \"2021-12-04T20:25:23.570951Z\", \"created_time\": \"2021-12-04T20:24:03.851807Z\", \"created_time_dt\": \"2021-12-04T20:24:03.851807Z\", \"duration\": \"0:01:19\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 60, \"param_--max_features\": 0.9515251704474161, \"param_--min_samples_leaf\": 0.08981188350332883, \"param_--min_samples_split\": 0.9727678502273479, \"param_--n_estimators\": 1000, \"best_metric\": 0.85538186}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_14\", \"run_number\": 16, \"metric\": 0.83819237, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:24:04.196388Z\", \"end_time\": \"2021-12-04T20:25:23.733352Z\", \"created_time\": \"2021-12-04T20:24:04.196388Z\", \"created_time_dt\": \"2021-12-04T20:24:04.196388Z\", \"duration\": \"0:01:19\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 80, \"param_--max_features\": 0.5813203706943916, \"param_--min_samples_leaf\": 0.08474906270720022, \"param_--min_samples_split\": 0.5358281989105351, \"param_--n_estimators\": 500, \"best_metric\": 0.85538186}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_15\", \"run_number\": 17, \"metric\": 0.5, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:24:38.05898Z\", \"end_time\": \"2021-12-04T20:25:41.647358Z\", \"created_time\": \"2021-12-04T20:24:38.05898Z\", \"created_time_dt\": \"2021-12-04T20:24:38.05898Z\", \"duration\": \"0:01:03\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 100, \"param_--max_features\": 0.7788993002933011, \"param_--min_samples_leaf\": 0.485632431538341, \"param_--min_samples_split\": 0.3758567967803523, \"param_--n_estimators\": 10, \"best_metric\": 0.85538186}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_18\", \"run_number\": 18, \"metric\": 0.84440051, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:26:08.986341Z\", \"end_time\": \"2021-12-04T20:27:23.340717Z\", \"created_time\": \"2021-12-04T20:26:08.986341Z\", \"created_time_dt\": \"2021-12-04T20:26:08.986341Z\", \"duration\": \"0:01:14\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 90, \"param_--max_features\": 0.8845788421033327, \"param_--min_samples_leaf\": 0.015643007674288275, \"param_--min_samples_split\": 0.3264212102972915, \"param_--n_estimators\": 500, \"best_metric\": 0.85538186}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_16\", \"run_number\": 19, \"metric\": 0.5, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:26:09.025532Z\", \"end_time\": \"2021-12-04T20:27:21.700996Z\", \"created_time\": \"2021-12-04T20:26:09.025532Z\", \"created_time_dt\": \"2021-12-04T20:26:09.025532Z\", \"duration\": \"0:01:12\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 90, \"param_--max_features\": 0.8076935278789328, \"param_--min_samples_leaf\": 0.40532747560274607, \"param_--min_samples_split\": 0.593463554250824, \"param_--n_estimators\": 200, \"best_metric\": 0.85538186}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_17\", \"run_number\": 20, \"metric\": 0.5, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:26:09.161676Z\", \"end_time\": \"2021-12-04T20:27:24.082782Z\", \"created_time\": \"2021-12-04T20:26:09.161676Z\", \"created_time_dt\": \"2021-12-04T20:26:09.161676Z\", \"duration\": \"0:01:14\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 90, \"param_--max_features\": 0.9424464850530347, \"param_--min_samples_leaf\": 0.3839271413904486, \"param_--min_samples_split\": 0.4960698460864696, \"param_--n_estimators\": 1500, \"best_metric\": 0.85538186}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_19\", \"run_number\": 21, \"metric\": 0.80912356, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:26:40.001167Z\", \"end_time\": \"2021-12-04T20:27:44.385444Z\", \"created_time\": \"2021-12-04T20:26:40.001167Z\", \"created_time_dt\": \"2021-12-04T20:26:40.001167Z\", \"duration\": \"0:01:04\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 90, \"param_--max_features\": 0.8291897382639968, \"param_--min_samples_leaf\": 0.2324092545014483, \"param_--min_samples_split\": 0.10116395444169225, \"param_--n_estimators\": 100, \"best_metric\": 0.85538186}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_21\", \"run_number\": 22, \"metric\": 0.5, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:28:11.065906Z\", \"end_time\": \"2021-12-04T20:29:22.343377Z\", \"created_time\": \"2021-12-04T20:28:11.065906Z\", \"created_time_dt\": \"2021-12-04T20:28:11.065906Z\", \"duration\": \"0:01:11\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 30, \"param_--max_features\": 0.7038990733495525, \"param_--min_samples_leaf\": 0.40657297228324935, \"param_--min_samples_split\": 0.9405709498950441, \"param_--n_estimators\": 1000, \"best_metric\": 0.85538186}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_22\", \"run_number\": 23, \"metric\": 0.5, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:28:11.080555Z\", \"end_time\": \"2021-12-04T20:29:22.49241Z\", \"created_time\": \"2021-12-04T20:28:11.080555Z\", \"created_time_dt\": \"2021-12-04T20:28:11.080555Z\", \"duration\": \"0:01:11\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 20, \"param_--max_features\": 0.5808870127610011, \"param_--min_samples_leaf\": 0.17106220349471254, \"param_--min_samples_split\": 0.9307365266902221, \"param_--n_estimators\": 200, \"best_metric\": 0.85538186}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_20\", \"run_number\": 24, \"metric\": 0.8393957, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:28:11.066783Z\", \"end_time\": \"2021-12-04T20:29:20.892617Z\", \"created_time\": \"2021-12-04T20:28:11.066783Z\", \"created_time_dt\": \"2021-12-04T20:28:11.066783Z\", \"duration\": \"0:01:09\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 30, \"param_--max_features\": 0.5808005989394467, \"param_--min_samples_leaf\": 0.16615870408256356, \"param_--min_samples_split\": 0.2292586302776355, \"param_--n_estimators\": 10, \"best_metric\": 0.85538186}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_23\", \"run_number\": 25, \"metric\": 0.5, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:28:41.672266Z\", \"end_time\": \"2021-12-04T20:29:45.150845Z\", \"created_time\": \"2021-12-04T20:28:41.672266Z\", \"created_time_dt\": \"2021-12-04T20:28:41.672266Z\", \"duration\": \"0:01:03\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 60, \"param_--max_features\": 0.5959699466401503, \"param_--min_samples_leaf\": 0.29285154000628133, \"param_--min_samples_split\": 0.6560877504044967, \"param_--n_estimators\": 1500, \"best_metric\": 0.85538186}, {\"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_24\", \"run_number\": 26, \"metric\": 0.83672249, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2021-12-04T20:30:12.687118Z\", \"end_time\": \"2021-12-04T20:31:26.744264Z\", \"created_time\": \"2021-12-04T20:30:12.687118Z\", \"created_time_dt\": \"2021-12-04T20:30:12.687118Z\", \"duration\": \"0:01:14\", \"hyperdrive_id\": \"95af88e2-8e32-468f-a9c9-b754017b897d\", \"arguments\": null, \"param_--max_depth\": 90, \"param_--max_features\": 0.9954813563552314, \"param_--min_samples_leaf\": 0.1718942433181152, \"param_--min_samples_split\": 0.09714136617344961, \"param_--n_estimators\": 200, \"best_metric\": 0.85538186}], \"children_metrics\": {\"categories\": [0], \"series\": {\"Number of trees:\": [{\"categories\": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], \"mode\": \"markers\", \"name\": \"Number of trees:\", \"stepped\": false, \"type\": \"scatter\", \"data\": [100.0, 1000.0, 100.0, 1500.0, 1000.0, 1000.0, 1500.0, 10.0, 100.0, 200.0, 1500.0, 1500.0, 200.0, 1000.0, 500.0, 10.0, 500.0, 200.0, 1500.0, 100.0, 1000.0, 200.0, 10.0, 1500.0, 200.0]}, {\"categories\": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], \"mode\": \"lines\", \"name\": \"Number of trees:_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [100.0, 1000.0, 1000.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0]}], \"Max features:\": [{\"categories\": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], \"mode\": \"markers\", \"name\": \"Max features:\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {\"categories\": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], \"mode\": \"lines\", \"name\": \"Max features:_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}], \"Max depth:\": [{\"categories\": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], \"mode\": \"markers\", \"name\": \"Max depth:\", \"stepped\": false, \"type\": \"scatter\", \"data\": [\"100\", \"40\", \"10\", \"80\", \"80\", \"70\", \"20\", \"80\", \"60\", \"80\", \"30\", \"50\", \"20\", \"60\", \"80\", \"100\", \"90\", \"90\", \"90\", \"90\", \"30\", \"20\", \"30\", \"60\", \"90\"]}, {\"categories\": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], \"mode\": \"lines\", \"name\": \"Max depth:_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": []}], \"Min number of samples:\": [{\"categories\": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], \"mode\": \"markers\", \"name\": \"Min number of samples:\", \"stepped\": false, \"type\": \"scatter\", \"data\": [\"0.687741381247643\", \"0.056383397153516354\", \"0.2506143745151337\", \"0.6590149849834244\", \"0.13094382452429032\", \"0.6633579244342472\", \"0.4330907065753207\", \"0.012337394545863245\", \"0.6884369786880737\", \"0.5957397090895037\", \"0.1284235927805228\", \"0.7677050410718659\", \"0.11851802010382924\", \"0.9727678502273479\", \"0.5358281989105351\", \"0.3758567967803523\", \"0.3264212102972915\", \"0.593463554250824\", \"0.4960698460864696\", \"0.10116395444169225\", \"0.9405709498950441\", \"0.9307365266902221\", \"0.2292586302776355\", \"0.6560877504044967\", \"0.09714136617344961\"]}, {\"categories\": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], \"mode\": \"lines\", \"name\": \"Min number of samples:_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": []}], \"Min number of samples at leaf node:\": [{\"categories\": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], \"mode\": \"markers\", \"name\": \"Min number of samples at leaf node:\", \"stepped\": false, \"type\": \"scatter\", \"data\": [\"0.4932327378053848\", \"0.2904980345242993\", \"0.4981833274538551\", \"0.21759030201738427\", \"0.37490706564040266\", \"0.28534542057118795\", \"0.46844908056791335\", \"0.035896483972630046\", \"0.42884669181205703\", \"0.04346151080260284\", \"0.04802171307868145\", \"0.0630770732820144\", \"0.1843982385414359\", \"0.08981188350332883\", \"0.08474906270720022\", \"0.485632431538341\", \"0.015643007674288275\", \"0.40532747560274607\", \"0.3839271413904486\", \"0.2324092545014483\", \"0.40657297228324935\", \"0.17106220349471254\", \"0.16615870408256356\", \"0.29285154000628133\", \"0.1718942433181152\"]}, {\"categories\": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], \"mode\": \"lines\", \"name\": \"Min number of samples at leaf node:_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": []}], \"Bootstrap:\": [{\"categories\": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], \"mode\": \"markers\", \"name\": \"Bootstrap:\", \"stepped\": false, \"type\": \"scatter\", \"data\": [\"True\", \"True\", \"True\", \"True\", \"True\", \"True\", \"True\", \"True\", \"True\", \"True\", \"True\", \"True\", \"True\", \"True\", \"True\", \"True\", \"True\", \"True\", \"True\", \"True\", \"True\", \"True\", \"True\", \"True\", \"True\"]}, {\"categories\": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], \"mode\": \"lines\", \"name\": \"Bootstrap:_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": []}], \"AUC_weighted\": [{\"categories\": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], \"mode\": \"markers\", \"name\": \"AUC_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.5, 0.813045379734388, 0.5, 0.5, 0.5, 0.5, 0.5, 0.8548293601912904, 0.5, 0.8102596085169811, 0.8553818563872182, 0.5, 0.8281685074580517, 0.5, 0.8381923670127424, 0.5, 0.8444005092798658, 0.5, 0.5, 0.8091235624747689, 0.5, 0.5, 0.8393956959640606, 0.5, 0.8367224942291965]}, {\"categories\": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], \"mode\": \"lines\", \"name\": \"AUC_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.5, 0.813045379734388, 0.813045379734388, 0.813045379734388, 0.813045379734388, 0.813045379734388, 0.813045379734388, 0.8548293601912904, 0.8548293601912904, 0.8548293601912904, 0.8553818563872182, 0.8553818563872182, 0.8553818563872182, 0.8553818563872182, 0.8553818563872182, 0.8553818563872182, 0.8553818563872182, 0.8553818563872182, 0.8553818563872182, 0.8553818563872182, 0.8553818563872182, 0.8553818563872182, 0.8553818563872182, 0.8553818563872182, 0.8553818563872182]}]}, \"metricName\": null, \"primaryMetricName\": \"AUC_weighted\", \"showLegend\": false}, \"run_metrics\": [{\"name\": \"best_child_by_primary_metric\", \"run_id\": \"HD_95af88e2-8e32-468f-a9c9-b754017b897d\", \"categories\": [0], \"series\": [{\"data\": [{\"time_elapse\": [273, 334, 456, 456], \"metric_value\": [0.813045379734388, 0.8548293601912904, 0.8553818563872182, 0.8553818563872182], \"metric_name\": [\"AUC_weighted\", \"AUC_weighted\", \"AUC_weighted\", \"AUC_weighted\"], \"run_id\": [\"HD_95af88e2-8e32-468f-a9c9-b754017b897d_3\", \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_6\", \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_8\", \"HD_95af88e2-8e32-468f-a9c9-b754017b897d_8\"], \"final\": [false, false, false, true]}]}]}], \"run_logs\": \"[2021-12-04T20:16:26.216138][API][INFO]Experiment created\\r\\n[2021-12-04T20:16:26.955395][GENERATOR][INFO]Trying to sample '4' jobs from the hyperparameter space\\r\\n[2021-12-04T20:16:27.129226][GENERATOR][INFO]Successfully sampled '4' jobs, they will soon be submitted to the execution target.\\r\\n[2021-12-04T20:16:56.4680637Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_1'\\r\\n[2021-12-04T20:16:56.4702736Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_2'\\r\\n[2021-12-04T20:16:56.4710726Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_3'\\r\\n[2021-12-04T20:16:56.4659812Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_0'\\r\\n[2021-12-04T20:16:57.2066892Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_0'\\r\\n[2021-12-04T20:16:57.2819174Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_3'\\r\\n[2021-12-04T20:16:57.5285038Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_2'\\r\\n[2021-12-04T20:16:58.1600630Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_1'\\r\\n[2021-12-04T20:20:26.500934][GENERATOR][INFO]Trying to sample '4' jobs from the hyperparameter space\\r\\n[2021-12-04T20:20:26.663913][GENERATOR][INFO]Successfully sampled '4' jobs, they will soon be submitted to the execution target.\\r\\n[2021-12-04T20:21:00.4177653Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_4'\\r\\n[2021-12-04T20:21:00.4193001Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_5'\\r\\n[2021-12-04T20:21:00.4223263Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_7'\\r\\n[2021-12-04T20:21:00.4211002Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_6'\\r\\n[2021-12-04T20:21:00.9683583Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_4'\\r\\n[2021-12-04T20:21:01.1337422Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_5'\\r\\n[2021-12-04T20:21:01.1648831Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_7'\\r\\n[2021-12-04T20:21:01.2495295Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_6'\\r\\n[2021-12-04T20:21:26.606885][GENERATOR][INFO]Trying to sample '3' jobs from the hyperparameter space\\r\\n[2021-12-04T20:21:26.759888][GENERATOR][INFO]Successfully sampled '3' jobs, they will soon be submitted to the execution target.\\r\\n[2021-12-04T20:21:56.542954][GENERATOR][INFO]Trying to sample '1' jobs from the hyperparameter space\\r\\n[2021-12-04T20:21:56.692257][GENERATOR][INFO]Successfully sampled '1' jobs, they will soon be submitted to the execution target.\\r\\n[2021-12-04T20:22:01.5747116Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_8'\\r\\n[2021-12-04T20:22:01.5758389Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_9'\\r\\n[2021-12-04T20:22:01.5770197Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_10'\\r\\n[2021-12-04T20:22:02.0924011Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_10'\\r\\n[2021-12-04T20:22:02.4124736Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_9'\\r\\n[2021-12-04T20:22:02.4453848Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_8'\\r\\n[2021-12-04T20:22:32.6617146Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_11'\\r\\n[2021-12-04T20:22:33.0128203Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_11'\\r\\n[2021-12-04T20:23:26.517192][GENERATOR][INFO]Trying to sample '3' jobs from the hyperparameter space\\r\\n[2021-12-04T20:23:26.693062][GENERATOR][INFO]Successfully sampled '3' jobs, they will soon be submitted to the execution target.\\r\\n[2021-12-04T20:23:56.621419][GENERATOR][INFO]Trying to sample '1' jobs from the hyperparameter space\\r\\n[2021-12-04T20:23:56.769639][GENERATOR][INFO]Successfully sampled '1' jobs, they will soon be submitted to the execution target.\\r\\n[2021-12-04T20:24:03.5001074Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_14'\\r\\n[2021-12-04T20:24:03.4971326Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_12'\\r\\n[2021-12-04T20:24:03.4987031Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_13'\\r\\n[2021-12-04T20:24:03.8924793Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_12'\\r\\n[2021-12-04T20:24:03.9212995Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_13'\\r\\n[2021-12-04T20:24:04.2640026Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_14'\\r\\n[2021-12-04T20:24:34.4177619Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_15'\\r\\n[2021-12-04T20:24:38.1297830Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_15'\\r\\n[2021-12-04T20:25:27.759870][GENERATOR][INFO]Trying to sample '3' jobs from the hyperparameter space\\r\\n[2021-12-04T20:25:27.911791][GENERATOR][INFO]Successfully sampled '3' jobs, they will soon be submitted to the execution target.\\r\\n[2021-12-04T20:25:57.599197][GENERATOR][INFO]Trying to sample '1' jobs from the hyperparameter space\\r\\n[2021-12-04T20:25:57.725248][GENERATOR][INFO]Successfully sampled '1' jobs, they will soon be submitted to the execution target.\\r\\n[2021-12-04T20:26:08.6624266Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_17'\\r\\n[2021-12-04T20:26:08.6565422Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_16'\\r\\n[2021-12-04T20:26:08.6678107Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_18'\\r\\n[2021-12-04T20:26:09.0757607Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_18'\\r\\n[2021-12-04T20:26:09.1092108Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_16'\\r\\n[2021-12-04T20:26:09.2420959Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_17'\\r\\n[2021-12-04T20:26:39.4053546Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_19'\\r\\n[2021-12-04T20:26:40.0767043Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_19'\\r\\n[2021-12-04T20:27:27.981269][GENERATOR][INFO]Trying to sample '3' jobs from the hyperparameter space\\r\\n[2021-12-04T20:27:28.136848][GENERATOR][INFO]Successfully sampled '3' jobs, they will soon be submitted to the execution target.\\r\\n[2021-12-04T20:27:57.722000][GENERATOR][INFO]Trying to sample '1' jobs from the hyperparameter space\\r\\n[2021-12-04T20:27:57.900220][GENERATOR][INFO]Successfully sampled '1' jobs, they will soon be submitted to the execution target.\\r\\n[2021-12-04T20:28:10.7140931Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_20'\\r\\n[2021-12-04T20:28:10.7170221Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_22'\\r\\n[2021-12-04T20:28:10.7156817Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_21'\\r\\n[2021-12-04T20:28:11.1528018Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_22'\\r\\n[2021-12-04T20:28:11.1418980Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_21'\\r\\n[2021-12-04T20:28:11.1636175Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_20'\\r\\n[2021-12-04T20:28:41.3508951Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_23'\\r\\n[2021-12-04T20:28:41.7663987Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_23'\\r\\n[2021-12-04T20:29:27.626567][GENERATOR][INFO]Trying to sample '1' jobs from the hyperparameter space\\r\\n[2021-12-04T20:29:27.769227][GENERATOR][INFO]Successfully sampled '1' jobs, they will soon be submitted to the execution target.\\r\\n[2021-12-04T20:29:57.577115][GENERATOR][INFO]Max number of jobs '25' reached for experiment.\\r\\n[2021-12-04T20:29:57.708499][GENERATOR][INFO]All jobs generated.\\r\\n[2021-12-04T20:30:12.3611963Z][SCHEDULER][INFO]Scheduling job, id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_24'\\r\\n[2021-12-04T20:30:12.7565130Z][SCHEDULER][INFO]Successfully scheduled a job. Id='HD_95af88e2-8e32-468f-a9c9-b754017b897d_24'\\r\\n[2021-12-04T20:32:09.927784][CONTROLLER][INFO]Experiment was 'ExperimentStatus.RUNNING', is 'ExperimentStatus.FINISHED'.\\n\\nRun is completed.\", \"graph\": {}, \"widget_settings\": {\"childWidgetDisplay\": \"popup\", \"send_telemetry\": false, \"log_level\": \"INFO\", \"sdk_version\": \"1.34.0\"}, \"loading\": false}"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "RunId: HD_95af88e2-8e32-468f-a9c9-b754017b897d\nWeb View: https://ml.azure.com/runs/HD_95af88e2-8e32-468f-a9c9-b754017b897d?wsid=/subscriptions/aa7cf8e8-d23f-4bce-a7b9-1f0b4e0ac8ee/resourcegroups/aml-quickstarts-165039/workspaces/quick-starts-ws-165039&tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\n\nStreaming azureml-logs/hyperdrive.txt\n=====================================\n\n\"<START>[2021-12-04T20:16:26.216138][API][INFO]Experiment created<END>\\n\"\"<START>[2021-12-04T20:16:26.955395][GENERATOR][INFO]Trying to sample '4' jobs from the hyperparameter space<END>\\n\"\"<START>[2021-12-04T20:16:27.129226][GENERATOR][INFO]Successfully sampled '4' jobs, they will soon be submitted to the execution target.<END>\\n\"\n\nExecution Summary\n=================\nRunId: HD_95af88e2-8e32-468f-a9c9-b754017b897d\nWeb View: https://ml.azure.com/runs/HD_95af88e2-8e32-468f-a9c9-b754017b897d?wsid=/subscriptions/aa7cf8e8-d23f-4bce-a7b9-1f0b4e0ac8ee/resourcegroups/aml-quickstarts-165039/workspaces/quick-starts-ws-165039&tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\n\n"
        },
        {
          "output_type": "execute_result",
          "execution_count": 20,
          "data": {
            "text/plain": "{'runId': 'HD_95af88e2-8e32-468f-a9c9-b754017b897d',\n 'target': 'cluster-vhcg',\n 'status': 'Completed',\n 'startTimeUtc': '2021-12-04T20:16:25.996723Z',\n 'endTimeUtc': '2021-12-04T20:32:09.728716Z',\n 'services': {},\n 'properties': {'primary_metric_config': '{\"name\": \"AUC_weighted\", \"goal\": \"maximize\"}',\n  'resume_from': 'null',\n  'runTemplate': 'HyperDrive',\n  'azureml.runsource': 'hyperdrive',\n  'platform': 'AML',\n  'ContentSnapshotId': '4e7a759e-7192-44ab-beca-d604f7b69270',\n  'user_agent': 'python/3.6.9 (Linux-5.4.0-1056-azure-x86_64-with-debian-buster-sid) msrest/0.6.21 Hyperdrive.Service/1.0.0 Hyperdrive.SDK/core.1.34.0',\n  'score': '0.8553818563872182',\n  'best_child_run_id': 'HD_95af88e2-8e32-468f-a9c9-b754017b897d_8',\n  'best_metric_status': 'Succeeded'},\n 'inputDatasets': [],\n 'outputDatasets': [],\n 'logFiles': {'azureml-logs/hyperdrive.txt': 'https://mlstrg165039.blob.core.windows.net/azureml/ExperimentRun/dcid.HD_95af88e2-8e32-468f-a9c9-b754017b897d/azureml-logs/hyperdrive.txt?sv=2019-07-07&sr=b&sig=jQF7AAUBX3RuClaCj1cwXT1AAHLGqa6bnouvq8sBP2o%3D&skoid=37eca691-81d1-43f5-ba90-0cc898d6b0c7&sktid=660b3398-b80e-49d2-bc5b-ac1dc93b5254&skt=2021-12-04T20%3A06%3A33Z&ske=2021-12-06T04%3A16%3A33Z&sks=b&skv=2019-07-07&st=2021-12-04T20%3A22%3A11Z&se=2021-12-05T04%3A32%3A11Z&sp=r'},\n 'submittedBy': 'ODL_User 165039'}"
          },
          "metadata": {}
        }
      ],
      "execution_count": 20,
      "metadata": {
        "gather": {
          "logged": 1638649932389
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "assert(hyperdrive_run.get_status() == 'Completed')"
      ],
      "outputs": [],
      "execution_count": 21,
      "metadata": {
        "gather": {
          "logged": 1638650185591
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Best Model\n",
        "\n",
        "TODO: In the cell below, get the best model from the hyperdrive experiments and display all the properties of the model."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import joblib\n",
        "# Get your best run and save the model from that run.\n",
        "best_run = hyperdrive_run.get_best_run_by_primary_metric()\n",
        "best_run_metrics = best_run.get_metrics()\n",
        "parameter_values = best_run.get_details()['runDefinition']['arguments']\n",
        "\n",
        "print('Best parameters: ', parameter_values)\n",
        "print('Best Run Id: ', best_run.id)\n",
        "print('\\n AUC_weighted:', best_run_metrics['AUC_weighted'])\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Best parameters:  ['--max_depth', '30', '--max_features', '0.5117122092251563', '--min_samples_leaf', '0.04802171307868145', '--min_samples_split', '0.1284235927805228', '--n_estimators', '1500']\nBest Run Id:  HD_95af88e2-8e32-468f-a9c9-b754017b897d_8\n\n AUC_weighted: 0.8553818563872182\n"
        }
      ],
      "execution_count": 22,
      "metadata": {
        "gather": {
          "logged": 1638650193412
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#TODO: Save the best model\r\n",
        "os.makedirs('./model', exist_ok=True)\r\n",
        "\r\n",
        "# Register\r\n",
        "model = best_run.register_model(\r\n",
        "    model_name='hyperdrive_model', \r\n",
        "    model_path='./outputs/model.joblib'\r\n",
        ")\r\n",
        "model\r\n",
        "# best_model"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 37,
          "data": {
            "text/plain": "Model(workspace=Workspace.create(name='quick-starts-ws-165039', subscription_id='aa7cf8e8-d23f-4bce-a7b9-1f0b4e0ac8ee', resource_group='aml-quickstarts-165039'), name=hyperdrive_model, id=hyperdrive_model:2, version=2, tags={}, properties={})"
          },
          "metadata": {}
        }
      ],
      "execution_count": 37,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1638662430366
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# best_run.download_file(name=\"./outputs/model.joblib\", output_file_path=\"./model/model.joblib\")"
      ],
      "outputs": [],
      "execution_count": 38,
      "metadata": {
        "gather": {
          "logged": 1638662431954
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "joblib.load(\"./model/model.joblib\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "Trying to unpickle estimator DecisionTreeClassifier from version 0.20.3 when using version 0.22.2.post1. This might lead to breaking code or invalid results. Use at your own risk.\nTrying to unpickle estimator RandomForestClassifier from version 0.20.3 when using version 0.22.2.post1. This might lead to breaking code or invalid results. Use at your own risk.\nFrom version 0.24, get_params will raise an AttributeError if a parameter cannot be retrieved as an instance attribute. Previously it would return None.\n"
        },
        {
          "output_type": "execute_result",
          "execution_count": 39,
          "data": {
            "text/plain": "RandomForestClassifier(bootstrap=True, ccp_alpha=None, class_weight=None,\n                       criterion='gini', max_depth=30,\n                       max_features=0.5117122092251563, max_leaf_nodes=None,\n                       max_samples=None, min_impurity_decrease=0.0,\n                       min_impurity_split=None,\n                       min_samples_leaf=0.04802171307868145,\n                       min_samples_split=0.1284235927805228,\n                       min_weight_fraction_leaf=0.0, n_estimators=1500,\n                       n_jobs=None, oob_score=False, random_state=None,\n                       verbose=0, warm_start=False)"
          },
          "metadata": {}
        }
      ],
      "execution_count": 39,
      "metadata": {
        "gather": {
          "logged": 1638662435937
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Model Deployment\n",
        "\n",
        "Remember you have to deploy only one of the two models you trained.. Perform the steps in the rest of this notebook only if you wish to deploy this model.\n",
        "\n",
        "TODO: In the cell below, register the model, create an inference config and deploy the model as a web service."
      ],
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "env = Environment.get(ws, \"AzureML-Minimal\").clone(\"udacity_ml\")\n",
        "\n",
        "print('Preparing ACI deployment configuration')\n",
        "\n",
        "for pip_package in [\"scikit-learn\", \"pandas\", \"azureml-core\"]:\n",
        "    env.python.conda_dependencies.add_pip_package(pip_package)\n",
        "\n",
        "config = AciWebservice.deploy_configuration(\n",
        "    cpu_cores=1,\n",
        "    memory_gb=1,\n",
        "    enable_app_insights=True,\n",
        "    auth_enabled=True\n",
        ")\n",
        "\n",
        "inference_config = InferenceConfig(entry_script='score.py',\n",
        "                                    environment=env)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Preparing ACI deployment configuration\n"
        }
      ],
      "execution_count": 33,
      "metadata": {
        "gather": {
          "logged": 1638659478588
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "env.save_to_directory(\"./env/\", overwrite=True)"
      ],
      "outputs": [],
      "execution_count": 34,
      "metadata": {
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1638659484753
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print('Deploy the model to ACI:')\n",
        "\n",
        "service_name = 'best-model-service'\n",
        "service = Model.deploy(\n",
        "    workspace=ws, \n",
        "    name=service_name, \n",
        "    models=[model], \n",
        "    inference_config=inference_config, \n",
        "    deployment_config=config, \n",
        "    overwrite=True\n",
        ")\n",
        "service.wait_for_deployment(show_output = True)\n",
        "print(service.state)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Deploy the model to ACI:\nTips: You can try get_logs(): https://aka.ms/debugimage#dockerlog or local deployment: https://aka.ms/debugimage#debug-locally to debug if deployment takes longer than 10 minutes.\nRunning\n2021-12-04 23:11:31+00:00 Creating Container Registry if not exists.\n2021-12-04 23:11:31+00:00 Registering the environment.\n2021-12-04 23:11:32+00:00 Building image..\n2021-12-04 23:17:00+00:00 Generating deployment configuration.\n2021-12-04 23:17:01+00:00 Submitting deployment to compute.\n2021-12-04 23:17:02+00:00 Checking the status of deployment best-model-service..\n2021-12-04 23:28:41+00:00 Checking the status of inference endpoint best-model-service.\nFailed\n"
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "ERROR:azureml.core.webservice.webservice:Service deployment polling reached non-successful terminal state, current service state: Failed\nOperation ID: 7b8e6aa9-8993-4851-9ab5-ab170b1eff62\nMore information can be found using '.get_logs()'\nError:\n{\n  \"code\": \"AciDeploymentFailed\",\n  \"statusCode\": 400,\n  \"message\": \"Aci Deployment failed with exception: Your container application crashed. This may be caused by errors in your scoring file's init() function.\n\t1. Please check the logs for your container instance: best-model-service. From the AML SDK, you can run print(service.get_logs()) if you have service object to fetch the logs.\n\t2. You can interactively debug your scoring file locally. Please refer to https://docs.microsoft.com/azure/machine-learning/how-to-debug-visual-studio-code#debug-and-troubleshoot-deployments for more information.\n\t3. You can also try to run image 585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_3f259fbdf970aa6e79f45de49a733ae0 locally. Please refer to https://aka.ms/debugimage#service-launch-fails for more information.\",\n  \"details\": [\n    {\n      \"code\": \"CrashLoopBackOff\",\n      \"message\": \"Your container application crashed. This may be caused by errors in your scoring file's init() function.\n\t1. Please check the logs for your container instance: best-model-service. From the AML SDK, you can run print(service.get_logs()) if you have service object to fetch the logs.\n\t2. You can interactively debug your scoring file locally. Please refer to https://docs.microsoft.com/azure/machine-learning/how-to-debug-visual-studio-code#debug-and-troubleshoot-deployments for more information.\n\t3. You can also try to run image 585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_3f259fbdf970aa6e79f45de49a733ae0 locally. Please refer to https://aka.ms/debugimage#service-launch-fails for more information.\"\n    },\n    {\n      \"code\": \"AciDeploymentFailed\",\n      \"message\": \"Your container application crashed. Please follow the steps to debug:\n\t1. From the AML SDK, you can run print(service.get_logs()) if you have service object to fetch the logs. Please refer to https://aka.ms/debugimage#dockerlog for more information.\n\t2. If your container application crashed. This may be caused by errors in your scoring file's init() function. You can try debugging locally first. Please refer to https://aka.ms/debugimage#debug-locally for more information.\n\t3. You can also interactively debug your scoring file locally. Please refer to https://docs.microsoft.com/azure/machine-learning/how-to-debug-visual-studio-code#debug-and-troubleshoot-deployments for more information.\n\t4. View the diagnostic events to check status of container, it may help you to debug the issue.\n\"RestartCount\": 3\n\"CurrentState\": {\"state\":\"Waiting\",\"startTime\":null,\"exitCode\":null,\"finishTime\":null,\"detailStatus\":\"CrashLoopBackOff: Back-off restarting failed\"}\n\"PreviousState\": {\"state\":\"Terminated\",\"startTime\":\"2021-12-04T23:29:20.105Z\",\"exitCode\":111,\"finishTime\":\"2021-12-04T23:29:28.469Z\",\"detailStatus\":\"Error\"}\n\"Events\":\n{\"count\":2,\"firstTimestamp\":\"2021-12-04T22:41:24Z\",\"lastTimestamp\":\"2021-12-04T23:06:00Z\",\"name\":\"Pulling\",\"message\":\"pulling image \"585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_4f8f562d13f7f04151080f0ecc9c060b@sha256:059321822f0db64b0845a3af385f8e5616ae8a7c13c2632502064abe004fbea8\"\",\"type\":\"Normal\"}\n{\"count\":2,\"firstTimestamp\":\"2021-12-04T22:42:36Z\",\"lastTimestamp\":\"2021-12-04T23:06:29Z\",\"name\":\"Pulled\",\"message\":\"Successfully pulled image \"585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_4f8f562d13f7f04151080f0ecc9c060b@sha256:059321822f0db64b0845a3af385f8e5616ae8a7c13c2632502064abe004fbea8\"\",\"type\":\"Normal\"}\n{\"count\":14,\"firstTimestamp\":\"2021-12-04T22:42:52Z\",\"lastTimestamp\":\"2021-12-04T23:04:17Z\",\"name\":\"Started\",\"message\":\"Started container\",\"type\":\"Normal\"}\n{\"count\":14,\"firstTimestamp\":\"2021-12-04T22:42:56Z\",\"lastTimestamp\":\"2021-12-04T23:04:22Z\",\"name\":\"Killing\",\"message\":\"Killing container with id 905ebb343b06bf7ebf624fdf50312f39d390d62c8aca335af3d0b4d7dfca3a6c.\",\"type\":\"Normal\"}\n{\"count\":1,\"firstTimestamp\":\"2021-12-04T23:02:05Z\",\"lastTimestamp\":\"2021-12-04T23:02:05Z\",\"name\":\"Pulling\",\"message\":\"pulling image \"585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_4f8f562d13f7f04151080f0ecc9c060b@sha256:059321822f0db64b0845a3af385f8e5616ae8a7c13c2632502064abe004fbea8\"\",\"type\":\"Normal\"}\n{\"count\":1,\"firstTimestamp\":\"2021-12-04T23:03:09Z\",\"lastTimestamp\":\"2021-12-04T23:03:09Z\",\"name\":\"Pulled\",\"message\":\"Successfully pulled image \"585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_4f8f562d13f7f04151080f0ecc9c060b@sha256:059321822f0db64b0845a3af385f8e5616ae8a7c13c2632502064abe004fbea8\"\",\"type\":\"Normal\"}\n{\"count\":5,\"firstTimestamp\":\"2021-12-04T23:04:33Z\",\"lastTimestamp\":\"2021-12-04T23:06:54Z\",\"name\":\"Started\",\"message\":\"Started container\",\"type\":\"Normal\"}\n{\"count\":5,\"firstTimestamp\":\"2021-12-04T23:04:37Z\",\"lastTimestamp\":\"2021-12-04T23:06:57Z\",\"name\":\"Killing\",\"message\":\"Killing container with id 21f45c0bf71592431ea05f11fa7cd679c764da73c7784c6fdfc9d0838f876fe9.\",\"type\":\"Normal\"}\n\"\n    }\n  ]\n}\n\n"
        },
        {
          "output_type": "error",
          "ename": "WebserviceException",
          "evalue": "WebserviceException:\n\tMessage: Service deployment polling reached non-successful terminal state, current service state: Failed\nOperation ID: 7b8e6aa9-8993-4851-9ab5-ab170b1eff62\nMore information can be found using '.get_logs()'\nError:\n{\n  \"code\": \"AciDeploymentFailed\",\n  \"statusCode\": 400,\n  \"message\": \"Aci Deployment failed with exception: Your container application crashed. This may be caused by errors in your scoring file's init() function.\n\t1. Please check the logs for your container instance: best-model-service. From the AML SDK, you can run print(service.get_logs()) if you have service object to fetch the logs.\n\t2. You can interactively debug your scoring file locally. Please refer to https://docs.microsoft.com/azure/machine-learning/how-to-debug-visual-studio-code#debug-and-troubleshoot-deployments for more information.\n\t3. You can also try to run image 585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_3f259fbdf970aa6e79f45de49a733ae0 locally. Please refer to https://aka.ms/debugimage#service-launch-fails for more information.\",\n  \"details\": [\n    {\n      \"code\": \"CrashLoopBackOff\",\n      \"message\": \"Your container application crashed. This may be caused by errors in your scoring file's init() function.\n\t1. Please check the logs for your container instance: best-model-service. From the AML SDK, you can run print(service.get_logs()) if you have service object to fetch the logs.\n\t2. You can interactively debug your scoring file locally. Please refer to https://docs.microsoft.com/azure/machine-learning/how-to-debug-visual-studio-code#debug-and-troubleshoot-deployments for more information.\n\t3. You can also try to run image 585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_3f259fbdf970aa6e79f45de49a733ae0 locally. Please refer to https://aka.ms/debugimage#service-launch-fails for more information.\"\n    },\n    {\n      \"code\": \"AciDeploymentFailed\",\n      \"message\": \"Your container application crashed. Please follow the steps to debug:\n\t1. From the AML SDK, you can run print(service.get_logs()) if you have service object to fetch the logs. Please refer to https://aka.ms/debugimage#dockerlog for more information.\n\t2. If your container application crashed. This may be caused by errors in your scoring file's init() function. You can try debugging locally first. Please refer to https://aka.ms/debugimage#debug-locally for more information.\n\t3. You can also interactively debug your scoring file locally. Please refer to https://docs.microsoft.com/azure/machine-learning/how-to-debug-visual-studio-code#debug-and-troubleshoot-deployments for more information.\n\t4. View the diagnostic events to check status of container, it may help you to debug the issue.\n\"RestartCount\": 3\n\"CurrentState\": {\"state\":\"Waiting\",\"startTime\":null,\"exitCode\":null,\"finishTime\":null,\"detailStatus\":\"CrashLoopBackOff: Back-off restarting failed\"}\n\"PreviousState\": {\"state\":\"Terminated\",\"startTime\":\"2021-12-04T23:29:20.105Z\",\"exitCode\":111,\"finishTime\":\"2021-12-04T23:29:28.469Z\",\"detailStatus\":\"Error\"}\n\"Events\":\n{\"count\":2,\"firstTimestamp\":\"2021-12-04T22:41:24Z\",\"lastTimestamp\":\"2021-12-04T23:06:00Z\",\"name\":\"Pulling\",\"message\":\"pulling image \"585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_4f8f562d13f7f04151080f0ecc9c060b@sha256:059321822f0db64b0845a3af385f8e5616ae8a7c13c2632502064abe004fbea8\"\",\"type\":\"Normal\"}\n{\"count\":2,\"firstTimestamp\":\"2021-12-04T22:42:36Z\",\"lastTimestamp\":\"2021-12-04T23:06:29Z\",\"name\":\"Pulled\",\"message\":\"Successfully pulled image \"585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_4f8f562d13f7f04151080f0ecc9c060b@sha256:059321822f0db64b0845a3af385f8e5616ae8a7c13c2632502064abe004fbea8\"\",\"type\":\"Normal\"}\n{\"count\":14,\"firstTimestamp\":\"2021-12-04T22:42:52Z\",\"lastTimestamp\":\"2021-12-04T23:04:17Z\",\"name\":\"Started\",\"message\":\"Started container\",\"type\":\"Normal\"}\n{\"count\":14,\"firstTimestamp\":\"2021-12-04T22:42:56Z\",\"lastTimestamp\":\"2021-12-04T23:04:22Z\",\"name\":\"Killing\",\"message\":\"Killing container with id 905ebb343b06bf7ebf624fdf50312f39d390d62c8aca335af3d0b4d7dfca3a6c.\",\"type\":\"Normal\"}\n{\"count\":1,\"firstTimestamp\":\"2021-12-04T23:02:05Z\",\"lastTimestamp\":\"2021-12-04T23:02:05Z\",\"name\":\"Pulling\",\"message\":\"pulling image \"585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_4f8f562d13f7f04151080f0ecc9c060b@sha256:059321822f0db64b0845a3af385f8e5616ae8a7c13c2632502064abe004fbea8\"\",\"type\":\"Normal\"}\n{\"count\":1,\"firstTimestamp\":\"2021-12-04T23:03:09Z\",\"lastTimestamp\":\"2021-12-04T23:03:09Z\",\"name\":\"Pulled\",\"message\":\"Successfully pulled image \"585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_4f8f562d13f7f04151080f0ecc9c060b@sha256:059321822f0db64b0845a3af385f8e5616ae8a7c13c2632502064abe004fbea8\"\",\"type\":\"Normal\"}\n{\"count\":5,\"firstTimestamp\":\"2021-12-04T23:04:33Z\",\"lastTimestamp\":\"2021-12-04T23:06:54Z\",\"name\":\"Started\",\"message\":\"Started container\",\"type\":\"Normal\"}\n{\"count\":5,\"firstTimestamp\":\"2021-12-04T23:04:37Z\",\"lastTimestamp\":\"2021-12-04T23:06:57Z\",\"name\":\"Killing\",\"message\":\"Killing container with id 21f45c0bf71592431ea05f11fa7cd679c764da73c7784c6fdfc9d0838f876fe9.\",\"type\":\"Normal\"}\n\"\n    }\n  ]\n}\n\tInnerException None\n\tErrorResponse \n{\n    \"error\": {\n        \"message\": \"Service deployment polling reached non-successful terminal state, current service state: Failed\\nOperation ID: 7b8e6aa9-8993-4851-9ab5-ab170b1eff62\\nMore information can be found using '.get_logs()'\\nError:\\n{\\n  \\\"code\\\": \\\"AciDeploymentFailed\\\",\\n  \\\"statusCode\\\": 400,\\n  \\\"message\\\": \\\"Aci Deployment failed with exception: Your container application crashed. This may be caused by errors in your scoring file's init() function.\\n\\t1. Please check the logs for your container instance: best-model-service. From the AML SDK, you can run print(service.get_logs()) if you have service object to fetch the logs.\\n\\t2. You can interactively debug your scoring file locally. Please refer to https://docs.microsoft.com/azure/machine-learning/how-to-debug-visual-studio-code#debug-and-troubleshoot-deployments for more information.\\n\\t3. You can also try to run image 585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_3f259fbdf970aa6e79f45de49a733ae0 locally. Please refer to https://aka.ms/debugimage#service-launch-fails for more information.\\\",\\n  \\\"details\\\": [\\n    {\\n      \\\"code\\\": \\\"CrashLoopBackOff\\\",\\n      \\\"message\\\": \\\"Your container application crashed. This may be caused by errors in your scoring file's init() function.\\n\\t1. Please check the logs for your container instance: best-model-service. From the AML SDK, you can run print(service.get_logs()) if you have service object to fetch the logs.\\n\\t2. You can interactively debug your scoring file locally. Please refer to https://docs.microsoft.com/azure/machine-learning/how-to-debug-visual-studio-code#debug-and-troubleshoot-deployments for more information.\\n\\t3. You can also try to run image 585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_3f259fbdf970aa6e79f45de49a733ae0 locally. Please refer to https://aka.ms/debugimage#service-launch-fails for more information.\\\"\\n    },\\n    {\\n      \\\"code\\\": \\\"AciDeploymentFailed\\\",\\n      \\\"message\\\": \\\"Your container application crashed. Please follow the steps to debug:\\n\\t1. From the AML SDK, you can run print(service.get_logs()) if you have service object to fetch the logs. Please refer to https://aka.ms/debugimage#dockerlog for more information.\\n\\t2. If your container application crashed. This may be caused by errors in your scoring file's init() function. You can try debugging locally first. Please refer to https://aka.ms/debugimage#debug-locally for more information.\\n\\t3. You can also interactively debug your scoring file locally. Please refer to https://docs.microsoft.com/azure/machine-learning/how-to-debug-visual-studio-code#debug-and-troubleshoot-deployments for more information.\\n\\t4. View the diagnostic events to check status of container, it may help you to debug the issue.\\n\\\"RestartCount\\\": 3\\n\\\"CurrentState\\\": {\\\"state\\\":\\\"Waiting\\\",\\\"startTime\\\":null,\\\"exitCode\\\":null,\\\"finishTime\\\":null,\\\"detailStatus\\\":\\\"CrashLoopBackOff: Back-off restarting failed\\\"}\\n\\\"PreviousState\\\": {\\\"state\\\":\\\"Terminated\\\",\\\"startTime\\\":\\\"2021-12-04T23:29:20.105Z\\\",\\\"exitCode\\\":111,\\\"finishTime\\\":\\\"2021-12-04T23:29:28.469Z\\\",\\\"detailStatus\\\":\\\"Error\\\"}\\n\\\"Events\\\":\\n{\\\"count\\\":2,\\\"firstTimestamp\\\":\\\"2021-12-04T22:41:24Z\\\",\\\"lastTimestamp\\\":\\\"2021-12-04T23:06:00Z\\\",\\\"name\\\":\\\"Pulling\\\",\\\"message\\\":\\\"pulling image \\\"585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_4f8f562d13f7f04151080f0ecc9c060b@sha256:059321822f0db64b0845a3af385f8e5616ae8a7c13c2632502064abe004fbea8\\\"\\\",\\\"type\\\":\\\"Normal\\\"}\\n{\\\"count\\\":2,\\\"firstTimestamp\\\":\\\"2021-12-04T22:42:36Z\\\",\\\"lastTimestamp\\\":\\\"2021-12-04T23:06:29Z\\\",\\\"name\\\":\\\"Pulled\\\",\\\"message\\\":\\\"Successfully pulled image \\\"585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_4f8f562d13f7f04151080f0ecc9c060b@sha256:059321822f0db64b0845a3af385f8e5616ae8a7c13c2632502064abe004fbea8\\\"\\\",\\\"type\\\":\\\"Normal\\\"}\\n{\\\"count\\\":14,\\\"firstTimestamp\\\":\\\"2021-12-04T22:42:52Z\\\",\\\"lastTimestamp\\\":\\\"2021-12-04T23:04:17Z\\\",\\\"name\\\":\\\"Started\\\",\\\"message\\\":\\\"Started container\\\",\\\"type\\\":\\\"Normal\\\"}\\n{\\\"count\\\":14,\\\"firstTimestamp\\\":\\\"2021-12-04T22:42:56Z\\\",\\\"lastTimestamp\\\":\\\"2021-12-04T23:04:22Z\\\",\\\"name\\\":\\\"Killing\\\",\\\"message\\\":\\\"Killing container with id 905ebb343b06bf7ebf624fdf50312f39d390d62c8aca335af3d0b4d7dfca3a6c.\\\",\\\"type\\\":\\\"Normal\\\"}\\n{\\\"count\\\":1,\\\"firstTimestamp\\\":\\\"2021-12-04T23:02:05Z\\\",\\\"lastTimestamp\\\":\\\"2021-12-04T23:02:05Z\\\",\\\"name\\\":\\\"Pulling\\\",\\\"message\\\":\\\"pulling image \\\"585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_4f8f562d13f7f04151080f0ecc9c060b@sha256:059321822f0db64b0845a3af385f8e5616ae8a7c13c2632502064abe004fbea8\\\"\\\",\\\"type\\\":\\\"Normal\\\"}\\n{\\\"count\\\":1,\\\"firstTimestamp\\\":\\\"2021-12-04T23:03:09Z\\\",\\\"lastTimestamp\\\":\\\"2021-12-04T23:03:09Z\\\",\\\"name\\\":\\\"Pulled\\\",\\\"message\\\":\\\"Successfully pulled image \\\"585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_4f8f562d13f7f04151080f0ecc9c060b@sha256:059321822f0db64b0845a3af385f8e5616ae8a7c13c2632502064abe004fbea8\\\"\\\",\\\"type\\\":\\\"Normal\\\"}\\n{\\\"count\\\":5,\\\"firstTimestamp\\\":\\\"2021-12-04T23:04:33Z\\\",\\\"lastTimestamp\\\":\\\"2021-12-04T23:06:54Z\\\",\\\"name\\\":\\\"Started\\\",\\\"message\\\":\\\"Started container\\\",\\\"type\\\":\\\"Normal\\\"}\\n{\\\"count\\\":5,\\\"firstTimestamp\\\":\\\"2021-12-04T23:04:37Z\\\",\\\"lastTimestamp\\\":\\\"2021-12-04T23:06:57Z\\\",\\\"name\\\":\\\"Killing\\\",\\\"message\\\":\\\"Killing container with id 21f45c0bf71592431ea05f11fa7cd679c764da73c7784c6fdfc9d0838f876fe9.\\\",\\\"type\\\":\\\"Normal\\\"}\\n\\\"\\n    }\\n  ]\\n}\"\n    }\n}",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mWebserviceException\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-35-5c8906085d5b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0moverwrite\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m )\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mservice\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait_for_deployment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshow_output\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mservice\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/anaconda/envs/azureml_py36/lib/python3.6/site-packages/azureml/core/webservice/webservice.py\u001b[0m in \u001b[0;36mwait_for_deployment\u001b[0;34m(self, show_output, timeout_sec)\u001b[0m\n\u001b[1;32m    923\u001b[0m                                           \u001b[0;34m'Error:\\n'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    924\u001b[0m                                           '{}'.format(self.state, self._operation_endpoint.split('/')[-1],\n\u001b[0;32m--> 925\u001b[0;31m                                                       logs_response, format_error_response), logger=module_logger)\n\u001b[0m\u001b[1;32m    926\u001b[0m             print('{} service creation operation finished, operation \"{}\"'.format(self._webservice_type,\n\u001b[1;32m    927\u001b[0m                                                                                   operation_state))\n",
            "\u001b[0;31mWebserviceException\u001b[0m: WebserviceException:\n\tMessage: Service deployment polling reached non-successful terminal state, current service state: Failed\nOperation ID: 7b8e6aa9-8993-4851-9ab5-ab170b1eff62\nMore information can be found using '.get_logs()'\nError:\n{\n  \"code\": \"AciDeploymentFailed\",\n  \"statusCode\": 400,\n  \"message\": \"Aci Deployment failed with exception: Your container application crashed. This may be caused by errors in your scoring file's init() function.\n\t1. Please check the logs for your container instance: best-model-service. From the AML SDK, you can run print(service.get_logs()) if you have service object to fetch the logs.\n\t2. You can interactively debug your scoring file locally. Please refer to https://docs.microsoft.com/azure/machine-learning/how-to-debug-visual-studio-code#debug-and-troubleshoot-deployments for more information.\n\t3. You can also try to run image 585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_3f259fbdf970aa6e79f45de49a733ae0 locally. Please refer to https://aka.ms/debugimage#service-launch-fails for more information.\",\n  \"details\": [\n    {\n      \"code\": \"CrashLoopBackOff\",\n      \"message\": \"Your container application crashed. This may be caused by errors in your scoring file's init() function.\n\t1. Please check the logs for your container instance: best-model-service. From the AML SDK, you can run print(service.get_logs()) if you have service object to fetch the logs.\n\t2. You can interactively debug your scoring file locally. Please refer to https://docs.microsoft.com/azure/machine-learning/how-to-debug-visual-studio-code#debug-and-troubleshoot-deployments for more information.\n\t3. You can also try to run image 585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_3f259fbdf970aa6e79f45de49a733ae0 locally. Please refer to https://aka.ms/debugimage#service-launch-fails for more information.\"\n    },\n    {\n      \"code\": \"AciDeploymentFailed\",\n      \"message\": \"Your container application crashed. Please follow the steps to debug:\n\t1. From the AML SDK, you can run print(service.get_logs()) if you have service object to fetch the logs. Please refer to https://aka.ms/debugimage#dockerlog for more information.\n\t2. If your container application crashed. This may be caused by errors in your scoring file's init() function. You can try debugging locally first. Please refer to https://aka.ms/debugimage#debug-locally for more information.\n\t3. You can also interactively debug your scoring file locally. Please refer to https://docs.microsoft.com/azure/machine-learning/how-to-debug-visual-studio-code#debug-and-troubleshoot-deployments for more information.\n\t4. View the diagnostic events to check status of container, it may help you to debug the issue.\n\"RestartCount\": 3\n\"CurrentState\": {\"state\":\"Waiting\",\"startTime\":null,\"exitCode\":null,\"finishTime\":null,\"detailStatus\":\"CrashLoopBackOff: Back-off restarting failed\"}\n\"PreviousState\": {\"state\":\"Terminated\",\"startTime\":\"2021-12-04T23:29:20.105Z\",\"exitCode\":111,\"finishTime\":\"2021-12-04T23:29:28.469Z\",\"detailStatus\":\"Error\"}\n\"Events\":\n{\"count\":2,\"firstTimestamp\":\"2021-12-04T22:41:24Z\",\"lastTimestamp\":\"2021-12-04T23:06:00Z\",\"name\":\"Pulling\",\"message\":\"pulling image \"585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_4f8f562d13f7f04151080f0ecc9c060b@sha256:059321822f0db64b0845a3af385f8e5616ae8a7c13c2632502064abe004fbea8\"\",\"type\":\"Normal\"}\n{\"count\":2,\"firstTimestamp\":\"2021-12-04T22:42:36Z\",\"lastTimestamp\":\"2021-12-04T23:06:29Z\",\"name\":\"Pulled\",\"message\":\"Successfully pulled image \"585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_4f8f562d13f7f04151080f0ecc9c060b@sha256:059321822f0db64b0845a3af385f8e5616ae8a7c13c2632502064abe004fbea8\"\",\"type\":\"Normal\"}\n{\"count\":14,\"firstTimestamp\":\"2021-12-04T22:42:52Z\",\"lastTimestamp\":\"2021-12-04T23:04:17Z\",\"name\":\"Started\",\"message\":\"Started container\",\"type\":\"Normal\"}\n{\"count\":14,\"firstTimestamp\":\"2021-12-04T22:42:56Z\",\"lastTimestamp\":\"2021-12-04T23:04:22Z\",\"name\":\"Killing\",\"message\":\"Killing container with id 905ebb343b06bf7ebf624fdf50312f39d390d62c8aca335af3d0b4d7dfca3a6c.\",\"type\":\"Normal\"}\n{\"count\":1,\"firstTimestamp\":\"2021-12-04T23:02:05Z\",\"lastTimestamp\":\"2021-12-04T23:02:05Z\",\"name\":\"Pulling\",\"message\":\"pulling image \"585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_4f8f562d13f7f04151080f0ecc9c060b@sha256:059321822f0db64b0845a3af385f8e5616ae8a7c13c2632502064abe004fbea8\"\",\"type\":\"Normal\"}\n{\"count\":1,\"firstTimestamp\":\"2021-12-04T23:03:09Z\",\"lastTimestamp\":\"2021-12-04T23:03:09Z\",\"name\":\"Pulled\",\"message\":\"Successfully pulled image \"585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_4f8f562d13f7f04151080f0ecc9c060b@sha256:059321822f0db64b0845a3af385f8e5616ae8a7c13c2632502064abe004fbea8\"\",\"type\":\"Normal\"}\n{\"count\":5,\"firstTimestamp\":\"2021-12-04T23:04:33Z\",\"lastTimestamp\":\"2021-12-04T23:06:54Z\",\"name\":\"Started\",\"message\":\"Started container\",\"type\":\"Normal\"}\n{\"count\":5,\"firstTimestamp\":\"2021-12-04T23:04:37Z\",\"lastTimestamp\":\"2021-12-04T23:06:57Z\",\"name\":\"Killing\",\"message\":\"Killing container with id 21f45c0bf71592431ea05f11fa7cd679c764da73c7784c6fdfc9d0838f876fe9.\",\"type\":\"Normal\"}\n\"\n    }\n  ]\n}\n\tInnerException None\n\tErrorResponse \n{\n    \"error\": {\n        \"message\": \"Service deployment polling reached non-successful terminal state, current service state: Failed\\nOperation ID: 7b8e6aa9-8993-4851-9ab5-ab170b1eff62\\nMore information can be found using '.get_logs()'\\nError:\\n{\\n  \\\"code\\\": \\\"AciDeploymentFailed\\\",\\n  \\\"statusCode\\\": 400,\\n  \\\"message\\\": \\\"Aci Deployment failed with exception: Your container application crashed. This may be caused by errors in your scoring file's init() function.\\n\\t1. Please check the logs for your container instance: best-model-service. From the AML SDK, you can run print(service.get_logs()) if you have service object to fetch the logs.\\n\\t2. You can interactively debug your scoring file locally. Please refer to https://docs.microsoft.com/azure/machine-learning/how-to-debug-visual-studio-code#debug-and-troubleshoot-deployments for more information.\\n\\t3. You can also try to run image 585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_3f259fbdf970aa6e79f45de49a733ae0 locally. Please refer to https://aka.ms/debugimage#service-launch-fails for more information.\\\",\\n  \\\"details\\\": [\\n    {\\n      \\\"code\\\": \\\"CrashLoopBackOff\\\",\\n      \\\"message\\\": \\\"Your container application crashed. This may be caused by errors in your scoring file's init() function.\\n\\t1. Please check the logs for your container instance: best-model-service. From the AML SDK, you can run print(service.get_logs()) if you have service object to fetch the logs.\\n\\t2. You can interactively debug your scoring file locally. Please refer to https://docs.microsoft.com/azure/machine-learning/how-to-debug-visual-studio-code#debug-and-troubleshoot-deployments for more information.\\n\\t3. You can also try to run image 585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_3f259fbdf970aa6e79f45de49a733ae0 locally. Please refer to https://aka.ms/debugimage#service-launch-fails for more information.\\\"\\n    },\\n    {\\n      \\\"code\\\": \\\"AciDeploymentFailed\\\",\\n      \\\"message\\\": \\\"Your container application crashed. Please follow the steps to debug:\\n\\t1. From the AML SDK, you can run print(service.get_logs()) if you have service object to fetch the logs. Please refer to https://aka.ms/debugimage#dockerlog for more information.\\n\\t2. If your container application crashed. This may be caused by errors in your scoring file's init() function. You can try debugging locally first. Please refer to https://aka.ms/debugimage#debug-locally for more information.\\n\\t3. You can also interactively debug your scoring file locally. Please refer to https://docs.microsoft.com/azure/machine-learning/how-to-debug-visual-studio-code#debug-and-troubleshoot-deployments for more information.\\n\\t4. View the diagnostic events to check status of container, it may help you to debug the issue.\\n\\\"RestartCount\\\": 3\\n\\\"CurrentState\\\": {\\\"state\\\":\\\"Waiting\\\",\\\"startTime\\\":null,\\\"exitCode\\\":null,\\\"finishTime\\\":null,\\\"detailStatus\\\":\\\"CrashLoopBackOff: Back-off restarting failed\\\"}\\n\\\"PreviousState\\\": {\\\"state\\\":\\\"Terminated\\\",\\\"startTime\\\":\\\"2021-12-04T23:29:20.105Z\\\",\\\"exitCode\\\":111,\\\"finishTime\\\":\\\"2021-12-04T23:29:28.469Z\\\",\\\"detailStatus\\\":\\\"Error\\\"}\\n\\\"Events\\\":\\n{\\\"count\\\":2,\\\"firstTimestamp\\\":\\\"2021-12-04T22:41:24Z\\\",\\\"lastTimestamp\\\":\\\"2021-12-04T23:06:00Z\\\",\\\"name\\\":\\\"Pulling\\\",\\\"message\\\":\\\"pulling image \\\"585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_4f8f562d13f7f04151080f0ecc9c060b@sha256:059321822f0db64b0845a3af385f8e5616ae8a7c13c2632502064abe004fbea8\\\"\\\",\\\"type\\\":\\\"Normal\\\"}\\n{\\\"count\\\":2,\\\"firstTimestamp\\\":\\\"2021-12-04T22:42:36Z\\\",\\\"lastTimestamp\\\":\\\"2021-12-04T23:06:29Z\\\",\\\"name\\\":\\\"Pulled\\\",\\\"message\\\":\\\"Successfully pulled image \\\"585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_4f8f562d13f7f04151080f0ecc9c060b@sha256:059321822f0db64b0845a3af385f8e5616ae8a7c13c2632502064abe004fbea8\\\"\\\",\\\"type\\\":\\\"Normal\\\"}\\n{\\\"count\\\":14,\\\"firstTimestamp\\\":\\\"2021-12-04T22:42:52Z\\\",\\\"lastTimestamp\\\":\\\"2021-12-04T23:04:17Z\\\",\\\"name\\\":\\\"Started\\\",\\\"message\\\":\\\"Started container\\\",\\\"type\\\":\\\"Normal\\\"}\\n{\\\"count\\\":14,\\\"firstTimestamp\\\":\\\"2021-12-04T22:42:56Z\\\",\\\"lastTimestamp\\\":\\\"2021-12-04T23:04:22Z\\\",\\\"name\\\":\\\"Killing\\\",\\\"message\\\":\\\"Killing container with id 905ebb343b06bf7ebf624fdf50312f39d390d62c8aca335af3d0b4d7dfca3a6c.\\\",\\\"type\\\":\\\"Normal\\\"}\\n{\\\"count\\\":1,\\\"firstTimestamp\\\":\\\"2021-12-04T23:02:05Z\\\",\\\"lastTimestamp\\\":\\\"2021-12-04T23:02:05Z\\\",\\\"name\\\":\\\"Pulling\\\",\\\"message\\\":\\\"pulling image \\\"585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_4f8f562d13f7f04151080f0ecc9c060b@sha256:059321822f0db64b0845a3af385f8e5616ae8a7c13c2632502064abe004fbea8\\\"\\\",\\\"type\\\":\\\"Normal\\\"}\\n{\\\"count\\\":1,\\\"firstTimestamp\\\":\\\"2021-12-04T23:03:09Z\\\",\\\"lastTimestamp\\\":\\\"2021-12-04T23:03:09Z\\\",\\\"name\\\":\\\"Pulled\\\",\\\"message\\\":\\\"Successfully pulled image \\\"585bdc1e6ba94705b2b799a59a3bb3e2.azurecr.io/azureml/azureml_4f8f562d13f7f04151080f0ecc9c060b@sha256:059321822f0db64b0845a3af385f8e5616ae8a7c13c2632502064abe004fbea8\\\"\\\",\\\"type\\\":\\\"Normal\\\"}\\n{\\\"count\\\":5,\\\"firstTimestamp\\\":\\\"2021-12-04T23:04:33Z\\\",\\\"lastTimestamp\\\":\\\"2021-12-04T23:06:54Z\\\",\\\"name\\\":\\\"Started\\\",\\\"message\\\":\\\"Started container\\\",\\\"type\\\":\\\"Normal\\\"}\\n{\\\"count\\\":5,\\\"firstTimestamp\\\":\\\"2021-12-04T23:04:37Z\\\",\\\"lastTimestamp\\\":\\\"2021-12-04T23:06:57Z\\\",\\\"name\\\":\\\"Killing\\\",\\\"message\\\":\\\"Killing container with id 21f45c0bf71592431ea05f11fa7cd679c764da73c7784c6fdfc9d0838f876fe9.\\\",\\\"type\\\":\\\"Normal\\\"}\\n\\\"\\n    }\\n  ]\\n}\"\n    }\n}"
          ]
        }
      ],
      "execution_count": 35,
      "metadata": {
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "service.get_logs()"
      ],
      "outputs": [],
      "execution_count": 36,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1638661029480
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "TODO: In the cell below, send a request to the web service you deployed to test it."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "x = iris.iloc[15, :-1].tolist()\n",
        "y = iris.loc[15, \"labels\"]\n",
        "print(x)\n",
        "print(y)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import json\n",
        "input_payload = json.dumps([x])\n",
        "\n",
        "output = service.run(input_payload)\n",
        "print(f\"Predicted: {output}\\nExpected: {y}\")"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(service.get_logs())"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "TODO: In the cell below, print the logs of the web service and delete the service"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "service.delete()\n",
        "compute_target.delete()"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {}
    }
  ],
  "metadata": {
    "kernel_info": {
      "name": "python3"
    },
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.9",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "microsoft": {
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}